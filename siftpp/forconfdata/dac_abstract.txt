soc designs hardware prototyping development cycle perform hardware software validation test interfaces real world stimulus recently virtual prototypes emerged run system level tests perform hardware software co simulation silicon hardware prototypes available emergence virtual prototyping mean fpga based prototypes hardware prototype continue live integral soc design cycle hybrids virtual hardware prototypes answer join expert panelists spirited discussion approach speeding verification validation complex soc using system prototypes virtual hardware hybrid reign supreme

circuit techniques dynamic variation tolerance sensors adaptive voltage frequency circuits ii tunable replica circuits timing error prediction error recovery iii embedded error detection sequential circuits error recovery circuits mitigate clock frequency guardbands dynamic variations improving microprocessor performance energy efficiency circuits described focus trade offs guardband reduction design overhead opportunities cad enhance microprocessor performance energy efficiency offered

power performance benefits scaling lost worst margins uncertainty device characteristics increasing adaptive techniques dynamically adjust margins required tolerate variability recover significant benefits lost due worst conditions additionally stringent timing requirements synthesis low skew clock trees involve power consumption limit adaptability varying operating conditions paper introduces elastic clocking scheme adaptive technique confront variability provide substantial power savings dynamically adjusting operating conditions synthesis sign analysis elastic clocks automated changes design flow sign analysis elastic clocks addressed automation design flow support

review adaptive design techniques particular emphasis error tolerant techniques compare contrast traditional adaptive approaches error tolerant techniques analyze margins eliminated discuss applications latter chip communication signal processing finally focus specific example error tolerant technique purpose computing called razor

crosstalk delay noise occurs due simultaneous transitions victim aggressor drivers sensitive mutual alignment hence static noise analysis crucial identify worst victim aggressor alignment results maximum delay noise approaches proposed obtain worst aggressor alignment compute worst stage delay victim reality essential compute worst combined delay victim stage victim receiver gate 5 9 propose heuristic approach compute worst aggressor alignment maximizes victim receiver output arrival time novel cumulative gate overdrive voltage cgov metric model victim receiver output transition hspice simulations performed industrial nets validate proposed methodology average error 1.7 delay noise compared worst alignment obtained exhaustive sweeping

static timing analysis vlsi circuits relies tabular models logic gates obtained library characterization characterization time logic gates simulated circuit level range input waveforms e.g saturated ramps slews various output loads timing analysis time gates driven input waveforms class characterization waveforms paper proposes method mapping waveforms arise static timing analysis class waveforms characterize gate timing performance library characterization method based moments input waveform describe concisely salient features waveform mapping input waveform effective characterization waveform accomplished positing functional relationships input waveform's moments parameters characterization waveform unknown coefficients functional relationship determined minimizing worst error output waveform representative set input waveforms gate loads technique requires change library characterization procedure minimal change static timing tool little additional computational burden timer

timing closure biggest bottleneck modern vlsi design flow traditional timing verification techniques static timing analysis sta usually conservative sometimes optimistic inaccuracy lead unnecessary procrastination time market silicon failure mainly due inability detect false paths handle multiple input transitioning effects timing analysis process paper proposed novel formal static timing analysis fsta technique model multiple input transitioning effects detect false paths generate input transition pattern true critical path time achieved tightly integrating art boolean satisfiability sat solver sta engine specialized multiple input transition timing library experiments compare fsta engine traditional sta random simulation techniques results approach greatly outperforms random simulation obtaining accurate timing analysis results sta

paper introduces stealing simple architectural modification cache based processor increase data bandwidth application specific instruction set extensions ises stealing provides bandwidth ise logic register file require expensive coherence protocols add memory elements processor enhanced stealing ise identification flows detect opportunities acceleration prior methods consequently stealing accelerate applications 3.7x whilst reducing memory sub system energy consumption 67 despite data cache related restrictions

modeling language formal semantics able capture system's functionality unambiguously concerning implementation details formal language suited design process employs formal techniques supports hardware software synthesis hand systemc widely system level design language hardware oriented modeling features provides desirable simulation framework system architecture design exploration paper design framework called syscola makes unique advantages formal modeling language cola systemc allows parallel development application software system platform syscola function design architecture exploration cola based modeling environment systemc based virtual prototyping environment respectively concepts abstract platform virtual platform abstraction layer facilitate orthogonalization functionality architecture means mapping integration respective environments syscola targeted automotive domain design approach showcased using study designing automotive system

paper design method automotive architectures proposed main technical contributions novel hardware software architecture encoding unifies design steps i.e resource allocation process binding message routing scheduling parameter estimation processor bus schedulers ii hybrid scheme allows timing analysis techniques applied bus protocols viz flexray architecture derive global performance estimates delays messages compact encoding technique substantially reduces underlying search space hybrid timing analysis scheme allows combination timing analysis techniques real time systems domain proposed techniques combined tool chain real life study illustrate advantages

process variability range sources growing technology scales below 65nm resulting increasingly nonuniform transistor delay leakage power die dies result negative impact process variations maximum operating frequency total power consumption processor expected worsen meanwhile manufacturers integrated cores single die substantially improving throughput processor running highly parallel applications existing applications parallelism exploit multiple cores die paper analyze throughput impact applying core power gating dynamic voltage frequency scaling power thermal constrained multicore processors optimize throughput multicore processors running applications limited parallelism exploit power thermal headroom resulted power gated idle cores allowing active cores increase operating frequency supply voltage scaling analysis using 32nm predictive technology model optimizing active cores operating frequency power thermal supply voltage scaling limits improves throughput 16 core processor 16 furthermore extend throughput analysis optimization consider impact die process variations leading core core frequency leakage power variations multicore processor analysis exploiting core core frequency variations improves throughput 16 core processor 75

discusses 1024 memory logic 3dic fft processor synthetic aperture radar sar sent fabrication 180 nm mit lincoln labs 3d fdsoi 1.5 process 12 design flow required realize shelf commercial 2d tools vertical dimension exploited novel memory architecture tradeoffs feasible 2d reducing energy consumed memory operation fft 60.3 comparison 2d counterpart sar fft processor exhibits 53.0 decrease average wire length 24.6 increase maximum operating frequency 25.3 decrease total silicon

hurdles technology scaling process variations i.e variations device characteristics process variations cause fluctuations performance power consumption manufactured chips addition fluctuations cause reductions chip yields analysis representative performance processor architecture caches probability causing yield losses process variations propose novel selective wordline voltage boosting mechanism aims reducing latency cache lines affected process variations approach eliminate 80 yield losses medium level variations incurring 1 access energy overhead average 4.5 overhead

double patterning lithography dpl coloring conflict stitch minimization main challenges post layout decomposition algorithm 1 2 achieve quality solution dpl unfriendly designs due complex 2d patterns lower metal layers dpl friendliness routing stage 3 key yield improvement technique redundant via insertion 4 5 increase complexity dpl compliance designs manufacturable dpl insert redundant via results coloring conflict paper consider dpl redundant via developed algorithms post routing dpl aware insertion dpl friendly routing redundant via consideration account redundant via dpl compliance experimental results compared dpl aware optimization flow redundant via consideration improve insertion rate 43 achieving zero coloring conflicts moreover reduce vias stitches 9 17 respectively

designers using dimension measurements nanometer designs can't readily identify features prone excessive variation processing process simulation provides resolution checking requires significant computing resources equation based design rule checking eqdrc offers drc performance capture complex process issues using multi dimensional equations challenge adopting eqdrc definition calibration equations lithographic simulator define calibrate eqdrc equation

carbon nanotubes cnts grown using chemical synthesis result extremely difficult ensure exact positioning uniform density cnts density variations cnt growth compromise reliability carbon nanotube field effect transistor cnfet circuits result increased delay variations parameterized model cnt density variations based experimental data extracted aligned cnt growth model quantify impact variations design metrics noise margin delay variations cnfet circuits finally analyze correlation exists aligned cnt growth demonstrate reliability cnfet circuits significantly improved taking advantage correlation

silicon nanowires promising solution address increasing challenges fabrication design future nodes complementary metal oxide semiconductor cmos technology roadmap despite attractive opportunity offers organization onto regular crossbars designing nano wire decoder challenging highly dependent nanowire fabrication technology paper introduce novel design style encoding scheme decoding nanowires fabricated multi spacer patterning technique mspt method based gray codes reduces fabrication cost improves decoder reliability arranging code gray code fashion decrease fabrication complexity 17 variability 18 average optimizing decoder parameters simulations improvement crossbar yield 40 reduction effective bit 51 169 nm sup 2 sup

paper analyses negative differential resistance ndr based logic circuits operating monostable bistable transition logic element mobile regime formulate theoretical foundation formal model generalised threshold gate gtg prove gtg implement variable boolean function moreover propose algorithmic approach gtg structure generation

paper technique improve storage density spin torque transfer stt magnetoresistive random access memory mram presence significant magnetic tunneling junction mtj write current threshold variability conventional design practice nmos transistor memory cell sized carry current larger worst mtj write current threshold leading increasing storage density penalty technology scales mitigate variability induced storage density penalty paper worst transistor sizing approach underlying theme jointly considering memory cell transistor sizing defect tolerance effectiveness demonstrated using 256mb stt mram design 45nm node test vehicle results normalized write current threshold deviation 20 overall memory die size reduced 20 compared conventional worst transistor sizing design practice

crisis terrible waste quotes heard experts industry academia mean change professional evolve career eda evolve panel represents multiple views questions experts review current job situation eda provide historical perspective previous recessions panel discuss views directions electronics market eda evolve options career development slow industry

paper technology economic challenges posed 22nm cmos beyond addressed advances design technology validation testing exploit benefits scaling enjoyed decades

achieving required time market economically acceptable yield levels maintaining volume production daunting task advanced technology nodes difficulties primarily attributable increase process variability incurred aggressively scaling technology nodes based fundamental device architectures process solutions introduction metal gate mghk stack 32 28nm technology node help addressing random variations due random dopant fluctuations rdf benefit exhausted single process generation 3 result 22 20nm technology nodes hope limit rdf adopt novel device architecture finfet ultra thin body depleted soi reduce dopant concentration channel addition rdf random effects line edge roughness aggressive scaling increasing layout dependent systematic variability due resolution limitations application stressors modern device architectures 3 recognize left unchecked systematic variations prohibitive impact designs targeted towards 22nm technology nodes moreover inability scale wavelength light source lithography led rapid increase process design costs particular lack progress extreme ultraviolet lithography euvl result define 22nm technology node using expensive double patterning technologies dpt critical layers 1 2 result complex dfm flows proposed attempt model various printability layout dependent effects increase design flow complexities lack accuracy tremendous expense maintaining updated models required methods marred adoption believe approach required minimize systematic variations plague future technology nodes specifically industry abolish reactive dfm solutions adopt pro active approach dfm increasing level abstraction towards co development process design propose novel design methodology based set pre characterized circuit elements templates ensure correct construction integrated circuit design 2 methodology permit industry step moore's law application smarter efficient circuit layout lithography co design techniques addition examine lithographic limitations encountered future technology nodes including 22nm node proposed template based design methodology overcome challenges key enabler methodology creation regular design fabric onto efficiently map selected logic templates using limited printability friendly layout patterns co optimization circuit layout process figure 1 achieved selection logic functions circuit styles layout patterns lithography solutions jointly result lowest cost die resulting set layout patterns physical templates characterized silicon specially designed test structures ensuring complete coverage proposed methodology able assure pass silicon success template based design methodology enable future technology nodes utilize current generation lithography minimizing cost die particular discuss choices regular design fabrics implications design metrics power performance resulting yields overall cost selection circuit topologies mapped efficiently choice regular design fabric compare lithography solutions dpt direct write multi beam mebm interference lithography il 22nm technology node beyond

transition 22nm node technology considerations device architectures suitable scaled technologies explored design circuits systems scaled nodes believe technology aware circuit system design methodology considers device architecture technology challenges achieve design optimality paper discuss challenges device circuit system design 22 nm node techniques levels design abstraction meet challenges particular discuss device options multi gate fets logic memory design using multi gate fets considered finally briefly discuss process variation tolerant system design methodologies scaled technologies

talk describe challenges performance microprocessor designs 22nm beyond focus talk addressing risks complexity demanding design domain lies beyond innovation driving engine technology

modeling spatial variation statistical analysis existing model spatial variation spatially correlated random variables discuss process origins spatial variability indicate spatial variation comes deterministic wafer variation purely random spatial variation significant analytically study impact wafer variation appearance correlation developed dielevel variation model considering deterministic wafer variation derived range conditions ignoring spatial variation altogether acceptable experimental results model 1 error exact simulation result error existing distance based spatial variation model 8 moreover model 10x faster spatial variation model monte carlo analysis

paper introduces gaussian mixture model represent delay slew distributions statistical static timing analysis proposes algorithms propagating circuit graph gaussian mixture model represent gaussian distribution due statistical max operation properly correlation efficiently consists plural gaussian distributions topological correlations caused re convergent paths correlation element critical delay useful circuit optimization calculated easily propagated slews compute delay distributions circuit elements dynamically improve accuracy proposed gaussian mixture model evaluated comparing monte carlo simulation results effectiveness

paper describes stochastic jitter model analyzing performance bit error rate ber digital timing recovery circuits model parallel interconnected markov chains simulate behavior system response random deterministic jitter unlike conventional markov chain models require system stationary parallel chain model approximates deterministic changes conditions transitions sub chains verify accuracy model analysis performed digital delay locked loop results compared measured data resulting transition probabilities ber predicted proposed model magnitude accurate predicted conventional markov chain model

correct timing quantities essential timing analysis design optimization presence process variation timing quantities deterministic value distribution paper proposes novel metric called tiered criticalities guarantees provide unique set correlated timing quantities properly taking account process space coverage efficient algorithms developed compute metric effectiveness path ranking speed testing demonstrated

paper propose methodology called parametric chip variation pocv analysis determine local process variation effects timing designs proposed methodology requires relative delay parasitic variations cells interconnects respectively information provided delays arrival times propagated calculate slacks function relative variations key characteristic pocv analysis require statistical library characterization statistical rc extraction pocv method implemented timing analysis software tested multiple production designs 65nm 45nm technology nodes including multi million instance designs observation compared existing methods pocv removes unrealistical pessimism setup paths captures risks hold paths changes existing timing sign environment

application profiling process monitoring application determine frequency execution specific regions essential step design process software hardware systems profiling critical step hardware software partitioning utilized determine critical kernels application paper intrusive dynamic application profiler daprof capable profiling executing application monitoring application's short backwards branches function calls function returns efficiently detecting context switches provide accurate characterization frequently executed loops multitasked applications daprof accurately profile multiple tasks software application 98.5 accuracy using little 10 additional compared arm9 processor

paper novel approach chip instruction cache soc function simultaneously regular instruction cache real time program trace compressor goal accomplished exploiting dictionary feature instruction cache support circuit attached cache trace compression bypass mode online mode compared related advantage utilizing existing instruction cache indispensable modern socs saves significant amount hardware resource rtl implementation 4kb trace capable instruction cache 4kb data cache academic arm7 processor core accomplished experiments cache achieves average compression ratio 90 hardware overhead 3652 gates addition trace support circuit impact global critical path proposed approach highly feasible chip debugging monitoring solution socs cost sensitive ones consumer electronics

functional validation processor design execution suite test programs common industrial practice paper develop level architectural specification driven methodology systematic test suite generation primary contribution automated test suite generation methodology covers processor pipeline interactions accomplish automation 1 develop formal processor model based communicating extended finite machines 2 traverse processor model fly generation short test programs covering reachable transitions test generation method achieves magnitude reduction test suite size compared previously proposed formal approaches test generation leading drastic reduction validation effort

traditional debug methodologies limited ability provide debugging support core parallel programming synchronization bugs due race conditions particularly difficult detect software debugging tools traditional debugging approaches rely globally synchronized signals pose terms scalability contribution paper propose novel nonuniform debug architecture nuda based ring interconnection schema approach makes debugging feasible scalable core processing scenarios key idea distribute debugging support structures set hierarchical clusters avoiding address overlap allows address space monitored using uniform protocols contribution intrusive approach race detection supported nuda uniform page based monitoring cache nuda node watch access footprints union caches serve race detection probe using proposed approach parallel race bugs precisely captured false positive alerts efficiently eliminated average slow cost 1.4 3.6 net hardware cost relatively low nuda readily scale increasingly complex core systems

leakage power minimization critical semiconductor design nanoscale cmos hand increasing variability scaling adds complexity leakage analysis seek achieve tractability monte carlo based statistical leakage analysis novel approach fast accurate statistical leakage analysis considering inter die intra die components proposed optimal select samples capture intra die variation accurately according probability distribution function total process variation intelligent selection samples performed using quasi monte carlo technique results benchmarks sizes varying approximately 5,000 200,000 gates largest benchmark 198461 gates evaluated 3 minutes proposed approach compared 23 hours random sampling comparable accuracy compared conventional analytical approach using wilkinson's approximation proposed technique offers superior accuracy maintaining efficiency dependence multiple sources variation considered approach scalable process parameter variables standard cell characterization cost reduction sample size meet target accuracy computing leakage distribution due inter die component compared random selection samples

paper consider exploiting infeasible clock gating functions analysis industrial designs reveals margin potential power saving based clock gating functions initially appear useless due timing violation excessive power consumption propose optimization techniques resurrecting functions generic post processing phase automatic clock gating tool provides timing aware approximation aims generating gating domains clustering similar clock gating functions experimental results combination techniques yields additional power saving 78 industrial designs

power consumption system level chip communications becoming significant overall system chip soc power technology scales paper propose low power design technique gated bus greatly reduce power consumption art bus architectures adding demultiplxers adopting novel shortest path steiner graph achieve flexible tradeoff power reduction versus wire length increment according experiments using gated bus reduce average 93.2 wire capacitance transaction nearly half bus dynamic power scale 5 10 total system power

today's highly integrated system chips soc demand innovative architectural modeling means cope energy constraints context systemc established simulation tool transaction level modeling tlm integrated electronics industry lacks support power modeling paper introduces activasc flexible fast transparent intrusive extension systemc class library allows capturing activity information digital system modeled information post processed estimate power consumption activasc avoids time consuming design iterations designers assess architectural design trade offs based system activity design flow activasc require code alterations nor specific api modeling style finally benchmark tests illustrate superior efficiency activasc speed 75 terms elaboration overhead 20 terms simulation overhead realized respect prior art

paper propose novel simulation algorithm scale structured power grid networks method formulates traditional linear system special dimension poisson equation solves using analytical expressions based fft technique computation complexity algorithm nlgn traditional solver's complexity sup 1.5 sup sparse matrices superlu solver pcg solver due special formulation graphic process unit gpu explored speed algorithm experimental results algorithm stable achieve 100x speed gpu widely superlu solver little memory footprint

power grid verification modern integrated circuits integral system design adjustments easily incorporated describe verification approach framework current constraints worst node voltage drops computed via linear programs proportional grid size propose efficient method based sparse approximate inverse technique greatly reduce size linear programs ensuring user specified estimation margin volts exact solution

continuously shrinking feature sizes result increasing susceptibility circuits transient faults e.g due environmental radiation approaches implement fault tolerance assessing fault tolerance circuit tough propose formal methods assess robustness digital circuit respect transient faults formal model fixed bound time cope complexity underlying sequential equivalence check result lower upper bound robustness underlying algorithm techniques improve efficiency experiments method evaluated circuits fault detection mechanisms

manufacturing process variability impacts performance synchronous logic circuits means effect clock network functional block delays typically variability clock networks handled design flow assigning margins clock network delays stage post processing steps focus achieving minimal skew regard functional block variability technique alters clock network lines circuit meets timing constraints process corners near design flow considering delay variability clock network functional blocks method operates physical level provides designers required changes clock network line widths lengths formulated linear programming lp solved efficiently empirical results set iscas 89 benchmark circuits approach considerably reduce effect process variations circuit performance

exponential increase fabrication costs global recession credit crunch moore's law financially viable beyond 22nm node justify return investment roi continuous scaling beyond 22nm consider alternatives integration silicon package sip 3d integrations

development multi million gate socs ics enabled advances submicron technology inherit verification complexity due feature diversity single die convergence multiple design disciplines project time market pressures unchanged example uncommon socs integrate mixed signal components provide power management features contain instances soft hard 3 sup rd sup party ips building blocks developed house support compliance compatibility requirements ranging functional electrical aspects various standard based protocols timely confidence verification sign socs ics requires multi prong strategy defined paper holistic verification holistic verification emphasizes cocktail verification methodologies designed address specific verification challenges soc advocates aspects verification planning design verification techniques aid verification efforts enhance verification efficiency additionally paper describes details verification challenges associated mixed signal integration power management features socs distinctly design disciplines converging project adding growing complexity verification

socs provide verification challenges paper discusses soc ip paradigm impacted amd highlights design issues consider embark implementing soc ip approach projects own company

typical hardware development flow starts verification process concurrently rtl overall schedule limited effort required complete verification tasks limiting factor verification schedules unpredictable resulting slippage tapeout dates paper looks restructure flow complete significant effort architectural phase project prior start rtl front loading schedule allows verification team complete process tighter schedule

traditionally development asics company cisco tightly coupled development single product increasing costs associated development asics forced fundamental shift asic development process acceptable develop asic single product instead expectation asics current development life span multiple generations product multiple products company consequences asics themselves manner developed paper discuss impact asic development process expanded role verification team plays throughout development process ensuring asics delivered meet expectations product teams

software accounts 80 embedded system development efforts software performance estimation issue system design recently source level simulation sls art approach software simulation system level design simulation accuracy relies mapping source code binary code destroyed compiler optimizations drawback strongly limits usability technique practical system design introduce approach overcome limitation converting source code low level representation called intermediate source code isc isc accounted compiler optimizations structure close binary code allows accurate annotation timing information binary level benefits approach quantitative comparison related techniques proposed using set benchmarks

current microprocessors effectively system chip incorporate processing cores interconnections shared private caches dram controllers single die consequently imperative fast accurate simulation tools systems paper tool simulating current announced variants multicore processors predominant pc x86 x86 64 instruction set external dram memory buses discuss major techniques speeding simulation improving overall accuracy simulation system level details coherent caches chip interconnections memory bus dram demonstrate 8 fold speedup widely popular tool

multiprocessor system chips mpsocs becoming widely adopted embedded systems strong methodologies quickly accurately estimate performance complex systems paper novel method accurately estimating cycle counts parameterized mpsoc architectures workload simulation driven program execution traces encoded form branch bitstreams experimental results proposed method delivers speedup factor 70.15 238.58 instruction set simulator based method achieving cycle accuracy estimation error ranges 0.016 0.459

embedded cryptosystems increased vulnerabilities implementation attacks power analysis cmos technology trends causing increased process variations impact data dependent power deep submicron cryptosystem designs paper monte carlo methods spice circuit simulations analyze statistical properties data dependent power predictive 45nm cmos device itrs process variation models addition measurement disclosure mtd 3 define lower level metric power attack tolerance pat model dynamic power leakage power data dependence pat typical cryptographic component implementation using cmos standard cells significantly deteriorate due process variations increasing component's vulnerability power attacks power attack resistant logic styles e.g sabl 9 developed increase pat magnitude balancing power consumption gate level considerable overhead presence process variations degradation probability mtd 57 mitigate demonstrate transistor sizing optimization method reduce negative impacts 18 minimal power overhead

short time market window embedded systems demands automation design methodologies customizable processors recent research advances direction focused single criteria optimization e.g optimizing performance custom instructions pre defined constraint designer's perspective conflicting trade offs multiple objectives e.g performance versus exposed enabling informed decision unfortunately identifying optimal trade computationally intractable paper polynomial time approximation algorithm systematically evaluate design trade offs particular explore performance trade offs context multitasking real time embedded applications implemented customizable processor

paper describes rapid design methodology create pipeline processers execute streaming applications methodology separate phases phase heuristic rapidly search processor configurations configurations base processor additional instructions cache sizes near pareto front phase utilizes heuristic ilp integer linear programming formulation search design space appropriate final implementation utilization fast heuristic differing runtime constraints phase rapidly near pareto front phase provides optimal near optimal solution ilp formulation heuristic system designer specified runtime constraint system efficiently explored design spaces 10 sup 12 sup design integrated design methodology commercial design flow evaluated approach benchmarks jpeg encoder jpeg decoder mp3 encoder benchmark near pareto front found hours using heuristic days ilp results average error heuristic 2.5 optimal design obtained using ilp benchmarks

digital signal processing applications require computation linear systems computations considerably expensive require optimizations lower power consumption throughput faster response time unfortunately system designers tools advantage wide flexibility evaluate expressions address efficiently computing set linear systems tool xquasher developed enable elimination common subexpression expressions arbitrary terms xquasher provides methodology efficient computation single multiple linear expressions introduce concept power set encoding helps provide effective optimization method achieves significant improvement previously published tool provides optimized designs 15 cost 3 increase delay reducing additions average 45

digital microfluidic biochips emerged popular alternative laboratory experiments biochip feasible practical applications pin count reduction key level integration reactions biochip previous approach post processing placement routing solutions share compatible control signals quality sharing algorithms inevitably limited placement routing solutions paper comprehensive pin constrained biochip design flow addresses pin count issue design stages proposed flow consists major stages 1 pin count aware stage assignment partitions reactions bioassay execution stages 2 pin count aware device assignment determines specific device reaction 3 guided placement routing pin assignment utilize pin count saving properties stage device assignments optimize assay time pin count stage device assignments exact ilp formulations effective solution space reduction schemes proposed minimize assay time pin count experimental results efficiency algorithms flow 55 57 pin count reduction art algorithms flow

optical routing framework router future low power chip optical interconnect integration utilizing silicon compatible nano photonic devices formulate optical layer routing minimization total chip optical modulator cost laser power consumption integer linear programming technique various detection constraints key techniques variable reduction routing speedup explored utilized router tested optical netlist benchmarks modified top global nets ispd98 08 routing benchmarks router experimental results compared conventional minimum spanning tree algorithm demonstrating average 50 improvement terms total chip optical layer power reduction

reversible logic basis emerging technologies quantum computing optical computing dna computing applications domains low power design nanotechnologies current methods synthesis reversible logic limited i.e applicable relatively functions paper propose synthesis approach cope boolean functions containing hundred variables technique derive reversible circuits function binary decision diagram bdd circuit obtained using algorithm linear worst behavior regarding run time space requirements furthermore size resulting circuit bounded bdd size allows transfer theoretical results bdds reversible circuits experiments results respect circuit cost significantly scalability comparison previous synthesis approaches

hardware design languages typically impose rigid communication hierarchy follows module instantiation leads undesirable effect changes child's interface result changes parents soft connections address allowing user specify connection endpoints automatically connected compilation time user

stream processing represents class applications spans telecommunications multimedia internet implementation streaming programs fpgas attracted significant attention inherent parallelism performance requirements languages tools custom hardware streaming proposed commercially available significant challenges realizing streaming applications directly hardware fpgas fpgas finite resources trivial tradeoffs processing throughput overall latency paper describe algorithm computes refinements stream graphs designs optimize processing throughput subject user specified latency constraints

retiming recycling transformations optimize performance latency insensitive a.k.a synchronous elastic systems paper approach combines transformations performance optimization elastic systems evaluation method based mixed integer linear programming set random benchmarks proposed method achieves average 14.5 performance improvement min delay retiming configurations

speculation technique increasing parallelism microprocessor pipelines hence performance implementing speculation modern design practice error prone ad hoc paper proposes correct construction method implementing speculation elastic systems technique based applying provably correct transformations benefits speculation illustrated examples transformations systematically applied method proposed paper amenable automation synthesis flow

external specifications ic functions clock rate power consumption determine competitiveness product successful profitable ic business designers design competitors usually design manufacturing dfm discussed yield improvement strategy value dfm competitive view dfm designers competitive lever helping decide push design creating manufacturing disaster dfm optimize designs identify hot spots panel explore questions bull signoff business decision avoiding disaster gaining competitive advantage bull rules vs modeling style substance bull rdrs help hinder competitive advantage bull dfm help ensure parametric yield envelop competitive bull design fab flow total quality management process

presentation scaling challenges facing current complimentary metal oxide semiconductor cmos technology discussed ultimate limits charge switching based devices motivation current status nanoelectronics research initiative nri discussed overview current research topics investigated nri centers

single electron transistors sets promise future functional elements lsis low power consumption size low driving strength oscillating id vg characteristic sets difficult lsis alternatives conventionally mos transistors electronics ubiquitous lsis expected widely ultra low power electronic devices various applications electronic tags credit cards strong demand application domain leads increased requirements lsis functionality security low power consumption strongly required lsis result change target applications offer opportunity functional electronic devices sets paper firstly strategy using sets conventional logic circuits reduce power consumption application domains sets characteristics charge sensitivity oscillating id vg characteristics discussed

carbon nanotube field effect transistors cnfets promise extensions silicon cmos ideal cnfet circuits potentially provide 20x energy delay product benefits silicon cmos 16 nm technology node challenges overcome performance benefits experimentally realized paper brief overview cnfet technology address commonly raised concerns series frequently questions faqs provide cnfet technology outlook includes survey challenges existing potential solutions challenges

paper explores challenges opportunities facing cmos process generations past 32nm technology node planar multiple gate devices compared contrasted resistance capacitance challenges reviewed relation past history research key enhancers metal gate hik mg substrate channel orientation nmos pmos strain discussed relation challenges coming transistor generations

obstacle avoiding rectilinear steiner minimal tree paper log time algorithm theoretical optimality guarantees specific required sup 3 sup time previous propose framework directly generate critical paths essential solution components prove paths guarantee existence desirable solutions path based framework neither generates invalid initial solutions nor constructs connected routing graphs provides deal oarsmt experimental results algorithm achieves speed performance average wirelength resulting solutions 1.1 existing solutions

propose grip scalable global routing technique via integer programming ip grip optimizes wirelength via cost layer assignment phase grip selects route net set candidate routes generated based estimate congestion generated linear programming pricing phase achieve scalability original ip decomposed ones corresponding balanced rectangular subregions chip introduce concept floating terminal net allows flexibility route nets multiple subregions ip plan routing nets detouring congested subregions ispd 2007 benchmarks obtain 3.9 11.3 average improvement wirelength via cost 2d 3d versions respectively compared results reported literature

commercial pcb routing tools solve routing today's complex pcbs circuit boards routed manually taking 2 months time board bus planning time consuming steps pcb routing consists assigning buses multiple layers pcb routing planar fashion layer routing congestion board components min max length bounds buses considered routing paper automatic bus planner tested system art industrial circuit board 7000 nets 12 signal layers nets board manually routed bus planner able achieve 100 routing completion using layer assignment extracted manual design simultaneous layer assignment bus routing able successfully route 98.5 nets remaining 1.5 routed manually using vias runtime bus planner 3 hours 3 ghz workstation

escape routing packages pcbs studied extensively past network flow pervasively model none previous correctly models diagonal capacity essential 45 deg routing packages pcbs result existing algorithms produce routing solutions violate diagonal capacity fail output legal routing exists paper propose network flow model guarantees correctness diagonal capacity consideration model leads optimal algorithm escape routing extend model handle missing pins

paper novel flip chip routing algorithm package board co design unlike previous consider free pre assignment routing router literature handle free pre assignment routing based computational geometry techniques e.g delaunay triangulation voronoi diagram router applies unified network flow formulation perform congestion estimation pre assignment routing according congestion map network flow formulation consider free assignment nets routing pre assignment ones router modifies network flow formulation optimally assign route free assignment nets considering routed pre assignment nets package board co design flow achieve 100 routing completion experimental results based industry designs demonstrate quality algorithm

increasingly process variations selection set critical paths speed testing essential challenging paper proposes novel multilayer process space coverage metric quantitatively gauge quality path selection overcome exponential complexity computing metric paper reveals relationship concept called statistics set correlated random variables efficient computation hitherto literature paper develops elegant recursive algorithm compute statistics metric provable linear time space novel data structure statistics incrementally updated employing branch bound path selection algorithm techniques paper selecting optimal set paths multi million gate design performed efficiently compared art experimental results efficiency algorithms quality path selection

optimizing performance designs speed limiting paths speed paths impact performance power trade timing tools attempt model capture paths chip due performance nature designs critical paths predicted timing tools match actual speedpaths found silicon chips silicon data identify speedpaths performance optimization carried pushing delays paths context paper novel data mining approach analyzes identified speedpaths speedpaths result analysis speedpath set hypotheses explaining path special hypotheses guiding search root causes predicting additional paths potential speedpaths demonstrate feasibility approach summarize findings based analysis silicon speedpaths collected 65nm microprocessor

post silicon validation essential step design flow today's complex integrated circuits effective technique provides real time visibility circuit debug cud monitor trace internal signals normal operation typically signals tapped subset selected observed debug process trace signals transferred chip buffers chip trace ports analysis existing solutions multiplexer trees specific access networks conduct duty provide visibility cud result hardware cost paper propose novel trace signal interconnection fabric design tackle experimental results benchmark circuits efficacy proposed solution

post silicon processor debugging frequently carried loop consisting iterations following key steps processor execution duration followed ii dumping processor's internal external logic analyzer offline processing internal processor dominated l2 cache process dumping cache content processor's execution halted faithfully reproduced offline reduce duration processor halted indirectly reduce debug time propose online cache dumping strategies retransmit dumped line rnl dump history table dht objective transferring cache contents processor executing maintaining fidelity dumped data typical experimental debug scenarios observe effective dump times reduced 0.01 3.5 original times employ compression reduce cache content transfer time logic analyzer space experiments indicate average compression ratio 59.2

aggressive scaling ic technology results dimensional strongly nonlinear performance variability efficiently captured traditional modeling techniques paper adapt novel l1 norm regularization method address modeling challenge goal solve e.g 10 sup 4 sup 10 sup 6 sup model coefficients set e.g 10 sup 2 sup 10 sup 3 sup sampling fitting facilitated exploiting underlying sparsity model coefficients namely numerous basis functions span dimensional strongly nonlinear variation space play role performance efficient algorithm angle regression lar applied automatically select basis functions based limited simulation samples circuit examples designed commercial 65nm process demonstrate lar achieves 25x speedup compared traditional squares fitting

paper introduce method performing direct solution harmonic balance jacobian examples moderate harmonics moderate strong nonlinearities demonstrate direct solver superior performance moderate increase memory compared preconditioned iterative solvers solver especially suited fourier envelope analysis harmonics circuits nonlinear jacobian bypass additional speed examples harmonics moderate strong nonlinearities performance advantage maintained memory requirements increase propose efficient preconditioners based direct solution harmonic balance matrices provide user memory speed trade

paper demonstrates steady adjoint sensitivity analyses extended stochastic mixed signal systems based markov chain models examples systems include digital phase locked loops delta sigma data converters steady response statistical nature consisting ensemble waveforms probability distribution efficient markov chain analysis paper describes methods limit discretization scheme based gaussian decomposition exploration algorithm discovers recurrent truncation algorithm eliminates negligible stationary probabilities stochastic ac analysis performed deriving ordinary differential equation governing perturbations stationary probabilities solving via phasor analysis digital pll delta sigma adc examples reduced factor 35 frequency domain phase noise transfer functions simulated 57 22,000x speed compared using transient monte carlo simulations

exploits recently developed telescopic projective numerical integration method efficient parallel circuit simulation stable explicit numerical integration achieved adopting explicit inner integrator e.g forward euler multi level telescopic projective framework thereby addressing stability limitation explicit numerical integration methods approach effective time step entire multilevel integration limited time constant circuit safeguard stability controlled solely accuracy requirement makes explore natural parallelizability explicit integration method parallel circuit simulation demonstrate potential approach parallel implementation multi core machines encouraging initial results

statistical analysis considered tool nanoscale integrated circuit design ic designers design specific worst corners circuit debugging failure diagnosis paper propose novel algorithm efficiently extract worst corners nanoscale ics proposed approach mathematically formulates quadratically constrained quadratic programming qcqp corner extraction applies lagrange duality theory convert convex qcqp convex semi definite programming sdp easier solve circuit example designed commercial cmos process demonstrates proposed sdp formulation worst corners efficiently robustly traditional qcqp fails achieve global convergence

paper describes timing driven optimization technique synthesis multi level logic circuits motivated parallel prefix proposed timing driven optimization produces logic circuits lookahead properties due inherent parallelism synthesized sub circuits lookahead logic circuits synthesized using global critical path sensitization information decompose reduce boolean functions nodes technology independent representation logic circuit unlike prior timing driven optimization techniques synthesis decomposition functions potentially expensive proposed technique advantage decomposition functions discovered synthesized form average proposed technique reduces logic levels mapped delay 15 benchmark circuits 40 56 22 21 56 10 results sis abc industry standard synthesizer respectively

boolean matching check equivalence target functions input permutation input output phase assignment paper addresses permutation independent equivalent boolean matching propose matching algorithm seamlessly integrating simulation boolean satisfiability techniques proposed algorithm utilize functional properties unateness symmetry reduce searching space followed simulation phase types input vector generation checking method match inputs target functions experimental results benchmarking circuits demonstrate matching algorithm indeed effective efficient solve boolean matching boolean networks

unused spare cells occur inevitably traditional eco design flow results inefficient usage leakage ir drop impacts tackle reconfigurable cell proposed serves dual purposes decoupling capacitance spare cell paper engineering change eco applied cells pre placed decoupling capacitors eco applied cells configured functional cells demonstrate efficiency configurable cell propose algorithm timing closure ir drop minimization compared traditional eco flow method 16 reduction maximum ir drop 56 reduction leakage applying eco 8 reduction maximum ir drop applying eco 10 spare cells addition unsolved eco timing paths left applying eco timing optimization algorithm due free selection eco gate type

metal eco realizes minute design changes revising photomasks metal layers task challenging pre injected spare cells limited cell types paper proposes matching based eco synthesizer named ecos correctly implements incremental design changes using available spare cells tries reduce prohibitive photomask cost time experiments conducted five industrial testcases ecos photomask costs complete design changes direct method transforms widely hand editing procedure automatic

don't care conditions provide additional flexibility logic synthesis optimization focuses gate level difficult handle conditions accurately behavior register transfer levels problematic trend move level synthesis propose innovative methods handle conditions accurately level designs addition propose novel algorithms based methods minimize registers initialized architecture level reduce routing resources reset signals alleviate routing results identify 53 registers uninitialized 5 stage pipelined processor 5 minutes demonstrating effectiveness approach

statistical analysis fundamental method analysis design optimization systems uncertainties applied drug development analyzing financial markets search oil fields silicon process technology scales limits uncertainty plays increasing role tools yield analysis statistical time analysis educational panel start short tutorial monte carlo methods including eda experts distinct application fields follow discuss experience using monte carlo methods solving scale domain surprise attendees dac learn commonality methods eda field fetched

talk harnessing human brainpower solve computers computers advanced dramatically 50 possess basic conceptual intelligence perceptual capabilities humans granted leveraging human abilities novel solve scale computational collect data teach computers basic human talents treat human brains processors distributed system performing massive computation

using neuroanatomy neurophysiology set constraints believe started uncover brain hierarchy time create model world recognize novel patterns model hierarchically organized memory fundamentally linear memory current computers offers potential computer architectures exploring advancing technology using traditional computer architectures benefited multiple cpu cores emulate hierarchical structure neocortex exploiting hierarchical temporal structure neocortex build intelligent machines opportunities rethink integrated circuits systems play leading role

vlsi technology enters nanoscale regime interconnect delay bottleneck circuit timing powerful techniques interconnect optimization buffer insertion indispensable physical synthesis flow buffering np complete existing explore dynamic programming compute optimal solution worst exponential time design efficient heuristics performance guarantee buffer insertion studied physical design efficient algorithm provably performance remains unknown settles paper polynomial time approximation scheme timing driven minimum cost buffer insertion designed algorithm approximate optimal buffering solution factor 1 epsilon running sup 2 sup sup 2 sup epsilon sup 3 sup sup 3 sup sup 2 sup epsilon time 0 lt epsilon lt 1 candidate buffer locations sinks tree buffers buffer library addition theoretical guarantee experiments 1000 industrial nets demonstrate compared commonly dynamic programming algorithm algorithm approximates optimal solution 0.57 additional buffers 4.6x speedup demonstrates practical value algorithm

post silicon validation recently drawn designers attention due increasing impacts vlsi design cycle cost key feature post silicon validation spare cells literature existing focus developing delicate spare cell structures hand placement spare cells crucial impact design cycle cost post silicon debugging exists placement paper propose spare cell aware analytical placement framework predicts spare cell requirement considers spare cell insertion global placement propose multilevel spare cell insertion technique provides efficient spare cell planning control quality impact due spare cell insertion guide selection available spare cell positions insertion propose mixed integer linear programming formulation determine optimal spare cell positions experimental results algorithm averagely achieve 17 33 1.77 2.61x quality spare cell insertion existing spare cell insertion algorithms unispare 10 postspare 22 26 tested real designs 1 5 spare cell insertion rates

paper propose effective algorithm flow handle scale mixed size placement basic idea floorplanning guide placement objects global level flow consists steps 1 objects original netlist clustered blocks 2 floorplanning performed blocks 3 blocks shifted chip region optimize wirelength 4 macro locations fixed incremental placement applied remaining objects advantages handling placement global level floorplanning technique size significantly reduced exact hpwl minimized third precise object distribution achieved legalization handle minor overlaps objects block fourth rotation various placement constraints macros handled demonstrate effectiveness flow implement quality floorplan guided placer called flop construct modern mixed size mms placement benchmarks effectively represent complexities modern mixed size designs challenges faced modern mixed size placers compared art mixed size placers leading macro placers experimental results flop achieves wirelength easily obtains legal solutions circuits

structured asics recently emerged exciting alternative asic fpga design style provide trade performance asic design low recurring engineering nre costs fpga design utilize benefits structured asics key physical design stage placement aware modularity architecture propose novel solution placement structured asics particular propose creation intermediate virtual platform exploit regularity structured asic integer linear program network flow formulations satisfying constraints associated typical structured asic clock architectures preliminary version recently won structured asic placement contest easic 1 placer achieves 35 5 wirelength improvement placers design 1 million cells approximately 4 hours

post partitioning verification deal abstract data implementation artifacts events preserved duv due concurrency treatment golden model existing techniques limited greedy heuristics jeopardizing verification guarantees black box approaches impairing observability proposes novel white box technique overcomes limitations casting extended bipartite graph matching relying proven properties solid verification guarantees provided experimental validation performed platforms built contemporary real life applications

abstract modeling widely albeit independently formal verification level modeling soc designs paper proper selection modeling language abstraction level code useful formal simulation based techniques abstract model enables architecture exploration development verification collateral pre rtl behavioral checker simulation rtl hardware emulation parallel enables applying formal verification techniques verify specification implementation design provide examples successful application abstract models developed systemverilog course verification intel reg core trade microprocessor

novel technique sequential equivalence checking sec cycle accurate designs routinely encountered verifying correctness system level model versus rtl design derived former manually level synthesis existing art formal verification sec provide efficient mechanism perform equivalence check technique reduces sec cycle accurate equivalence checking constructing pair normalized cycle accurate designs original designs standard equivalence checking techniques deployed report results deploying techniques industrial examples

proving equivalence successive closely related versions program potential easier practice functional verification undecidable main reasons claim circumvents specifying program computationally easier study theoretical practical aspects call regression verification

multicore socs rely runtime thermal measurements using chip sensors dtm paper address estimating actual temperature chip thermal sensor sensor reading corrupted noise thermal sensors prone noise due fabrication randomness vdd fluctuations causes discrepancy actual temperature predicted thermal sensor experiments estimate variation 30 paper statistical methodology predicting actual temperature sensor reading techniques single sensor prediction multi sensor prediction latter tries estimate actual temperature sensor chip sensors simultaneously exploiting correlations temperature noise sensors underlying randomness follows gaussian characteristic optimal schemes estimating expected temperature heuristic schemes gaussian assumption fails hold experiments using estimation schemes rms error reduce 67 compared blindly trusting sensors noise free

elevated chip temperatures true limiters scalability computing systems excessive runtime thermal variations compromise performance reliability integrated circuits address thermal issues art chips integrated thermal sensors monitor temperatures selected die locations temperature measurements thermal management techniques appropriately manage chip performance thermal sensors support circuitry incur design overheads die manufacturing costs paper propose direction thermal characterization integrated circuits based spectral fourier analysis techniques application techniques temperature sensing based observation die temperature simply space varying signal space varying signals treated identically time varying signals signal analysis utilize nyquist shannon sampling theory devise methods reconstruct thermal status integrated circuit runtime using minimal thermal sensors propose methods handle uniform uniform thermal sensor placements develop extensive experimental setup demonstrate effectiveness methods thermally characterizing 16 core processor method produces thermal characterization average absolute error 0.6 using limited sensors

exponentially rising cooling packaging costs due power density call architectural software level thermal management dynamic thermal management dtm techniques continuously monitor chip processor temperature appropriate mechanisms e.g dynamic voltage frequency scaling dvfs clock gating fetch gating engaged lower temperature exceeds threshold mechanisms incur significant performance penalty argue runtime adaptation micro architectural parameters instruction window size issue width effective mechanism dtm architectural parameters tailored track available instruction level parallelism program temperature reduced minimal performance degradation moreover synergistically combining architectural adaptation dvfs fetch gating achieve performance thermal constraints key difficulty using multiple mechanisms select optimal configuration runtime time varying workloads novel software level thermal management framework searches configuration space regular intervals performing design thermally safe central components framework 1 neural network based classifier filters thermally unsafe configurations 2 fast performance prediction model configuration 3 efficient configuration space search algorithm experimental results indicate adaptive scheme achieves 59 reduction performance overhead compared dvfs 39 reduction overhead compared dvfs combined fetch gating

technologies temperature major issue considered system level design taking temperature aspects consideration approach energy performance optimization sufficiently accurate efficient paper propose line temperature aware dynamic voltage frequency scaling dvfs technique able exploit static dynamic slack approach implies offline temperature aware optimization step line voltage frequency settings based temperature sensor readings importantly approach aware frequency temperature dependency additional energy savings obtained

aggressive technology scaling sram design seriously challenged difficulties analyzing rare failure events paper propose create statistical performance models accuracy sufficient facilitate probability extraction sram parametric failures piecewise modeling technique proposed capture performance metrics variation space controlled sampling scheme nested monte carlo analysis method applied failure probability extraction cell level array level respectively 65nm sram example demonstrates combining piecewise model fast probability extraction methods significantly accelerated sram failure analysis

radiation harden technique based gate sizing multi objective genetic algorithm moga developed optimize soft error tolerance standard cell circuits soft error rate ser chip path delay selected optimization goals fast fitness evaluation algorithms goals developed embedded moga goals optimized simultaneously optimally sizing gates circuit complex np complete resolved moga exploring global design space circuit syntax analysis technique employed proposed framework optimize pure combinational logic circuit combinational sequential logic circuit optimizing experiments carried iscas 85 iscas 89 standard benchmark circuits proposed optimization algorithm decrease ser 74.25 limited delay overhead 0.28 furthermore algorithm reduce circuit test average 5.23 proposed technique proved delay overhead suitable direct design soft error tolerance integrated circuits reliability realms

elements increasingly vulnerable soft errors due decreasing size latched errors completely eliminated electrical timing masking prior methods reducing soft error rate ser involve combinational redesign tends add decrease testability latter concern due prevalence manufacturing defects explores fundamental relations ser sequential circuits testability scan mode appears improve retiming retiming methodology relocates registers 1 registers observable respect primary outputs thereby decreasing overall ser 2 combinational nodes observable respect registers respect primary outputs thereby increasing scan testability experimental results average decrease 42 ser latches average improvement 31 random pattern testability

circuit reliability affected various fabrication time run time effects fabrication induced process variation significant impact circuit performance reliability various aging effects negative bias temperature instability cause continuous performance reliability degradation circuit run time usage statistical analysis framework characterizes lifetime reliability nanometer scale integrated circuits jointly considering impact fabrication induced process variation run time aging effects specifically focuses characterizing circuit threshold voltage lifetime variation impact circuit timing due process variation negative bias temperature instability effect primary aging effect nanometer scale integrated circuits proposed capable characterizing overall circuit lifetime reliability efficiently quantifying vulnerabilities individual circuit elements analysis framework carefully validated integrated iterative design flow circuit lifetime reliability analysis optimization

past 20 eda developed solid digital implementation methodology combines restrictions design style set comprehensive tools leading predictable design flows recent increased analog components complex soc designs triggered set verification challenges ranging simple connectivity complex interferences analog digital data blocks panel discusses affairs analog mixed signal verification draws picture future directions terms approaches tools

availability multicore processors wide range computing platforms created strong demand software frameworks harness resources paper overviews cilk programming environment incorporates compiler runtime system race detection tool cilk runtime system guarantees load balance computations effectively cope legacy codes containing global variables cilk provides hyperobject library allows races nonlocal variables mitigated lock contention substantial code restructuring

previous humorous note entitled twelve fool masses outlined twelve common performance figures technical computer systems distorted paper accompanying conference talk reprise twelve methods actual examples appeared peer reviewed literature past propose guidelines reporting performance adoption raise level professionalism reduce level confusion world device simulation larger arena technical computing

paper identify aspects concurrent computing landscape changed 1980 changes impact efficacy parallel computing move single multi massive processing cores

reduce chip scale topography variation chemical mechanical polishing cmp process dummy fill widely improve layout density uniformity previous researches formulated dummy fill standard linear program lp solving huge linear program formed real life designs expensive hurdle deploying technology exist efficient heuristics performance guaranteed paper develop dummy fill algorithm efficient provably performance based polynomial time approximation scheme fleischer 4 covering lp furthermore based approximation algorithm propose greedy iterative algorithm achieve quality solutions efficiently previous monte carlo based heuristic methods experimental results demonstrate effectiveness efficiency algorithms

lithography process nodes shrink sub wavelength levels generating acceptable layout patterns challenging traditionally complex convolution based lithography simulations estimate variability methods slow infeasible scale chip analysis proposes solution using machine learning techniques identify layout prone variability novel target layout representation proposed support vector machine svm algorithms detect variability standard cells cells simulated chip layout

rapid thermal annealing rta radiation heating recently adopted nanoscale cmos fabrication achieve ultra shallow junction maximum dopant activation rate recent results report systematic shift threshold voltage vth increased vth variation due rta process 1 2 exact amount variations depends layout pattern density rta heating temperature effective annealing time develop joint thermal tcad simulation compact modeling tools analyze performance variability various layout pattern densities rta conditions simulation capability recognize major variation mechanisms rta change effective channel length leff induced lateral dopant diffusion fluctuation equivalent oxide thickness eot due incomplete dopant activation perform device simulations quantify transistor performance shift due leff eot variations moreover propose suite compact models bridge underlying rta process device parameter change efficient design optimization tools validated published silicon data 45nm 65nm nodes facilitate physical designers predict mitigate circuit performance variability due layout dependent rta process

logic simulation critical component design tool flow modern hardware development efforts widely level descriptions gate level ones validate aspects design particularly functional correctness despite development houses investing vast resources simulation task particularly gate level achieving performance demands required validate complex modern designs propose event driven logic simulator accelerated parallel purpose graphics processor gp gpu simulator leverages gate level event driven design exploit benefits low switching activity typical hardware designs developed novel algorithms circuit netlist partitioning optimized highly parallel gp gpu host moreover flow structured extract simulation performance target hardware platform found experimental prototype handle industrial scale designs comprised millions gates deliver 13x speedup average current commercial event driven simulators

boolean satisfiability sat solvers heavily hardware software verification tools checking satisfiability boolean formulas art sat solvers based davis putnam logemann loveland dpll algorithm require input formula conjunctive normal form cnf sat solver operates negation normal form nnf boolean formulas circuits nnf formula usually succinct cnf formula terms variables algorithm applies dpll algorithm graph based representations nnf formulas adapt idea watched literal scheme cnf sat solvers efficiently carry boolean constraint propagation bcp key task dpll algorithm evaluate solver collection boolean circuit benchmarks obtained formal verification solver outperforms top solvers sat 2007 competition sat race 2008 terms run time majority benchmarks

concretization model checking based abstraction refinement constraints input vectors pseudo randomly generated essential success procedure constraints primary inputs invisible variables discuss algorithms address types effectiveness experiments

core chip designs short multicast latency critical messages extensively level coherence synchronization protocols bottleneck parallel performance scaling paper spectrum hybrid nanophotonic electric chip network optimizes throughput latency spectrum's novel planar nanophotonic subnetwork broadcasts latency critical messages wavelength division multiplexed wdm dimensional waveguide spectrum's throughput optimized packet switching electrical subnetwork handles bandwidth traffic overall spectrum delivers ideal cmos compatible interconnection network core systems

dimensional integrated circuits 3d ics offer promising solution overcome chip communication bottleneck improve performance traditional dimensional 2d ics interconnects replaced shorter vertical silicon via tsv interconnects 3d ics enables faster power efficient inter core communication multiple silicon layers 3d ic technology challenges due power densities routing congestion due tsv pads distributed layer paper serialization vertical tsv interconnects 3d ics proposed address challenges serialization reduces interconnect tsv footprint layer lead thermal tsv distribution resulting lower peak temperatures efficient core layout multiple layers due reduced congestion experiments 3d multi core benchmarks indicate benefits serialization instance 4 1 serialization tsv interconnects save 70 tsv footprint negligible performance power overhead 65nm technology node

consistent trend towards cores soc 3d chip techniques paper proposes single cycle ring interconnection sc_ring ultra low latency minimal complexity proposed sc_ring allows multiple single cycle transactions parallel main features circuit switched design include set 3 ported circuit switched routers 4 16 performance timing effective arbiter arbiter called btpc features single cycle arbitration routing control means novel binary tree paths convergence path prediction mechanisms provide highly reduced time complexity combining integration 3d chips proposed ring based interconnection offers advantages hierarchical clustering future core systems terms cost latency power reductions moreover based proposed sc_ring realizes level 1 uniform cache architecture l1 nuca fast data communication cache coherency facilitating multithreading multi core study finally experimental results approach yields promising performance

thermal effect improper analog placements degrade circuit performance thermal impact power devices affect electrical characteristics thermally sensitive devices previous considers desired placement configuration power thermally sensitive devices thermal profile reduce thermally induced mismatches paper introduce properties desired thermal profile thermal matching matched devices propose thermal driven analog placement methodology achieve desired thermal profile consider device matching thermal profile satisfying symmetry common centroid constraints experimental results based real analog circuits approach achieve analog circuit performance accuracy impact due thermal gradient existing

paper proposes equation based multi scenario iterative robust optimization methodology analog mixed signal circuits due local circuit performance monotonicity random variations constraint maximization efficiently critical constraints worst scenarios random process variations populate multi scenario optimization algorithm scales gracefully circuit size tested stage differential folded cascode operational amplifiers 90 nm predictive model improving yield trends confirmed process random variations hspice monte carlo simulations

efficient system level design increasingly relying hierarchical design space exploration compositional methods shorten time market leverage design re achieve optimal performances analog electronic systems circuit behaviors tightly dependent interface conditions accurate system performance estimations based characterizations individual stand circuits hard task solution analog system integration traditionally ad hoc solutions heavily dependent designers experience paper build analog platform based design methodology exploiting contracts enforce correct construction system level composition contracts intuitively capture process designer aims guaranteeing circuit performance specific assumptions e.g loading dynamic range interface properties approach allows automatic detection composition compatible components library apply methodology ultra wide band receiver front contracts allow pre designed ip components smoothly integrated design decisions reliably abstraction level key factors improve designer productivity

unconventional clock distribution emphasizes flexibility layout independence suits variety applications clock domain shapes sizes using modular standard cell approach compensates intra die temperature process variances clock distribution provides control regional clock skew permits beneficial skew applications facilitates silicon debug adding routing serial clock network permit post silicon resizing reshaping clock domains defective sections clock network bypassed providing post silicon repair capability network

paper suggests thermal processor approximated using data flow analysis results analysis evaluate efficacy thermal aware compilation strategies input thermal aware optimizations occur stages compilation propose exploitation thermal behavior knowledge included compilation phases

study apply novel synthesis technique implementing robust digital computation nanoscale lattices random interconnects percolation theory random graphs exploit linearity occurs percolation produce boolean functionality error margins defined terms steepness linearity translate degree defect tolerance study mapping boolean functions onto lattices error margins

concept learning digital hardware proof concept circuit arbitrarily control current switching speed power consumption digital circuit control current directly tuned feedback digital circuit learning digital computer argument completely paradigm digital computing follows whereby entire system learning digital circuits proposed

date spike sorting neural processing brain computer interfaces performed using chip analysis custom asic designs paper propose test feasibility performing chip real time spike sorting commercially available programmable smartdust wireless sensor network mote platform currently closest implantable chip due size similar physical environmental constraints

electronic design automation field replete challenging intractable solved instances result field design automation developed staggering expertise approximations abstractions heuristics means step np hard nature approximations heuristics heart natural application human reasoning propose harness human potential solve specifically propose funsat massively multi player puzzle game sat solving funsat leverages visual pattern recognition skills abstract perception intuitive strategy skills humans solve complex sat instances players motivated puzzle solving challenges game social interaction aspects

paper proposes adapt sketching software synthesis technique hardware development sketching designer develops incomplete hardware description providing insight design synthesizer completes design match executable specification style synthesis liberates designer tedious error prone details timing delays wiring combinational circuits initialization lookup tables allowing control low level aspects design main benefit reduction time market impairing system performance

endosymbiotic computing entails attaching rf enabled micro controller module endomodule appliance appears networked device cyber world enables smart phone universal remote control surrogate gui inspecting attributes appliances modifications legacy circuits minimize cost resource requirements endomodules propose generalized active message programming method executes dynamically loaded threaded code demand requiring parsing

based hardware designs accepted means increase design productivity starting algorithmic design descriptions incremental refinements applied generate level synhesizable descriptions processed level logic synthesis tools based system level design descriptions specc systemc concise global views behaviors designs structures various types dependencies control data concurrency extracted quickly dependencies bases efficient effective debugging levels design descriptions paper graph representations various dependencies extracted based descriptions introduced techniques debugging various design levels discussed static dynamic tracing methods dependence analysis techniques try establish mapping implementations based design descriptions

semiconductor design companies continuous search design tools address increasing chip design complexity coupled strict time market schedules budgetary constraints fundamental aspect design process remains primitive debugging takes months close introduces costs jeopardize release date chip paper reviews debugging research past 20 automated rtl debug tools methodologies help ease manual burden complement current industrial verification practices

recent improvements design verification strive automate error detection greatly enhance engineers ability detect functional errors process diagnosing cause errors subsequently fixing remains difficult tasks verification complexity design descriptions paired scarcity software tools supporting task lead activity ad hoc labor intensive accessible debugging specialists design house paper discusses recent research solutions support debugging effort simplifying automating bug diagnosis novel techniques demonstrate support structured methodologies debugging task pursued average design engineer outline upcoming trends design verification postponing verification effort runtime discuss debugging leverage trends achieve quality results

adopting esl based design validation methodology introduce top approach efficient debugging microarchitectural specification rtl implementation solution based formalism introduced statistical transactional analysis call magenta lt gt lt gt odeling lt gt agent lt gt lt gt lt gt ransactional lt gt lt gt nalysis knowledge magenta based root cause analysis pioneers efficient characterization micro architectural design misbehavior via abstraction validation output transactions micro architectural events

assertions recognized industry major improvement functional rtl verification flows today's standard assertion languages sva 1 psl 2 expressive capable describing sophisticated temporal design behavior abstraction levels nevertheless assertion users stick writing simple assertions intricacy effort required debug complex assertions major bottlenecks assertion based verification debugging diagnosis techniques automatically identify assertion cause assertion fail design provide additional automation efficiently identify root cause failure techniques enable major effort savings complex assertions allowing engineers capabilities assertion languages enables productivity quality improvements functional verification lifting mainstream assertion usage abstraction levels efficient capture verification level design features operations transactions advanced debugging automation key progress solving designers verification engineers daily

advancements commercial formal model checkers enabled integration formal property verification conventional testbench based methods overall verification plan led significant verification productivity entire design flow architectural verification post silicon debugging verification productivity improved debugging efficiency paper discuss formal technology leveraged bring efficiency debugging process particular discuss behavioral indexing enables top view counter example facilitates debugging overlaying abstraction view bit level counter example discuss formal technology leveraged analysis localize root cause bug discuss formal technology supports challenging task traceless debugging process debugging absence witness counter example

emerging organic light emitting diode oled based displays obviate external lighting consume drastically power displaying colors due emissive nature creates pressing oled display power models system energy management optimization energy efficient gui design display content graphical user interface gui code comprehensive treatment power modeling oled displays providing models estimate power consumption based pixel image code respectively models feature various tradeoffs computation efficiency accuracy employed layers mobile system validate proposed models using commercial qvga oled module example statistical learning based image level model reduces computation 1600 times keeping error below 10 compared accurate pixel level model

flash memories portable embedded systems increasing multi level storage capability makes excellent candidates density memory devices cost writing programming flash memories magnitude traditional memories paper design algorithm reduce average write energy latency flash memories achieve reducing expensive 01 10 bit patterns error control coding algorithm change error correction capability moreover improves endurance simulations results representative bit stream traces proposed algorithm saves average 33 write energy 31 latency intel mlc nor flash memory improves endurance 24

paper propose pdram novel energy efficient main memory architecture based phase change random access memory pram dram paper explores challenges involved incorporating pram main memory hierarchy computing systems proposes low overhead hybrid hardware software solution managing experimental results indicate solution able achieve average energy savings 30 negligible overhead conventional memory architectures

voltage scalable process variation resilient memory architecture suitable mpeg 4 video processors power dissipation traded graceful degradation quality key innovation proposed hybrid memory array mixture conventional 6t 8t sram bit cells fundamental premise approach lies human visual system hvs sensitive bits luminance pixels video data implemented preferential storage policy luma bits stored robust 8t bit cells lower bits stored conventional 6t bit cells facilitates aggressive scaling supply voltage memory luma bits stored 8t bit cells remain relatively unaffected voltage scaling lower luma bits stored 6t bit cells affected contribute insignificantly overall degradation output video quality simulation results average power savings 56 hybrid memory array compared conventional 6t sram array implemented 65nm cmos overhead maximum output quality degradation psnr incurred 11.5 0.56 db respectively

hardware security applications availability secret keys critical component secure activation ic authentication applications including encryption communication channels ip protection fpgas vulnerabilities conventional keys derived digital data mitigated keys instead derived inherent statistical manufacturing variations ic robust silicon derived keys implemented using physically unclonable functions pufs puf consists specialized hardware circuit mechanism retrieve set responses variety challenges paper propose puf based measured equivalent resistance variations power distribution system pds ic effectiveness puf evaluated twenty ics fabricated 65 nm technology

paper proposes novel approach check authenticity hardware based inevitable performance gap real hardware simulations emulations impersonate specifically demonstrate processor design authenticated requiring checksum incorporating internals complex micro architectural mechanisms computed time limit checksum processor model authentic secure hardware obtain checksum fast authentication approach provides attractive solutions privacy scaling security issues traditional approaches otherwise rely certificates architectural simulations rtl implementation proposed approach viable low hardware overheads

hardware trojan horses hths malicious altering hardware specification implementation functionality altered set conditions defined attacker numerous hths sources including untrusted foundries synthesis tools libraries testing verification tools configuration scripts hth attacks greatly comprise security privacy hardware users directly interaction pertinent systems application software data huge research development effort detecting software trojan horses surprisingly hths rarely addressed hth detection particularly difficult task modern pending deep submicron technologies due intrinsic manufacturing variability goal provide impetus hth research creating generic easily applicable set techniques tools hth detection start introducing technique recovery characteristics gates terms leakage current switching power delay utilizes linear programming solve system equations created using destructive measurements power delays technique combined constraint manipulation techniques detect embedded hths effectiveness approach demonstrated standard benchmarks

die variation leakage power consumption substantial increasing chip level multiprocessors cmps multiprocessor systems chip dealing via conservative assumptions sub optimal instead operating systems adapt task assignment power management decisions variable characteristics cores improving system wide power consumption performance researchers proposed adaptation techniques rely knowledge cmp process variation pv maps maps provided processor vendors providing impose additional cost testing process static maps permit adaptation aging effects progress developing validating pv aware control techniques cmps requires access pv maps real processors online technique extract pv maps cmps potentially automatic temperature measurements built die sensors execution characterization workloads determine variation leakage power consumption proposed technique applied real cmps resulting pv maps pv aware task assignment scheduling algorithm

computing system trusted equally verify system performs functionalities desired traditional testing verification methods developed validate system meets requirements detect existence existence unknown undesired functionalities paper propose novel approach converts challenging design quality measuring approach based information hiding constraint manipulation original system design specification lay basic requirements approach demonstrate popular graph coloring results information embedded original graph significant impact solution quality information added graph modified based approach noticeable drop solution quality

discrepancy integrated circuits activities normal functional mode structural test mode increasing adverse impact effectiveness manufacturing test pseudo functional testing tries resolve identifying illegal functional mode avoiding test pattern generation process existing methods extract set illegal system due various limitations paper illegal system mainly caused multi fanout nets circuit develop efficient effective heuristics identify experimental results benchmark circuits demonstrate effectiveness proposed systematic solution

integrated circuit ic diagnosis typically analyzes failed chips reasoning responses test patterns deduce gone wrong current trends diagnosis step extracting valuable information population failing ics include example design feature failure rates defect occurrence statistics difficult examine accuracy techniques unavailability sufficient fail data information paper describes approach benchmarking verifying diagnosis techniques failure population creation builds prior specifically describe population realistic ic failures created circuit level simulation extracted layouts novel feature virtual test responses produced precise function defect type dimensional location layout extended approach demonstrated using twelve placed routed circuits example application developed framework illustrate utility failure population location type defect priori

paper compare embedded dram edram testing sram testing commodity dram testing edram macro dram cells sram interface start standard sram test algorithm discuss faults covered sram testing considered dram testing study behavior faults tests detect discuss modeled fault occur edrams commodity drams respectively

paper propose adaptive test strategy tailors test sequence respect properties individual instance circuit reducing test set analyzing dropout patterns characterization eliminating unnecessary tests approach volume production analog domain determined test set remains typically fixed devices propose exploit statistical diversity manufactured devices adaptively eliminate tests determined unnecessary based information obtained circuit test compare results similar specification based test reduction techniques lna circuit observe 90 test quality improvement test time 24 test time reduction test quality

current compilers lack precise timing models guiding built optimizations hence compilers apply ad hoc heuristics optimization improve code quality optimizations register allocation compilers heuristically decide spill register memory understanding impact spill code program's run time paper extends graph coloring register allocator precise worst execution time wcet models using wcet timing data compiler tries avoid spill code generation critical path defining program's wcet knowledge paper wcet aware register allocator results underline effectiveness proposed techniques total 46 realistic benchmarks reduced wcets 31.2 average additionally runtimes wcet aware register allocator remain acceptable

caches notorious unpredictability difficult impossible predict memory access result definite cache hit miss unpredictability highly undesired especially designing real time systems worst execution time wcet key metrics scratchpad memories spms proven predictable alternative caches contrast caches spms require dedicated compiler support paper optimal static spm allocation algorithm program code minimizes wcets placing beneficial program's code spm results underline effectiveness proposed techniques total 73 realistic benchmarks reduced wcets average 7.4 40 additionally run times ilp based spm allocator negligible

paper introduces unobtrusive cost effective method capture compression program execution traces real time based double move front transformation explore effectiveness describe cost effective hardware implementation proposed trace compressor requires 0.12 bits instruction trace port bandwidth cost 25k gates

dynamic binary translation dbt address issues embedded systems dbt systems store translated code software managed code cache unlike purpose systems embedded systems specialized memory resources fast scratchpad memory mitigate dbt performance overhead paper heterogeneous code cache hcc code cache split scratchpad main memory explore hcc management policies average hcc outperforms code cache allocated scratchpad main memory

panel discusses power optimization system level opportunities examples successful practices system level power optimizations automated power optimizations enabling event methodology change system level design

art integral equation based solvers rely techniques perform matrix vector multiplication complexity fast inverse linear complexity developed solve dense system linear equations directly capacitance extraction arbitrary shaped 3d structure proposed direct solver demonstrated advantages art solvers fastcap hicap fast cpu time modest memory consumption sacrificing accuracy successfully inverts dense matrix involves million unknowns associated scale chip 3d interconnect embedded inhomogeneous materials moreover successfully applied proposed solver wave extraction

paper continuous surface model describe interconnect geometric variation improves currently model accuracy increasing variables based efficient techniques chip level capacitance extraction considering window technique sparse grid based hermite polynomial chaos combined novel weighted principle factor analysis employed intra window extraction inter window capacitance covariance calculated matrix pseudo inverse numerical results validate accuracy efficiency proposed method 50 times faster monte carlo simulation 10000 samples

unknown include stochastic process variation fast multipole method fmm chip capacitance extraction paper parallel fmm extraction using stochastic polynomial expanded geometrical moments utilizes multi processors evaluate parallel stochastic potential interaction matrix vector product mvp charge moreover generalized minimal residual gmres method deflation modified incrementally consider nominal value variance overall extraction flow called picap experiments parallel mvp picap 3x faster serial mvp incremental gmres picap 15x faster incremental gmres methods

due technology scaling integrated circuit manufacturing techniques producing structures variabilities dimensions guarantee yield manufactured structures proper electrical characteristics despite geometrical variations designer means extracting electrical characteristics family structure realizations guarantee satisfy required electrical characteristics sensitivity extraction provides efficient algorithm extract realizations concurrently paper complete framework efficient resistance sensitivity extraction framework based finite element method fem resistance extraction adjoint method sensitivity analysis fem enables calculation resistances interconnects arbitrary shapes adjoint method enables sensitivity calculation computational complexity independent varying parameters accuracy efficiency algorithm demonstrated variety complex examples

temperature gradients thermal hotspots affect reliability microprocessors temperature constraint maximizing performance processors dvfs dfs extract performance temperature power constrained single core processors potential multi core performance exploited thread migration task core allocation schemes paper formulate throughput optimal task allocation thermally constrained multi core processors novel solution includes optimal speed throttling algorithms implementable real time implemented operating system's dynamic scheduling policy method result significant improvement throughput existing methods 5x naive scheme

paper propose adaptive scheduling voltage frequency selection algorithm targets energy harvesting systems proposed algorithm adjusts processor operating frequency timing energy constraints based workload information system wide energy efficiency achieved approach decouple timing energy constraints simplify original scheduling separating constraints timing energy domains proposed algorithm utilizes maximum task slack energy saving experimental results proposed method improves system performance remaining energy deadline miss rate minimum storage capacity requirement zero deadline miss rate comparing existing algorithms algorithm decreases deadline miss rate 23 minimum storage capacity 20 various processor utilizations

power constrained designs becoming increasingly sensitive supply voltage noise propose hardware software collaborative approach enable aggressive operating margins checkpoint recovery mechanism corrects margin violations run time software layer reschedules program's instruction stream prevent recurring margin crossings program location run time layer removes 60 events minimal overhead thereby significantly improving overall performance

addresses minimizing power ground noise clock tree synthesis contrary previous approaches assigning polarities clock buffers reduce power ground noise approach solves simultaneous consideration assigning polarities clock buffers determining buffer sizes exploit effects buffer sizing polarity assignment minimization power ground noise satisfying clock skew constraint experiments mcnc benchmark circuits shown proposed solution produces designs 19.1 power 16.2 ground noise 15.6 total peak current conventional method

paper noc networks chip router sdram aware flow control based priority based arbitration schedules packets improve memory utilization reduce memory latency moreover multi scheduling scheme performed multiple sdram aware routers helps achieve sdram performance save hardware cost noc platform experimental results sdram aware router improves memory latency 18 memory utilization 4.9 average 42 saving gate count noc platform dual memory subsystem

memory access latency memory related operations performance bottleneck parallel applications paper concept active memory operations chip network transaction operates based microcode provided software designer utilizing active memory operation replace multiple transactions memory accesses chip network related local processing element computation level transactions near memory computation implemented processor called active memory processor located near memory executes active memory operations studies applied concept real world applications parallelized jpeg fft text indexing data mining running 36 tile architecture 32 cores 4 memories found programmable transaction approach improve performance 34.3 618 cost additional design effort

process scaling designers billions transistors feature sizes near atomic scale extensive variation wearout inevitably margining uneconomical impossible elastic project seeks address creating scale chip multiprocessor self diagnose adapt heal creating flexible designs environment naturally lends repetitive nature network chip noc loss single link router result complete network failure vicis elastic style noc tolerate loss network components due wearout induced hard faults vicis inherent redundancy network routers maintain correct operation incurring lower overhead previously proposed modular redundancy nmr based solutions router built self test bist diagnoses locations hard fault runs algorithms ecc port swapping crossbar bypass bus mitigate routers run distributed algorithms solve network wide protecting networking critical failures individual routers stuck fault rates 1 2000 gates vicis continue operate approximately half routers functional communicating

paper consider network chip noc based multiple processor systems chip mpsocs implemented using multiple voltage frequency islands vfis rely fine grained dynamic voltage frequency scaling dvfs run time control system power dissipation specifically framework compute theoretical bounds performance dvfs controllers systems impact technology driven constraints reliability temperature driven upper limits maximum supply voltage ii inductive noise driven constraints maximum rate change voltage frequency iii increasing manufacturing process variations experimental results benchmarks considered dvfs control algorithm lose 87 performance measured terms steps required reach reference steady presence maximum frequency maximum frequency increment constraints addition increasing process variations lead 60 fabricated chips unable meet specified dvfs control specifications irrespective dvfs algorithm

systems chips socs cores clustered voltage islands cores island unused entire island shutdown reduce leakage power consumption interconnect architecture bottleneck allowing shutdown islands paper synthesis approach obtain customized application specific networks chips nocs support shutdown voltage islands results realistic soc benchmarks resulting noc designs negligible overhead soc active power consumption average 3 average 0.5 support shutdown islands shutdown support provided lead significant leakage hence total power savings

coarse grained reconfigurable architecture cgra based embedded system aims achieving system performance sufficient flexibility map variety applications significant power consumption arrays prohibits competitive advantage processing core propose hierarchical reconfigurable computing array architecture reduce power enhance performance configurable embedded system cgra based embedded systems consist hierarchical configurable computing arrays varying size communication speed examined multimedia applications experimental results proposed approach reduces chip 22 execution time 72 reduces power consumption 55 compared conventional cgra based architectures

computational complexity primary challenge vlsi cad applications emerging multicore core microprocessors potential offer scalable performance improvement explore multicore resources speed cad applications natural question huge challenge cad researchers indeed decades purpose compilation approaches automatically extracts parallelism sequential program shown limited success past shown programming model algorithm design methods influence usable parallelism paper propose methodology explore concurrency via nondeterministic transactional algorithm design program multicore processors cad applications apply proposed methodology min cost flow identified key design optimizations wire length optimization detailed placement timing constrained voltage assignment concurrent algorithm implementation multicore processors min cost flow developed based methodology experiments voltage island generation floorplanning demonstrated efficiency scalable speedup cores

glitches i.e spurious signal transitions major sources dynamic power consumption modern fpgas paper fpga targeted glitch aware level binding algorithm power reduction accomplished via dynamic power estimation multiplexer balancing binding algorithm employs glitch aware dynamic power estimation technique derived fpga technology mapper 6 level binding results converted vhdl synthesized altera's quartus ii software targeting cyclone ii fpga architecture power characteristics evaluated altera power play power analyzer binding results algorithm compared lopass art low power level synthesis algorithm fpgas experimental results algorithm average reduces toggle rate 22 9 resulting decrease dynamic power consumption 19 knowledge level binding algorithm targeting fp gas considers glitch power

design communication systems increasingly challenging product complexity cost pressures increase time market shortened paper bit error rate tester bert hardware based verification physical layer phy layer emerging wireless systems integrate fundamental modules typical phy layer channel simulator onto single field programmable gate array fpga proof concept results fpga based performance verification exercise multiple antenna system proposed bert system significantly decreases test time compared conventional software based verification hence increasing designer productivity

field programmable gates arrays fpgas increasingly purpose computing platforms augment microprocessors enabling runtime loading coprocessors customized speed applications transmuting coprocessors create dynamic management involving decisions load coprocessor coprocessor fpga resident coprocessor replace define transmuting coprocessor based intel's fsb fpga architecture attention communication memory contention develop online algorithm manage coprocessor loading ag algorithm aggregated gains guide coprocessor load placement replacement wait decisions experiments using embedded system applications random biased periodic input application sequences range reconfiguration times fpga types partial reconfigurable regions demonstrate ag algorithm robust variety situations ag algorithm results 15 unlimited size fpga average exhibit standard deviation 1.4x speedup versus static coprocessor loading approach 3x speedup execution microprocessor solution

thread mapping data mapping context noc network chip based cmps chip multiprocessors compiler determine suitable mappings data threads static mappings multithreaded applications execution phases execution phase potentially data access patterns instead dynamic mapping strategy overheads kept low promising option dynamic runtime thread data mappings noc based cmps goal mappings reduce distance location core requests data core local memory contains requested data experiments evaluate proposed thread mapping data mapping isolation integrated manner

cost major driving force development flash memory technology introduced serious challenges reliability performance future products propose commitment based management strategy resolve reliability flash memory products level address translation architecture adaptive block mapping mechanism proposed accelerate address translation process limited amount ram usage parallelism operations multiple chips explored considerations write constraints multi level cell flash memory chips

runtime embedded control system switch alternative functional modes mode system operates using schedule controllers exploit available computation communication resources optimize control performance running mode modes usually exponential control loops means controllers schedules produced affordable design time stored memory paper addresses synthesis multi mode embedded control systems contribution method trades control quality optimization time efficiently selects schedules controllers synthesized stored memory

traditionally synchronous languages esterel compiled hardware timing analysis relatively easy compiled software e.g sequential code conservative estimation techniques focus obtaining safe timing estimates cost implementation acceptable avionics efficient implementations hence tight timing estimates cost sensitive application domains lately advances worst execution time wcet analysis techniques coupled growing software domains automotives led considerable timing analysis code generated esterel specifications paper propose techniques obtain tight estimates processing time input events sequential code generated esterel programs execution esterel program synchronous languages logically sequence clock ticks reality zero time depends generated code underlying hardware platform code executed apart exploiting specific structure code obtain tight wcet estimates capture program level contexts ticks obtain tight estimates response times events processing spans multiple clock ticks tighter estimates immediately translate cost effective implementations experimental results realistic studies 30 reduction timing estimates program level context information account

flexray communication protocol automotive systems providing support transmission periodic messages static segments priority based scheduling event triggered messages dynamic segments design flexray schedule easy task protocol constraints demands extensibility flexibility study flexray bus scheduling perspective application designer optimizing performance application related timing metrics extensibility provide solutions task scheduling policies existing industry standards based mixed integer linear programming milp framework

embedded sw design compared lawless wild west methodology standard multi core platform modeling environment company improvise own solution facing embedded software users becoming complex bull hardware platforms complicated heterogeneous processors complicated memory structure interconnect bull multiple platform configurations platform migrations drive explosion version developed maintained ported bull processors becoming complicated hard program bull semiconductor vendors justify investment required provide complete hardware abstraction layer hal rtos bull hard embedded software development environment platform model hal development tools bull speed required efficient software development panel composed experts solution domains discuss current potential solutions

paper describe internet box datacenter network emulator fpga based tool researchers rapidly experiment 10,000 node datacenter network architectures basic approach emulation involves constructing model target architecture composing simplified hardware models key datacenter building blocks including switches routers links servers models system implemented programmable hardware designers control emulated buffer sizes line rates topologies network properties system control researchers significant degree system visibility additionally node model emulates servers using sparc v8 isa compatible processor node network capable running real applications allows researchers study network complex real world workloads scale matches datacenter moreover system private testbed experiments deterministic reproduced researchers lastly system cost effective designers using fpga technology market actually emulate network 256 nodes 2,000

environmental impact data centers significant growing rapidly servers consumed 1.2 nation's energy 2005 according epa following epa found cost energy rose 10 opportunities efficiency integrated design management data center components propose sustainable data center replaces conventional resource delivery models framework centered supply demand management data center resources including power cooling identified five elements achieving vision data center scale lifecycle design flexible configurable building blocks pervasive cross layer sensing knowledge discovery visualization autonomous control describe principles provide selected results quantify potential savings

today's computing environment changing growing emphasis reducing operational energy costs capital costs reliably deliver power cooling systems factory sized data centers greening data centers challenging microprocessor system designs including server storage network designs deliver performance strict power cooling constraints paper outlines challenges research approaches holistic solutions energy efficient data centers starting microprocessor system design extending broader environment

paper addresses frequently overlooked designing memory architecture ldpc decoder analyze requirements support codes defined ieee 802.11n 802.16e standards design methodology flexible memory subsystem reconciles design cost energy consumption required latency multistandard platform results exploring design space cmos technology 65nm analyze various standardized codes comparisons representative reveal benefits exploration

energy consumption significant concern battery operated embedded systems processors systems instruction cache consumes significant fraction total energy popular methods reduce energy consumption shut idle cache banks observe operating idle cache banks reduced voltage frequency level active banks pipelined manner potentially achieve energy savings paper propose novel dvs based pipelined reconfigurable instruction memory hierarchy called prim canonical example proposed prim consists cache banks cache banks configured runtime operate lower voltage frequency levels normal cache instruction fetch throughput maintained pipelining accesses low voltage banks developed profile driven compilation framework analyzes applications inserts appropriate cache reconfiguration experimental results prim significant reduce energy consumption popular embedded benchmarks minimal performance overhead obtained 56.6 45.1 energy savings aggressive conservative vdd settings respectively expense 1.66 performance overhead

compressing program code compiled vliw processors reduce amount memory means decrease costs main disadvantage code compression technique system performance penalty extra time required decode compressed instructions run time paper improve performance decoding compressed instructions using novel compression technique lict left uncompressed instruction technique conjunction compression algorithm furthermore adapt code compression approach called burrows wheeler bw 9 data compression significantly reduces code size compared art approaches vliw processors using lict conjunction bw algorithm improves performance explicitly 2.5x little impact compression ratio 3 compression ratio loss

nand flash memory building permanent storage increasing embedded systems due properties volatility low energy consumption persistent requirements storage capacity rise increase bit density cell multi level cells expense performance resulted degradation durability paper introduce complementary approach boost performance durability mlc based storage systems employing volatile buffer temporarily holds data heading mlcs propose algorithms efficiently eliminate unnecessary write erase operations mlcs performing pre merge buffer experiments proposed approach increase performance 4 times durability 4 times adding hardware cost

synchronous dataflow sdf model computation popular modelling timing behaviour real time embedded hardware software systems applications essential ingredient automated design flows design space exploration tools model analysed throughput latency properties sdf model fairly simple analysis algorithms complexity models analysed fairly paper introduces graph transformations reducing sdf graphs simpler ones analysed efficiently conservative tight estimation timing original model hence hard real time system sdf based methods efficient prove analyses manually ad hoc fashion past automatically guaranteed correctness additionally introduce novel conversion sdf homogeneous sdf step applied analysis methods sdf yields 250x improvement actors mitigating size explosion observed traditional conversion

modern embedded systems typically contain chip multiprocessors cmps support variety applications applications run concurrently started stopped time application typically multiple feasible configurations trading quality aspects energy consumption audio visual quality resource usage various types resources overall system quality guaranteed optimized times leads run time management solution selects appropriate system configuration application configurations active applications run time management phrased multi dimensional multiple choice knapsack mmkp compositional heuristic solve mmkp due compositionality suited cmp run time management existing heuristics compositional heuristic outperforms heuristic date heuristic parameterized leading additional advantage allows trade execution time vs solution quality bound time compute solution latter makes particularly suited resource constrained embedded platforms

dataflow concepts provided designers digital signal processing systems environments capable expressing level software architectures low level performance oriented kernels apply proven techniques complex dynamic applications identify repetitive sequences atomic repeatable actions modes inside dynamic actors expose static nature application propose mode strategy aids decomposition dynamic dataflow graph set static dataflow graphs interact dynamically mode enables discovery larger static subgraphs improving scheduling results modes results improved schedules lower memory requirements implementations 37 including common imaging benchmark dynamic behavior 3d spline interpolation

heterogeneous multicore processors promise execution efficiency diverse workloads program scheduling critical exploiting efficiency paper novel method leverage inherent characteristics program scheduling decisions heterogeneous multicore processors proposed method projects core's configuration program's resource demand unified multi dimensional space weighted euclidean distance guide program scheduling experimental results average distance based scheduling heuristic achieves 24.5 reduction energy delay product 6.1 reduction energy 9.1 improvement throughput compared traditional hardware oblivious scheduling algorithm

datapath designs perform polynomial computations z2 sup sup applications computer graphics digital signal processing domains market applications continues grow improvements level synthesis optimization techniques multivariate polynomials challenging paper efficient algorithm optimizing implementation multivariate polynomial z2 sup sup terms multipliers adders approach makes promising heuristics extract complex common sub expressions polynomial compared conventional methods proposed algorithm utilizes canonical decision diagram horner expansion diagram hed 1 reduce polynomial's degree z2 sup sup experimental results shown average saving 27 10 terms logic gates critical path delay respectively compared existing level synthesis tools art algebraic approaches

reducing power consumption memory elements influential minimizing total power consumption designs tend memories days paper address level synthesis objective minimizing power consumption storage using dual vdd specifically propose complete design framework starts dual vdd scheduling dual vdd allocation controller synthesis final layout main feature dual vdd register allocation exploits timing slacks left data path operation scheduling experiments benchmark designs implemented 1.08 vddl 0.8 65 nm cmos technology switching leakage power reduced 20 average respectively compared data path dual vdd applied functional units detailed analysis slack histogram wirelength congestion performed assess feasibility design framework

progress gpu graphics processing unit technology avenue boosting computing power attempt exploit gpu accelerating vlsi circuit optimization propose gpu based parallel computing techniques apply simultaneous gate sizing threshold voltage assignment employed practice performance power optimization techniques aimed utilize benefits gpu efficient task scheduling memory organization compared conventional sequential computation techniques provide 56x speedup sacrifice solution quality

investigates interrelation performance robustness variability industrial microprocessor designs novel analysis technique variation sensitive hardware figures merit quantify robustness design variations proposed multi stage sta enables efficient application low vt cell insertion pulsed latch design compensate die delay variations speed margin 5 design level pulsed latch design arm926 microprocessor 2.5x robustness compared ms ff design selective low vt cell insertion

paper describes automatic methodology optimizing sample selection using framework model reduction mor procedure based maximization dimension subspace spanned samples iteratively selects samples efficient automatic fashion computing vectors prior assumptions system behavior scheme valid single multiple dimensions applicability rational nominal mor approaches multi dimensional sampling based parametric mor methodologies paper integrated algorithm multi mor automatic sample selection based transfer function error estimation results variety industrial examples demonstrate accuracy robustness technique

efficient passivity test based matrix chain canonical projector techniques proposed descriptor systems dss commonly encountered vlsi modeling test entails natural flow evaluates index ds followed decoupling proper improper subsystems compared recent ds passivity tests using linear matrix inequality lmi based extended positive real lemma skew hamiltonian hamiltonian shh transformations numerical examples proposed projector approach significantly efficient explicit space formulations decoupled subsystems facilitate processing passivity enforcement model reduction derived

formulate mask modeling parametric model reduction based finite element discretization helmholtz equation using parametric mesh machine learning technique called kernel method convert nonlinearly parameterized fem matrices affine forms allows application understood parametric reduction technique generate compact mask model model based principle naturally includes diffraction couplings effects poorly handled existing heuristic mask models mask model offers capability smooth trade accuracy speed

overall economy semiconductor industry emerges worst recessions time stock eda challenges future panel focus challenges surge dominate eda course challenges sell short

challenges post silicon validation continuously increasing driven levels integration increased circuit complexity platform performance requirements pressure maintaining aggressive launch schedules containing increased cost validation debug require holistic approach entire design validation process post silicon validation diverse starts silicon available example emulation design validation dfv features specialized content development require enhancing pre tape validation healthier silicon developing standard interfaces validation hooks developing predictive tools circuit platform simulation post silicon debug adding formal coverage methods improving survivability mitigate field issues view electronic design automation eda industry key enabler help bridge gaps presilicon post silicon validation extend considerable intellectual wealth pre silicon tools post silicon validation

ensure intellectual property ip block validated ahead unknown system chip soc context holistic view integration process focus challenges faced integrating manufacturing advanced low power processor based soc systems dramatically increased complexity space logical electrical validation describe process ip providers tool vendors foundry supply chain enable time logical electrical manufacturing closure discuss feedback improve component ip validation strategies interoperability integration testing cover techniques role hardware software emulation configuration testing application formal techniques advanced electrical rules checking addition examine role waivers automated design guidelines enable integrator balance risk reduction design turnaround time finally discuss manufacturing tests link improve metrics component integration level testing

post silicon validation detect fix bugs integrated circuits systems manufacture due sheer design complexity nearly impossible detect fix bugs manufacture post silicon validation major challenge future systems viewed art systematic solutions result post silicon validation emerging research topic exciting opportunities major innovations electronic design automation paper provide overview post silicon validation differs traditional pre silicon verification manufacturing testing discuss major post silicon validation challenges recent advances

term evolution lte emerging technologies 4th generation mobile wireless networks lte physical layer development electronic system level esl tools widely assist design verification processes various modeling technologies underlying esl tools synchronous dataflow sdf related models computation successfully model simulate wireless standards lte physical layer involves dynamically varying data processing rates sdf insufficient due constant rate constraint paper novel approach called mixed mode vector based dataflow mvdf efficiently model simulate lte physical layer exploring matched rate nature lte combining static dynamic dataflow technologies implemented mvdf esl tool called systemvue complete lte physical layer library implementation able create lte reference designs performance measurements simulation results successfully match standard requirements justify capability mvdf

performance provided multi processor system chips mpsocs induces designers choose customized processors execute specific functions using dedicated hardware hand reuse pre designed pre verified ip cores key strategy meet time market time reducing error risk development mpsoc designs context convenient translate existent rtl ip description originally dedicated implement hw component pure sw code i.e executed processors mpsoc proposes methodology automatically generate sw code abstracting rtl ip models implemented hardware description language hdl methodology exploits abstraction algorithm eliminate implementation details typical hw descriptions improve performance generated code

field programmable gate arrays fpgas recently platforms emulate systemc descriptions emulation supports system testing using real input output previously emulation speed competitive systemc simulations pc emulator acceleration engines limit acceleration engines fit emulation platform creates online involving runtime decisions load systemc process acceleration engine define online systemc emulation acceleration contrast previous focus statically improving systemc event driven simulations utilize online heuristics manage limited systemc acceleration engines emulation framework kernel adapt react dynamically changing process event queues test online heuristics 9x improvement microprocessor emulation 5x statically preloaded acceleration engines improve emulation performance 10 20 adding kernel bypass connections acceleration engines adapting online heuristics connections

current packet processing systems aim producing throughput considering packet latency reduction real time embedded network applications essential processing time exceed threshold paper propose lata latency throughput aware packet processing system multicore architectures based parallel pipeline core topology lata satisfy latency constraint produce throughput exploiting fine grained task level parallelism implement lata intel machine quad core xeon e5335 processors compare systems parallel greedy random bipar six network applications lata exhibits average 36.5 reduction latency maximum 62.2 reduction latency url random comparable throughput performance

considers minimizing power consumption real time scheduling processors discrete operating modes provide model determining expected energy demand based statistical execution profiles considers current subsequent tasks load execution current task expected slack time conserved subsequent tasks able derive optimal solution energy minimization remaining propose heuristic approach achieves low run time overhead contrast previous scheduling approach restricted single task scenarios frame based real time systems pre computed schedules simulations comparisons energy efficient schedulers literature demonstrate efficiency approach

synchronous languages esterel gained wide popularity domains avionics platform specific timing analysis code generated esterel specifications neglected growing volume electronics software domains automotive calls formal specification based code generation replace manually written optimized code cost sensitive domains require tight estimation timing properties generated code towards goal propose scheme generating code esterel specifications multiprocessor platform followed timing analysis generated code due dependencies program fragments mapped onto processors traditional worst execution time wcet analysis techniques sequential programs applied setting proposed timing analysis technique tailored capture inter processor code dependencies main novelty stems detect remove infeasible paths arising multiprocessor implementation timing analysis apply timing analysis standard esterel benchmarks performing proposed inter processor infeasible path elimination lead 14.3 tighter estimation wcrt thereby leading resource dimensioning poor design

breadth search bfs wide applications electronic design automation eda fields researchers tried accelerate bfs gpu published asymptotically slower fastest cpu implementation paper gpu implementation bfs hierarchical queue management technique layer kernel arrangement strategy guarantees computational complexity fastest sequential version achieve 10 times speedup

increased power densities multi core processors variations workloads lead runtime thermal hot spots locations change time space thermal hot spots increase leakage deteriorate timing reduce mean time failure manage runtime thermal variations circuit designers embed die thermal sensors acquire temperatures selected locations acquired temperatures guide runtime thermal management techniques capabilities techniques essentially bounded spatial thermal resolution sensor measurements paper characterize temperature signals real processors demonstrate chip thermal gradients lead sparse signals frequency domain exploit observation 1 devise thermal sensor allocation techniques 2 devise signal reconstruction techniques characterize thermal status processor using limited measurements thermal sensors verify accuracy methods compare temperature characterization results thermal measurements acquired art infrared camera captures mid band infrared emissions die 45 nm dual core processor results techniques capable accurately characterizing temperatures real processors

elevated temperatures impact performance power consumption reliability processors rely integrated thermal sensors measure runtime thermal behavior thermal measurements typically inputs dynamic thermal management system controls operating parameters processor cooling system ability predict future thermal behavior allows thermal management system optimize processor's operation prevent set temperatures paper propose thermal prediction method leads consistent results thermal models prediction observed thermal sensor measurements capable accurately predicting temperature behavior heterogenous workload assignment multicore platform devise line analysis algorithm learns set thermal models function operating frequency globally defined workload phases incorporate thermal models dynamic voltage frequency scaling dvfs technique limits maximum temperature runtime demonstrate effectiveness proposed system predicting thermal behavior real quad core processor response workloads comparison reactive thermal management technique predictive method dramatically reduces thermal violations magnitude thermal cycles workload runtimes

dtm schemes rely heavily accurate knowledge chip's dynamic thermal optimal performance temperature trade decisions information typically generated using combination thermal sensor inputs various estimation schemes kalman filter basic assumption schemes statistical characteristics power consumption change problematic characteristics heavily application dependent paper autonomous schemes detecting change statistical characteristics power propose adaptive schemes capturing statistical parameters dynamically enable accurate temperature estimation runtime dynamically changing power statistical schemes combination hypothesis testing residual whitening methods improve accuracy 67 compared traditional adaptive schemes

clock meshes extremely effective filtering clock skew environmental process variations reason clock meshes performance designs robustness costs power mesh edge displacement algorithm able reduce mesh wire length 7.6 overall power 10.5 mean skew improvement greedy buffer placement sizing technique using linear programming lp iterative buffer removal compared prior methods obtain 41 power reduction 27ps mean skew reduction average variation considered compared prior algorithms

performance synchronous chip design buffered clock tree clock skew essential improving clocking speed due insufficient accuracy timing models modern chip design embedding simulation clock tree synthesis flow inevitable consequently runtime clock tree synthesis prohibitively huge complexity chip designs grows rapidly construct buffered clock tree efficiently propose ultra fast timing model independent approach perform skew minimization structure optimization achieve goal novel clock tree structure called symmetrical structure level symmetrical clock tree branches wire length inserted buffers natural clock skew minimized configurations paths clock source sinks similar symmetrically constructing clock tree clock skew minimized referring simulation information experimental results approach efficiently construct buffered clock tree effectively minimize clock skew marginal wiring overheads based set commonly ibm benchmarks example art ngspice simulation results averagely 7.93x 2.77x clock skew requires 46x 24343x runtime approach

paper propose maze routing based clock tree routing algorithm integrated buffer insertion buffer sizing topology generation able consider buffer insertion locations achieve robust slew control buffer insertion routing paths avoided previously due difficulty maintain low skew aggressive buffer insertion develop accurate timing analysis engine delay slew estimation balanced routing scheme skew reduction clock tree synthesis result perform aggressive buffer insertion buffer sizing maintain accurate delay information low skew experiments synthesis results honor hard slew constraints maintain reasonable skew

paper describes solution global routing track assignment flip chip nets voronoi diagram vd partition routing space geometrical properties vd graph exploited create global routing channels capacity congestion considerations network flow algorithm achieve optimal global routing regularity flip chip bump placement observed allows reduce size global routing channel graph 50 speed computation track assignment algorithm avoids crossing wires completing final route detailed router experiment results using actual silicon chip data demonstrate solution achieves quality results compared implementation commercial tool

post silicon validation step design's verification process pre silicon techniques simulation emulation limited scope volume compared achieved silicon verification system functional verification practically covered current pre silicon technologies panel brings experts industry academia eda review differences similarities pre post silicon discuss fundamental aspects verification affected differences explore gaps worlds bridged

paper describes hipeac vision embedded virtualization developed discussion hipeac cluster binary translation virtualization start system virtualization process virtualization gradually develop vision merge virtualization layer embedded systems unified virtualization offers solutions consolidation performance optimization software engineering dealing legacy hardware components adoption requirements identified support real time execution low performance overhead virtualization accelerator cores finally trustworthiness finally define research challenges virtualization heterogeneous multi core platforms portable performance heterogeneous multi cores virtual machine management interfaces standards embedded virtualization

embedded multiprocessors heterogeneous driven power efficiency compute density hardware specialization aim achieve portability sustained performance complete applications leveraging diverse programmable cores combine instruction set virtualization time compilation compiling managed languages target independent intermediate language maximizing information flow compilation steps split optimization process

xen's isolated driver domain idd model enables strong system isolation limiting impact driver faults driver domain results severe security malware guest domain tries abuse mobile device's limited system resources sending extreme requests idd solve paper fine grained access control mechanism idd requests guest domains managed accounting module terms cpu usage calculation estimated cpu consumption using regression equations requests scheduled access control enforcer according security policies result mechanism provides precise control cpu usage guest domain due device access prevents compromised guest domains cpu overuse performance degradation battery drain implemented prototype approach considering network storage devices real smart phone sgh i780 runs para virtualized linux kernels top secure xen arm evaluation approach effectively protects smart phone excessive attacks guarantees availability

paper explores opportunities challenges using virtualization technologies embedded devices requirements shaped current generation hypervisors data centers server farms introduced paper explores multicore processors hypervisors design embedded devices features performance lower power consumption wide range embedded devices requires hypervisor capabilities requirements analyzed finally paper looks hypervisor design related meeting requirements embedded devices

increasing complexity multi processor systems chip wide range parameters tuned trade offs terms selected system figures merit energy delay optimization phase called design space exploration dse consisting multi objective optimization moo paper propose iterative design space exploration methodology exploiting statistical properties system configurations infer means correlation based analysis design analyzed low level simulations knowledge design predict expected improvement unknown configurations correlation configurations multi processor design space modeled successfully analytical functions speed overall exploration phase makes proposed methodology model assisted heuristic time exploits correlation architectural configurations converge solution multi objective

emerging dimensional integrated circuit 3d ic beneficial various applications performance perspectives trend processor design shifting multi core core questions 3d integration adopted choose various design options addressed design stage guide final design towards cost effective direction system level cost evaluation critical issues considered paper propose 3d core multiprocessor cost model includes wafer bonding package cooling cost analysis using proposed cost model evaluate optimal partitioning strategies 16 32 64 core multiprocessors cost view

methodology chip memory bandwidth minimization application driven l2 cache partitioning multi core systems major challenge multi core system design widening gap memory demand generated processor cores limited chip memory bandwidth memory service speed severely restricts cores integrated multi core system parallelism actually achieved efficiently exploited memory demanding applications workloads consisting tasks utilizing cores exceeding available chip bandwidth level shared cache partitioning shown promising technique enhance cache utilization reduce missrates cache partitioning techniques focus cache miss rates takes approach tasks memory bandwidth requirements account identifying cache partitioning multi programmed multi threaded workloads cache resources allocated objective overall system bandwidth requirement minimized target workload key insight cache miss rate information severely misrepresent actual bandwidth demand task ultimately determines overall system performance power consumption

sram design scaled technologies requires knowledge phenomena process circuit architecture level decisions various levels design hierarchy affect global figures merit foms sram performance power yield lack quick mechanism understand impact changes various levels hierarchy global foms makes accurate assessment sram design innovations difficult introduce virtual prototyper vipro tool helps sram designers explore design space rapidly generating optimized virtual prototypes complete sram macros allowing designers describe sram components varying levels detail incorporating hierarchical model captures circuit architectural features sram optimize complete prototype generates base prototypes provide starting design space exploration assesses impact process circuit architectural changes overall sram macro design

variability device characteristics i.e parametric variations shrinking process technologies manifest themselves variations performance power consumption reduction reliability manufactured chips low yield levels implications performance yield particularly profound 3d architectures defect single layer render entire stack useless paper instead causing increased yield losses actually exploit 3d technology reduce yield losses intelligently devising architectures advantage layer layer variations reduce yield losses splitting critical components multiple layers results indicate proposed method achieves 30.6 lower yield loss rate compared pipeline implemented 2d architecture

increasing die chip multiprocessors cmps affects manufacturing yield resulting manufacture cost meanwhile network chip noc emerged promising scalable solution interconnecting cores cmps consumes significant portion total die paper propose decouple interconnect fabric computing storage layers forming separate layer called interconnect service layer isl context dimensional 3d chip integration decoupling helps reduce die layer 3d stacking isl integrate multiple super imposed interconnect topologies importantly isl designed manufactured tested separate intellectual property ip component supports multiple designs computing storage layers resulting methodology helps support manufacturing volume die 3d reduce overall manufacturing cost demonstrate proposed methodology isl design example compare 2d 3d counterparts isl support results 3d design isl provides significant cost reduction achieves power performance improvement thanks efficient usage isl

multi core chips chip multiprocessors cmps becoming de facto architecture scaling performance taking advantage increasing transistor count chip reasonable power consumption levels projected increase cores future cmps putting stringent demands design chip network network chip noc nanophotonic interconnects recently emerged viable alternate technology solution design noc communication bandwidth reduced power consumption wiring simplification photonic noc approaches recently proposed common feature approaches integration entire optical network onto single silicon waveguide layer keeping entire network single layer serious implication power losses design complexity due amount waveguide crossings paper propose mpnoc multilayer photonic networks chip mpnoc combines recent advances silicon photonics dimensional 3d stacking technology architectural innovations integrated architecture provides ample bandwidth low latency energy efficient chip communications future cmps simulation results mpnoc achieve 81.92 tflop peak bandwidth energy savings 23 compared proposed planar photonic noc architectures

packet switched networks chip noc proposed efficient communication infrastructure multi core architectures adding virtual channels noc helps avoid deadlock optimize bandwidth physical channels exchange complex design routers possibly alternative approach build multiple parallel physical networks multiplanes channels simpler router organizations comparative analysis approaches based analytical models comprehensive set experimental results including synthesized hardware implementations system level simulations

paper reconfigurable architecture nocs arbitrary application specific topologies implemented proposed noc dynamically tailor topology traffic pattern applications run time run time topology construction mechanism involves monitoring network traffic changing inter node connections reduce intermediate routers source destination nodes heavy communication flows mechanism preserve noc connectivity paper introduce proposed reconfigurable topology address run time topology reconfiguration experimental results architecture effectively improves noc power performance existing conventional architectures

paper solver quantified boolean formulas qbfs based inverter graphs aigs quantifier elimination method aigs heuristically combines cofactor based quantifier elimination quantification using bdds benefits strengths data structures moreover novel sat based method preprocessing qbfs able efficiently detect variables forced truth assignments allowing elimination variables input formula describe algorithm heavily relies incremental features modern sat solvers experimental results demonstrate preprocessing method significantly improve performance qbf preprocessing able accelerate overall solving process combination art qbf solvers particular integrated preprocessing technique quantifier elimination method qbf solver aigsolve allowing outperform art solvers

paper proposes enhancements sat based property checking goal increase spectrum applications proof unbounded validity safety property provided purpose invariants computed reachability analysis abstract model main idea paper consists bdd based analysis step induction abstract model guide step wise refinement process initial abstraction property proven bounded model original design using computed invariant approach applied formally verify industrial soc modules experiments consider particularly difficult verification tasks occurring context protocol compliance verification using generic transaction style verification ips experiments numerous properties proven required substantial manual interaction previous approaches proven methods available

coverage means quantify quality system specification frequently applied assess progress system validation coverage standard measure testing difficult compute context formal verification efficient algorithms identifying system covered property algorithm integrated art sat based model checking using craig interpolation key insight algorithm re previously computed inductive invariants counterexamples re permits quick conclusion vast majority tests enables computation coverage measure 96 accuracy 5x runtime model checker

timing exception verification center incorrect constraints lead chip failures proving false path valid difficult inherent computational cost practice false paths specified path time instead designers generalized false paths represent set paths instance sdc format synopsys design constraint specifies false path exceptions using syntax applies sets pins using wildcards denote sets represents usually hundreds thousands actual paths paper proposes method verify generalized false paths efficient manner shown 10x faster current art false path verification overnight task multi million gate designs

propose parallel global routing algorithm concurrently processes routing subproblems corresponding rectangular subregions covering chip algorithm core existing integer programming ip formulation routing subproblem connecting concurrent processing routing subproblems desirable effective parallelization achieving low overflow global routing solutions strong coordinated algorithmic control difficult algorithm addresses challenge via patching phase ip connect partial routing solutions patching provides feedback routing subproblem avoid overflow attempting connect result flexible highly scalable distributed algorithm global routing method able accept input target runtimes various phases produce quality solution limits computational results target runtime 75 minutes running computational grid hundred cpus 2gb memory algorithm generates quality solutions competing methods literature

modern global routers various routing methods improve routing speed quality maze routing time consuming process existing global routing algorithms paper bounded length maze routing blmr algorithms optimal blmr heuristic blmr perform faster routing traditional maze routing algorithms proposed sequential global router adopts heuristic blmr identifies wirelength routing results runtime art global routers study proposes parallel multi threaded collision aware global router based previous sequential global router unlike conventional partition based concurrency strategy proposed algorithm task based concurrency strategy experimental results reveal proposed sequential global router wirelength runs 1.9x 18.67x faster art global routers compared proposed sequential global router proposed parallel global router yields routing quality average 2.71 3.12 fold speedup overflow free hard route benchmarks respectively running intel quad core system

paper based optimality hierarchical bubble sorting sided single detour untangling single layer bus routing firstly formulated compared optimal sup 3 sup algorithm 4 sided single detour untangling capacity consideration optimal sup 2 sup algorithm proposed solve sided single detour untangling capacity consideration sided single detour untangling capacity consideration efficient sup 2 sup algorithm proposed experimental results proposed algorithm successfully untangle twisted nets tested examples cpu time

maximum disjoint subset mds rectangles subset overlapping rectangles maximum total weight finding mds rectangles proven np complete 6 paper focus finding mds boundary rectangles closely related difficult pcb routing propose polynomial time algorithm optimally solve mds boundary rectangles algorithm applied optimal solution bus escape routing

innovations manufacturing technology help reducing variations ic design variations life addition random variations systematic stress induced variations becoming increasingly panel bring diverse views academia foundries fabless idm communities address various topics generation solutions variability main emphasis design architecture solutions specifically panel discuss bull architectures mitigate variability 22nm beyond bull design regularity effectively mitigate variability bull design techniques minimize variability fly bull techniques memories register arrays flip flops

nascent field synthetic biology researchers striving create biological systems functionality seen nature special session features talks emphasize fundamental engineering principles underlying endeavor highlighting synergies electronic design automation eda pamela silver describe designing constructing proteins cells predictable biological properties serve potential therapeutics cell based sensors factories generating bio energy bio remediation christopher anderson demonstrate complex biological functions decomposed modular devices describe construction therapeutic organisms tools building complex systems richard murray discuss concepts control dynamical systems analysis design biological feedback circuits molecular level

gate level characterization glc process characterizing gate integrated circuit ic terms physical manifestation properties key step ic applications regarding cryptography security digital rights management glc challenging due existence manufacturing variability mv strong correlations gates circuit propose solution glc using thermal conditioning techniques particular apply thermal control process glc breaks correlations imposing extra variations concerning gate level leakage power scaling factors gates characterized solving system linear equations using linear programming lp based obtained gate level scaling factors demonstrate application glc hardware trojan horse hth detection using constraint manipulation evaluate approach glc hth detection iscas85 89 benchmarks simulation results thermally conditioned glc approach capable characterizing gates average error measurement error detect hths 100 accuracy target circuit

level models systemc increasingly verification design level synthesis electronic systems growing compatible error injection tools facilitate development coverage metrics automated diagnosis paper introduces scemit tool automated injection errors systemc models selection mutation style errors supported injection performed plugin interface gcc compiler minimizes impact scemit existing simulation flows experimental injected error detection results set osci systemc example models chstone level synthesis benchmark set aside demonstrating compatibility models results value level error injection coverage measure compared conventional code coverage measures

art automatic reliability analyses system level design approaches mainly rely binary decision diagrams bdds serious 1 bdds exhaust available memory construction 2 final size bdds sometimes magnitude larger available memory contribution paper twofold 1 partitioning based quantification technique aims size bdds construction minimum 2 sat assisted simulation approach aims deliver approximated results exact analysis techniques fail final bdds exhaust available memory ability methods accurately analyze larger complex systems approaches demonstrated various test

level security provided digital rights management functions cryptographic protocols depend heavily security embedded secret key current practice embedding key digital data integrated circuit ic weakens security protocols keys learned attacks physical unclonable functions pufs recent alternative storing digital keys ic puf leverages inherent manufacturing variations ic define random function environmental variations temperature supply noise puf quality criteria reproducibility level randomness responses difficult achieve puf circuit architecture paper evaluate puf derived power distribution system ic regard set quality metrics including single bit collision probability entropy analysis carried using data obtained 36 chips fabricated ibm's 65 nm soi technology

understanding flow information aspect computer security recent move towards tracking information hardware understanding flow individual bits boolean functions gate level information flow tracking glift provides precise understanding flows information paper theoretical analysis glift formalizes provides fundamental definitions properties introduces precise symbolic representations glift logic basic boolean functions analytic quantitative analysis glift logic

advanced handheld applications demanding implementations energy efficiency performance typical implementations finite precision information fixed refinement data flow frozen instead paper suggest propagation finite precision information drive data flow transformations achieve mapping efficiency provided flexible architecture low run time switching overhead data flow execution opportunistically tuned provide instantaneous computational accuracy required application thereby average operations precision minimized principle demonstrated implementation 128 fft wlan receiver compared conventional implementation reduction 49 65 cycles achieved depending conditions external receiver

ubiquity embedded systems increasing complexity domains scientific computing requires computation models complexity grown beyond economical manage purely software requiring hardware acceleration key selecting numerical data representations bit width allocation address shortcomings existing techniques applied scientific computing dataflows propose methodology determining custom hybrid fixed floating data representations iterative scientific computing applications

designing arbiters increasingly wide multi processor system chips mpsocs chip speed cross bar switches networks accompanying paper 6 proposed systematic model driven flow design proposed scalable multi facet arbiters 3 phase process combined template based modular design approach design model derivation phase architecture model template design phase arbiter hardware implementation generation phase described phase 1 design flow induce arbiter design model detail careful analysis arbiter design issues systematic design space exploring construction model continue discuss phase 2 derive architecture model template using reusability modularity expansibility techniques design architecture models designers easily design understand choose kinds arbiters efficiently phase 3 described accompanying paper 6 knowledge time systematic model driven design approach proposed practical hardware design

expensive cost testing characterizing parametric variations critical issues today's nanoscale manufacturing process paper propose technique referred bayesian virtual probe bvp efficiently measure characterize monitor spatial variations posed manufacturing uncertainties particular proposed bvp method borrows idea bayesian inference information theory statistics determine optimal set sampling locations test structures deployed measured monitor spatial variations maximum accuracy industrial examples silicon measurement data demonstrate proposed bvp method offers superior accuracy 1.5x error reduction vp approach recently developed 12

clock frequency digital ic limited slowest paths designated speedpaths extreme complexity involved modeling modern ic technologies speedpath predictions provided timing analysis tools correct practical techniques recently proposed design debugging combine silicon stepping improved versions circuit subsequent correlation measured predicted data addressing issues paper proposes set techniques enable designer obtain reduced subsets paths guaranteed contain speedpaths circuit block subsets computed timing models prior fabrication incorporating actual delay measurements fabricated instances

study diagnosis segments speedpaths fail timing constraint post silicon stage due manufacturing variations propose formal procedure applied isolating failing speedpaths incorporates post silicon path delay measurements accurate analysis goal identify segments failing speedpaths post silicon delay larger estimated delays pre silicon stage refer segments failing segments rank according degree failure diagnosis failing segments alleviates lack observability inside path moreover root cause analysis post silicon tuning repair effectively focusing failing segments propose integer linear programming formulation breakdown path set failing segments leaving remaining failing ones algorithm yields diagnosis resolution identifying failing segments ranking

utilizing pulsed latches circuit emerging solution timing improvements pulsed latches driven brief clock signal generated pulse generators possess superior design parameters flip flops pulse generators pulsed latches placed properly pulse width degradations pulsed latches timing violations occur paper introduce pulsed latch aware placement timing integrity unified placement framework tackle placer following distinguished features 1 multilevel pulsed latch aware analytical placement framework effectively prevent potential pulse width distortion 2 physical information aware latch algorithm identify desired pulse generator pulsed latches 3 optimization gradient global placement consider impact load capacitance generators experimental results placement flow effectively consider pulse width integrity achieve total worst negative slacks marginal wirelength overheads compared leading commercial academic placement flows

vlsi placement legalization essential step overlaps gates macros removed paper introduce history based legalization algorithm min cost network flow optimization legal solution minimum deviation placement honor preserve initial placement solving gate centric network flow formulation iterative manner realize flow gate movements develop efficient techniques solve approximated subset sum iterations factor formulation history captures set fail gate movements history based scheme enables algorithm intelligently legalize highly complex designs experimental results 740 real approach significantly superior existing algorithms terms failure rate failure quality results 55 max deviation

reduce parasitic mismatches analog design usually care property symmetric placement symmetry form symmetry islands chip routing greatly affected placement results modules input output ports placed arbitrarily symmetry island routing wires connect modules modules outside island induce unwanted parasitics coupling signals circuit performance deteriorated phenomenon identified cost function considers placement total wire length introduce necessity considering boundary constraint modules input output ports symmetry islands based asf tree 3 explore feasible conditions 1d 2d symmetry islands meet constraint procedure maintain feasibility asf tree perturbation experimental results approach guarantees boundary property modules input output ports symmetry islands

continuation moore's law conventional cmos scaling becoming challenging 3d packaging 3d silicon vias tsv interconnects promise extending scaling using mature silicon technology providing path towards moore ago unceasing question 3d move forward concrete implementation technology questions 3d 3d brave souls disruptive interconnect technology investing gain benefit lingering questions remain future

research networks chips nocs spanned decade results visible products seminal idea using networking technology address chip level interconnect shown correct moreover technology scales geometry chips scale complexity nocs essential element achieve desired levels performance quality service curbing power consumption levels design timing closure achieved sophisticated set tools address noc synthesis optimization validation

goals aelig thereal network silicon called set 2000 concepts defined 2001 ten achieved meet goals left concepts paper answer questions evaluate implementations based performance cost analysis discuss reflect experiences conclude issues future directions

paper describe evolution soc interconnect noc fits decade noc research stand session dac 2010 presentation looks features helped shape development chip interconnect solutions evolution noc considered alongside evolution amba chip communication architecture consideration techniques considered

technique automatically synthesize multithreaded pipeline level unpipelined datapath specification extends previously proposed transactional specification spec synthesis technology piper technique instruction processors flexible accept sequential datapath maintains previously proposed threaded pipeline features enhanced multithreading features report design space exploration study 32 multithreaded x86 processor pipelines synthesized single spec

clock frequency scaling parallelism emerged key driver chip performance growth factors undermine efficient simultaneous chip resources continue scaling moore's law factors due sequential dependencies illustrated amdahl's law quantifying achievable parallelism help prevent futile programming efforts guide innovation significant challenges complement amdahl's law focus stream processing quantify performance losses due stochastic runtimes using spectral theory random matrices derive analytical results validate numerical simulations results allow explore unique benefits stochasticity outweigh costs software streams

increasing transistor variability cmos technology essential integrate variation aware performance analysis task allocation scheduling process improve performance yield building today's multiprocessor system chip mpsoc existing solutions assume execution times tasks performed processors statistically independent ignores spatial correlation characteristics systematic variation addition unified task schedule constructed design stage applied products various variation effects restricts maximum performance yield achieved mpsoc products tackle paper novel quasi static scheduling algorithm based accurate performance yield estimation method set variation aware schedules synthesized line run time scheduler select based actual variation chip timing constraint satisfied whenever experimental results demonstrate effectiveness

multi processor multi core systems becoming increasingly time critical systems shared resources shared memory communication buses share data read sensors consider real time tasks constituted superblocks executed sequentially time triggered static schedule models access shared resources explored 1 dedicated access model accesses happen dedicated phases 2 access model accesses happen anytime 3 hybrid access model combining dedicated access model resource access based time division multiple access tdma protocol analyze worst completion time superblock derive worst response times tasks obtain relation schedulability models conclude proposing dedicated sequential model model choice time critical resource sharing multi processor multi core systems

ip lookup critical data path speed router paper propose chip ip cache architecture performance ip lookup design ip cache axes cache indexing cache replacement policies study various hash performance employ 2 universal hashing ip cache coupled cache indexing scheme progressive cache replacement policy considering internet traffic characteristics experiments ip traces ip cache reduces miss ratio 15 32kb ip cache achieve 2tbps routing throughput

performance embedded systems critically dependent average memory access latency improving cache hit rate significant positive impact performance application modern embedded processors feature cache locking mechanisms allow memory blocks locked cache software control cache locking primarily designed offer timing predictability hard real time applications hence compiler optimization techniques focus employing cache locking improve worst execution time cache locking effective improving average execution time embedded applications paper explore static instruction cache locking improve average program performance introduce temporal reuse profile accurately efficiently model cost benefit locking memory blocks cache propose optimal algorithm heuristic approach temporal reuse profile determine beneficial memory blocks locked cache experimental results locking heuristic achieves close optimal results improve cache miss rate 24 suite real world benchmarks moreover heuristic provides significant improvement compared art locking algorithm terms performance efficiency

recent advances circuit process technologies pushed volatile memory technologies era technologies exhibit appealing properties low power consumption volatility shock resistivity density challenges answers road applying volatile memories main memory computer systems volatile memories limited write erase cycles compared dram memory write activities volatile memory expensive dram memory terms energy consumption access latency challenges benefit reduction write activities nonvolatile memory paper target embedded chip multiprocessors cmps scratch pad memory spm volatile main memory introduce data migration recomputation techniques reduce write activities volatile memories experimental results proposed methods reduce writes 59.41 average means volatile memory 2.8 times meanwhile finish time programs reduced 31.81 average

embedded systems designers free choose suitable configuration l1 cache modern processor based socs choosing appropriate l1 cache configuration necessitates simulation memory access traces accurately obtain hit miss rates execution time simulate traces particularly separate simulation configuration major drawback researchers proposed techniques speed simulation caches lru replacement policy techniques little majority embedded processors processors utilize round robin policy based caches paper propose fast l1 cache simulation approach called scud sorted collection unique data caches round robin policy scud single pass cache simulator simulate multiple l1 cache configurations varying set sizes associativities reading application trace utilizing fast binary searches novel data structure scud simulates application trace significantly faster widely single configuration cache simulator dinero iv scud simulate set cache configurations 57 times faster dinero iv scud average speed 19.34 times dinero iv mediabench applications average speed 10 times spec cpu2000 applications

paper blocking system allows compression coverage density unknown values varies shift despite presence xs scan cells compression maximized using prpg misr structures results industrial designs various densities demonstrate consistently compression test coverage

post silicon bug localization process identifying location detected hardware bug cycle bug produces error major bottleneck complex integrated circuits instruction footprint recording analysis ifra promising post silicon bug localization technique complex processor cores applying ifra processor microarchitectures challenging due manual effort required implement special microarchitecture dependent analysis techniques bug localization paper bug localization graph blog framework enables application ifra processor microarchitectures reduced manual effort results obtained industrial microarchitectural simulator modeling art complex commercial microarchitecture intel nehalem foundation intel core trade i7 core trade i5 processor families demonstrate blog assisted ifra enables effective efficient post silicon bug localization complex processors bug localization accuracy low cost

due magnitude complexity design manufacturing processes unrealistic expect models simulations predict aspects silicon behavior accurately unexpected behavior observed post silicon stage desires identify causes consequently identify fixes paper studies formulation design silicon mismatch analyze unexpected behavior silicon behavior partitioned classes class containing instances unexpected behavior rest population classification rule learning applied extract rules explain class behavior occurs rule learning algorithm analyzes test measurement data terms design features generate rules conduct controlled experiments demonstrate effectiveness proposed approach results proposed learning approach effectively uncover rules responsible designsilicon mismatch significant noises associated measurement data class partitioning results capturing unexpected behavior

fault simulation essential test generation design test reliability assessment integrated circuits reliability analysis simulation self test structures particularly computationally expensive patterns evaluated propose map fault simulation algorithm based parallel pattern single fault propagation ppsfp paradigm core architectures describe involved algorithmic optimizations core architectures characterized simple execution units local memory proposed fault simulation algorithm exploits parallelism architectures parallel data structures algorithm implemented nvidia gt200 graphics processing unit gpu architecture achieves speed 17x compared existing gpu fault simulation algorithm 16x compared art algorithms conventional processor architectures

identification speedpaths required post silicon ps timing validation currently becoming time consuming due manufacturing variations paper propose method set representative paths help monitor pool target paths prone fail timing ps stage reduce validation effort introduce concept effective rank select set representative paths predict target paths accuracy handle dimension degree independent random parameter variations allow modeling target path delays using segment delays formulate convex identification segments incorporated design custom test structures monitor ps circuit timing behavior simulations actual timing information 100 paths segments accurately predict 3,500 target paths statistically critical ones 1,000 process variables

technology scaling 90nm below yield driven design optimization methodologies proposed cope prominent process variation increase yield critical issue affects efficiency methods estimate yield design parameters variations existing methods monte carlo method performance domain thousands simulations required local search parameter domain simulations required characterize yield boundary defined performance constraints improve efficiency paper propose quickyield yield surface boundary determination surface finding global search experiments circuits accuracy quickyield 519x faster compared monte carlo approach 4.7x faster compared yenss fastest approach reported literature

double patterning lithography dpl feasible solution sub 32nm nodes owing recurrent delay generation lithography dpl attempts decompose single layer layout masks increase pitch size improve depth focus dof considering dpl detailed routing stage improve flexibility layout decomposition compared post routing layout decomposition conflict graph proposed 8 provides global view nets layout obtain highly decomposable layout yield loss adopting conflict graph routing process using grid based model gridless model brings huge overhead innovative conflict graph icg realize adopting conflict graph routing process routing friendly characteristics icg constant time conflict cycle detection lazy icg update light weight routing overhead efficiently utilize routing resources crowded region gridless models provide solution space grid based models develops knowledge dpl aware gridless detailed routing icg generate highly decomposable routing result moreover greedily assigning colors routed nets cause unnecessary stitches coloring conflict deferred coloring assignment based routing flow escape local optimum greedy coloring approach experimental results indicate dpl aware routing results contain coloring conflicts stitches produced proposed router produced greedy coloring approach 41 average 0.22 30 increment wirelength runtime respectively

double dipole lithography ddl combination dipole exposures achieve extreme axis illumination vertical horizontal orientations ddl requires decomposition layout set patterns respective dipole exposures propose frequency domain decomposition flow ddl experiments proposed frequency domain method eliminates inherent ambiguity spatial rule based flows produces contours exhibit significantly improved pattern fidelity lithographic dose focus variation

paper propose equivalent contact resistance model accurately calculates contact resistances contact contact position contact shape based impact contact resistance saturation current perform robust contact layout optimization minimizing lithography variation maximizing saturation current leakage penalty results industrial 32nm node standard cells 3.45 delay improvement nominal process condition 86.81 reduction delay variations fastest slowest process corners

cloud computing describe collection remote data centers hardware software applications delivered service saas software service success driven cost effective demand availability scalable amounts computing resources cloud established paradigm enterprise consumer applications email web servers productivity applications customer relationship management ic design success limited

paper summarize recent developments compact dynamical modeling linear nonlinear systems arising analog applications techniques include methods based projection framework rational fitting frequency response samples nonlinear system identification time domain data combining traditional projection fitting methods recently developed convex optimization techniques obtain guaranteed stable passive parameterized models usable time domain simulators serve valuable tool analog designers top bottom design flows

digital design 15 ago analog design reached transition move cmos analog circuits functionally complex complexity leads naturally functional errors designs leads respins delays digital designers 15 ago analog designers beginning realize employ rigorous functional verification methodology basic concepts analog verification wide variety functional errors complex mixed signal integrated circuits

analog digital circuits intertwined create validation approach handles circuit types gracefully paper proposes model approach creates functional models analog blocks hdl simulator models hdl models standard cells system validation underlying implementations validated ensure meet specification creating functional models analog blocks difficult analog blocks modeled linear systems property help create required functional model

simulation multi core systems becoming increasingly bottleneck design process paper acme design automation tool flow facilitates hardware emulation newly proposed multi core interconnection networks fpgas mitigate slowdowns single threaded event driven simulation tool aimed computer network architects knowledge digital design comfortable hardware description languages synthesis flows acme graphical entry allows mix hardware components software algorithms written user defined latency throughput terms system cycles acme automatically generates cycle accurate hardware emulator xilinx platform studio project integrates synthesized hardware blocks embedded soft core processors execute code results demonstrate 16 core 64 core cycle accurate packet switching networks fpga based emulation faster simics based software simulation 2.5x 14.6x respectively

networks chip nocs becoming increasingly purpose application specific multi core designs uniform router configurations appropriate purpose nocs router configurations application specific nocs uniformly optimized application specific traffic characteristics paper specifically consider virtual channel vc allocation application specific nocs prior solutions average rate driven average rate models poor representations real application traffic lead designs poorly matched application propose alternate trace driven paradigm configuration nocs driven application traces propose simple greedy trace driven vc allocation schemes compared uniform allocation observe 51 reduction vcs average packet latency constraint 74 reduction average packet latency vcs results suggest average rate driven methods effectively select appropriate links vc allocation fail consider impact traffic bursts study compare proposed approach existing average rate driven method 9 observe 35 reduction vcs target latency

application specific network chip noc mpsoc designs requires irregular topology optimize power performance efficient deadlock free routing avoids restricting critical routes significantly increase power irregular noc remained paper application specific cycle elimination splitting aces method based application specific communication patterns propose scalable algorithm using global optimization eliminate channel dependency cycles ensuring shortest paths heavily communicated nodes split remaining set cycles experimental results compared prior aces reduce noc power 11 35 maintaining approximately network performance improve network performance 10 36 slight noc power overhead 5 7 wide range examples

power thermal distribution critical issues chip multiprocessors cmps previous studies focus cores chip memory subsystems discuss reduce power control thermal distribution using dynamic voltage frequency scaling chip interconnection network network chip noc source power consumption heat generation particularly traffic flowing noc affects directly power thermal distribution unfortunately discuss dynamism noc key technique noc management capture traffic patterns predict future behaviors paper propose table driven predictor called network traffic prediction table ntpt recording predicting traffic noc unique feature ntpt ability predict traffic switch switch traffic application behaviors captured monitored evaluations tilera's tile64 ntpt prediction accuracy analyses incurs low overhead feasible

paper propose application aware networks chip noc design efficient sdram access provide short latency priority memory requests penalties packet split short packets scheduled proposed flow controller router moreover noc design improves memory performance matching application access granularity sdram access granularity experimental results application aware noc design improves average 32.7 memory latency latency sensitive cores average 3.4 memory utilization compared 1

embedded memory blocks integrated infield programmable gate arrays fpgas decade count capacity configurations increased time growth poses unique challenges binding embedded memory blocks data vectors exist applications mapped onto fpgas paper discuss challenge addressed algorithmically

ramp gold economical fpga based architecture simulator allows rapid design space exploration manycore systems ramp gold prototype throughput cycle accurate system simulator runs single xilinx virtex 5 fpga board simulates 64 core shared memory target machine capable booting real operating systems improve fpga implementation efficiency functionality timing modeled separately host multithreading models evaluate prototype's performance using modern parallel benchmark suite running manycore research operating system achieving magnitude speedup compared widely software based architecture simulator

logic synthesis soft error mitigation increasingly wide range applications fpgas r2 algorithm rewiring post layout lut based circuit reduces overall criticality circuit criticality fraction primary inputs lead observable errors primary outputs single event upset inverts configuration bit algorithm explicitly optimizes robustness interconnect dominant component fpgas key idea r2 exploit boolean flexibilities circuit implementation replace wires criticality lower criticality preserving circuit functionality estimate criticalities using monte carlo fault simulation represent flexibilities using spfds set pairs functions distinguished criticality information choose candidates rewiring assigning maximum flexibility criticality wires compared ipr recent robust logic optimization implementation increases mttf mean time failure 24 time advantages exploiting boolean flexibilities optimizing robustness addition r2 achieves 5 2 reduction wires luts fpga obtained existing rewiring algorithm minimization

existing approaches statistical leakage analysis focus calculating mean variance total leakage practice concerns tail behavior sum distribution tells extent design safe reliable computing tail distribution difficult computing mean variance paper tackle recent developments financial insurance analysis fast evaluation algorithm variance spatially correlated random sums proposed algorithm provably complexity experiments algorithm provides 1 accuracy modeling tail behavior 10x accurate compared existing methods approximate distribution matching moments lognormal distribution

chip statistical leakage power analysis typically requires quadratic time complexity presence spatial correlation spatial correlation strong spatial correlation length efficient linear time complexity analysis attained variational variables significantly reduced circuits gate leakage currents weakly correlated paper linear time algorithm statistical leakage power analysis presence weak spatial correlation algorithm exploits gate leakage current efficiently computed locally correlation weak adopt newly proposed spatial correlation model set location dependent uncorrelated variables defined virtual grids represent original physical random variables via fitting compute leakage current gate set variables method orthogonal polynomials based collocation method applied gate leakage models total leakage currents computed simply summing resulting orthogonal polynomials coefficients set variables gates experimental results proposed method magnitude faster recently proposed grid based method 3 similar accuracy magnitude times monte carlo method

active leakage current larger 10x standby leakage current takes proportion 30 40 active power consumption active mode power gating ampg proposed extend application basic power gating reducing active leakage relies clock gating signals cut power combinational gates select gates integrity circuit behavior remains intact solved identify constraints solve namely functional timing current constraints synthesizing ampg circuits laid synthesis algorithm proposed gates power gated clock gating signal size footer attached constitute synthesis output layout methodology standard cell designs proposed assess ampg circuits wirelength experiments 1.1 45 nm technology demonstrate active leakage reduced 16 average compared clock gated circuits

performance adaptable applications gaining increased popularity embedded systems especially multimedia applications efficient scheduling methods explore feature achieve performance outcome addition conventional scheduling requirements real time dynamic power emerging challenges leakage power multiprocessors complicate formulation solution adaptive application scheduling paper propose runtime adaptive application scheduling scheme efficiently distributes runtime slack task graph achieve maximized performance timing dynamic leakage energy constraints guided search heuristics proposed select fit frequency levels maximize additional program cycles adaptive tasks moreover devise stage receiver task selection method runs efficiently runtime quickly slack distribution targets experiments synthesized tasks jpeg2000 decoder conducted justify approach results method achieves 25 runtime performance increase compared contemporary approaches incurring negligible runtime overhead

boolean matching determines completely specified boolean functions identical complementary permutation negation input variables due broad applications logic synthesis verification attracted attention prior efforts incomplete restricted special matching conditions contrast paper focuses computation kernel boolean matching proposes complete generic framework conflict driven learning abstraction capacity boolean matching scales due effective pruning infeasible matching solutions experiments encouraging results resolving hard instances otherwise unsolvable

paper logic restructuring technique named node addition removal nar adding node circuit replace existing node removing replaced node previous node merging techniques focus replacing node existing node circuit fail replace node substitute node enhance node merging techniques logic restructuring optimization propose nar approach sufficient conditions requirements added nodes safely replacing target node nar approach proposed fast detect added nodes performing logic implications based conditions apply nar approach circuit minimization techniques redundancy removal mandatory assignment reuse conduct experiments set iwls 2005 benchmarks experimental results approach enhance art atpg based node merging approach additionally approach competitive capability circuit minimization 44 times speedup compared sat based node merging approach

rewiring class logic restructuring technique equally powerful flexibility compared logic transformation techniques wiring sensitive property particularly useful interconnect based circuit synthesis processes mature rewiring techniques atpg based redundancy addition removal rar technique adds redundant alternative wire originally irredundant target wire redundant removable paper propose error cancellation based rewiring scheme ecr rar based rewiring operations efficiency based notion error cancellation analyze reformulate rewiring develop generalized rewiring scheme able detect rewiring obtainable existing schemes maintains low runtime complexity comparing recent rar rewiring tool irra total alternative wires found approach twice cpu time slightly 26 benchmarks pre optimized rewriting abc

device size shrinks nanometer range fpgas increasingly prone manufacturing defects anticipate ability tolerate multiple defects 45nm beyond common defect lookup table lut configuration bits crucial correct operation fpgas error analysis technique able efficiently calculate critical bits implement lut perform analysis using scalable overlapping window based method called dcow don't care computation overlapping windows allows accurate efficient don't care lower bound calculations windowing technique approximate complete don't cares 2.34 logic synthesis operations particular apply dcow fpga mapping algorithm reduce faults allow design success functioning correctly implemented faulty fpga using algorithm able reduce faults 12 increase

ultra low power energy efficiency requirements common ic designs requirements range extending battery life operating harvested energy applications ranging consumer electronics medical applications design methodologies evolved past decade cater low power designs panel discuss design methodology challenges generation ultra low power energy efficient ic designs covering eda roadmap low power standards design verification flows

ibm system processors industry leading reliability availability serviceability ras hardware designed support resilience errors ability recover errors maintaining valid architectural paper describes thorough verification effort required prove fault tolerance ibm system processor core matches expectations prior design tape paper proposes multifaceted verification methodology cover various aspects verifying correct error detection isolation recovery soft errors enlarge space design significantly provides significant challenge functional verification environment tolerate fails expect architectural compliance fault injection mechanisms discussed special focus novel methodology comprehensive fault injection cfi validate improve dependability characteristics processor core providing improved soft error resilience ser feedback results measurements efficiency functional coverage integral overall methodology allowing smart available compute resources

transient faults logic circuits reliability concern future technology nodes guide design process choice circuit optimization techniques accurately efficiently model transient faults propagation logic circuits evaluating error rates resulting transient faults overview existing formal methods modeling reasoning transient faults describe main aspects transient fault propagation advantages drawbacks approaches modeling

silicon process technology scales deeper nanometer regime hardware defects becoming common threatening yield rates product lifetimes introspective software mechanisms hold promise address reliability challenges low cost coverage address challenges developed novel instruction set enhancement called access control extensions ace access control microprocessor's internal using ace technology special firmware periodically probe microprocessor execution locate run time faults repair design errors discovered field streamline manufacturing tests

paper xetal pro simd processor based xetal ii computational efficient terms gops watt processors available xetal pro supports ultra wide vdd scaling nominal supply sub threshold region aggressive vdd scaling causes severe throughput degradation compensated nature massive parallelism xetal family predecessor xetal pro xetal ii includes chip frame memory fm operate reliably ultra low voltage investigate fm realizations memory organization alternatives propose hybrid memory architecture reduces local memory traffic enables vdd scaling compared xetal ii operating nominal voltage gain 10x energy reduction delivering sufficiently throughput 0.69 gops counting multiply add operations insight design ultra low energy simd processors suitable portable streaming applications

key characteristic generation embedded applications intensive data transfer storage efficient memory management embedded system designer community optimization methodologies techniques change input output functionality software applications design underlying hardware platform paper key focus efficient data access memory storage dynamically statically allocated data assignment data memory hierarchy mpsoc platform propose design tool framework efficiently automate time consuming optimizations parallelization memory mapping static dynamic data mpsocs

algorithms application domains exhibit property inherent resilience errors extrinsic intrinsic sources offering entirely avenues performance power optimization relaxing conventional requirement exact numerical boolean equivalence specification hardware implementation propose scalable effort hardware design approach tap reservoir algorithmic resilience translate highly efficient hardware implementations basic tenet scalable effort design approach identify mechanisms level design abstraction circuit architecture algorithm vary computational effort expended towards generation correct exact result expose control knobs implementation scaling mechanisms utilized achieve improved energy efficiency maintaining acceptable near identical level quality overall result major tenet scalable effort design approach exploiting potential algorithmic resilience requires synergistic cross layer optimization scaling mechanisms identified levels design abstraction implemented energy efficient svm classification chip based proposed scalable effort design approach results post layout simulations demonstrate scalable effort hardware achieve energy reductions 1.2x 2.2x impact classification accuracy 2.2x 4.1x modest reductions accuracy various sets results establish cross layer optimization leads improved energy vs quality tradeoffs compared individual techniques

increasing popularity multi core processors promise future core systems parallel cad algorithm development attracted significant amount research effort highly relevant issue parallel program performance modeling received little attention eda community performance modeling serves critical role guiding parallel algorithm design provides basis runtime performance optimization propose systematic composable approach performance modeling recently developed hierarchical multi algorithm parallel circuit simulation hmaps approach unique integration inter intra algorithm parallelisms allows multiplicity parallelisms exploited hmaps creates modeling challenges forms complex performance tradeoffs runtime configuration space model performances key subtask entities functions workload parallelism address significant complications introduced inter algorithm interactions terms memory contention collaborative simulation behavior via novel penalty statistical based modeling proposed approach able accurately predict parallel performance hmaps configuration hence enables runtime optimization parallel simulation code

shrinking access cycle times employment dynamic read write assist circuits standard static noise margins increasingly problematic scaled sram designs recently proposed dynamic noise margins precisely characterize dynamic stability using concept stability boundaries separatrices provide elegant separatrix tracing algorithm separatrix characterization method efficient dimensional space hence practically applicable extracted sram designs additional parasitics rigorous system theoretical approach computing tangent approximation separatrix dimensional space using basis develop fast method based tangent approximation exact iterative refinement method analyzing sram dynamic stability proposed algorithms implemented spice cad tool broadly applicable efficient computation dynamic noise margins

verification radio frequency millimeter wave rf mm integrated circuits ics regained attention performance designs beyond 90nm 60ghz traditional time domain verification standard krylov subspace based shooting method able deal newly increased verification complexity numerical algorithms computational cost superior convergence highly desired extend designers creativity probe extremely challenging designs rf mm ics paper shooting algorithm periodic rf mm ic systems utilizing periodic structure matrix periodic arnoldi shooting algorithm developed exploit structured krylov subspace leads improved efficiency convergence results industrial examples proposed periodic arnoldi shooting method called pas 1000 times faster direct lu explicit gmres methods moreover compared existing industrial standard matrix free gmres structured krylov subspace pas method reduces iteration runtime 3 times accuracy

deep submicron era thermal hot spots temperature gradients significantly impact system reliability performance cost leakage power system complexity increases difficult perform thermal management centralized manner explosion overhead monitoring entire chip paper propose framework distributed thermal management core systems balanced thermal profile achieved proactive task migration neighboring cores framework low cost agent residing core observes local workload temperature communicates nearest neighbor task migration exchange choosing migration requests result balanced workload generating thermal emergency proposed framework maintains workload balance system avoids unnecessary migration experimental results compared existing proactive task migration technique approach generates hotspots smoother thermal gradient migration overhead processing throughput

seek maximize throughput periodic application obtaining optimized task sequence dynamic voltage frequecy scaling schedules subject peak temperature constraint derive optimal initial temperature generate optimum solutions optimal solutions subproblems finally propose novel algorithms instances experimental results techniques perform existing approaches design quality solution times

thin film thermoelectric cooling promising technology mitigating heat dissipation performance chips paper optimization framework active cooling system comprised array thin film thermoelectric coolers observe set constraints cooling system design firstly integrating excessive amount coolers increases chip package cost moreover thermoelectric coolers active devices dissipate heat chip package operation hence setting supply current level operate cooler improperly actually lead overheating chip package besides supply current delivered integrated cooler devices via dedicated pins extra pins available performance chip packages limited observing constraints propose optimization framework configuring active cooling system minimizes maximum silicon temperature includes determining amount coolers deploy locations mapping supply pins coolers determining current levels pin propose algorithms tackle optimal configuration found portion silicon die covered tec devices 18 average experiments algorithms able reduce temperatures hot spots 10.6 deg compared integrated thermoelectric coolers average temperature reduction 8.6 deg 4 dedicated pins available package total power consumption resulting active cooling system reasonably 2 experiments reveal framework maximizes efficiency cooling devices ideal hundreds pins available tune supply level individual cooler additional average reduction hot spot temperature 0.3 deg

discrete gate sizing commonly flexible powerful techniques digital circuit optimization underlying proven np hard 1 suboptimal gate sizing heuristics proposed past decades research suffered lack systematic assessing quality proposed algorithms develop method generate benchmark circuits called eyecharts arbitrary size method compute optimal solutions using dynamic programming evaluate suboptimalities popular gate sizing algorithms eyecharts help diagnose weaknesses existing gate sizing algorithms enable systematic quantitative comparison sizing algorithms catalyze gate sizing research results common sizing methods including commercial tools suboptimal 54 vt assignment 46 gate sizing 49 gate length biasing realistic libraries circuit topologies

proposes identifying tangled logic structures synthesized netlist cells highly interconnected create potential routing hotspots require special placement constraints indicate problematic clumps logic require resynthesis reduce wiring demand specialized datapath placement glance formulation appears similar conventional circuit clustering distinctions finding cells represent entire logic structures adders decoders opposed clusters handful cells seek pull structures instead assigning cell cluster reduce complexity proposes metrics detecting structures based rent's rule unlike traditional cluster metrics able fairly differentiate cells demonstrate metrics applied identify structures netlist finally experiments demonstrate ability predict alleviate routing hotspots real industry design using metrics method

paper studies implementation boolean functions lattices dimensional switches switch controlled boolean literal literal 1 switch connected neighbours else connected boolean functions implemented terms connectivity lattice boolean function evaluates 1 iff exists top bottom path paper addresses following synthesis map literals switches lattice implement target boolean function seek minimize switches aim efficient algorithm exhaustively enumerate paths exploit concept lattice boolean function duality demonstrate synthesis method produces lattices switches grows linearly product terms function algorithm runs time grows polynomially

existing optimal single constant multiplication scm algorithms limited 19 bit constants propose exact scm algorithm 32 bit constants average run time 10 optimality ensured via exhaustive search novelty algorithm aggressive pruning achieved combining scm frameworks

automotive industry introducing novel features seamless vehicle vehicle vehicle infrastructure connectivity improve vehicle driver safety e.g forward collision warnings comfort e.g routing avoid congestion facing stricter government regulations shortened time markets result automotive electronic control system ecs architectures becoming increasingly complex cope challenges opportunities entire automotive supply chain engaged follows automotive oems managing complexity reusing legacy components enabling technologies tier suppliers increasingly integrating features computing platform tier suppliers providing multi core powerful technologies academic institutions doing research analysis synthesis optimization methods tool providers trying raise level abstraction system modeling analysis optimization panel address following topics bull challenges opportunities domain bull business models stakeholders bull academia support solving design bull lessons learned ic design ecosystem bull eda companies help

paper argue future systems designed using flexible user centric design methodology geared primarily maximizing user satisfaction i.e flow experience seeking mainly optimization performance power consumption compared traditional design aim re focusing current design paradigm placing user behavior center design process using psychological variables user ability motivation main drivers process allows systems capable promptly adapting users enhancing short term user satisfaction preliminary results potential methodology maximizing users positive experience running embedded applications multiprocessor platforms

online social networks growing internet phenomenon connect millions individuals sharing common political religious views careers social networking websites observing increasing regular users rely virtual medium connect friends share community result repository vast amount demographic information deliver valuable insights businesses individuals data untapped partly complexity entailed analyzing vast social connectivity graphs deals data sets electronic design automation eda result increasingly complex computer systems powerful tools deal data sets possibilities social networks propose study aspects social networks deploying solutions commonly eda

mesoscopic properties art nanoscale devices emerging petascale computing storage systems common function scales magnitude larger simulated standard industry academic laboratory settings decades cad verification communities successfully developed emulations overcome complement shortcomings simulations logic verification physical prototyping 2d 3d silicon emulation increasingly complex systems holds significant promise overcome limitations computer modeling simulations potential opportunities plenty research required prototyping building effective relevant indicative emulation platforms

study propose specialized influence models capture dynamic behavior network chip noc goal construct versatile modeling framework help development analysis distributed adaptive features nocs application testbench framework construct design methodology dynamic voltage frequency scaling dvfs similarities proposed model backpressure mechanisms potentially exploited enhanced models estimation optimization nocs

current tools computer architecture design lack standard support multi core development propose using circuit models describe multiple processor architecture motivate circuit based design approach applied computer architecture test chip dvfs capable processors explore ideas software implementation

advent power supply technologies power sources differing energy storage densities recycling capabilities becoming available combining power supplies hierarchical create unique opportunity matching underlying resources fluctuating application demands heterogeneous hybrid network power supply components address variety power serve broader range system loads efficiency

paper describes ultra low power chip design using nano scale electro mechanical switches nems graphene chip attachable detachable onto top chips due remarkable stickiness carbon nanotube interconnects 3d ic constructed reconfigurable system chips furthermore due floating gate built nems logic performance superior nems based logic previous conventional cmos

developed technique synthesis trustable ics using untrusted cad tools approach enables cad tools difficult synthesis tasks simple trusted tools developed designer checking results modifying specifications main idea specify pertinent design untrusted tool add malicious circuitry

digital microfluidic biochips utilized biochemistry biomedical sciences cross contamination droplets biomolecules lead erroneous outcomes bioassays essential avoid cross contamination droplet routing propose wash operation synchronization method manipulate wash droplets clean residue left sample reagent droplets synchronize wash droplet routing sample reagent droplet routing steps controlling arrival droplets cross contamination sites proposed method minimizes droplet routing time cross contamination especially effective tight chip constraints real life application evaluation

digital microfluidic biochips emerged popular alternative laboratory experiments pin count reduction cross contamination avoidance key design considerations practical applications droplets transported manipulated highly integrated biochips paper design automation flow considers cross contamination pin constrained biochips explore factors harder pin constrained biochips cope cross contaminations propose 1 crossing minimization algorithms placement 2 systematic wash droplet scheduling routing require extra control pin zero assay completion time overhead practical bioassays experimental results effectiveness scalability algorithms practical bioassays

reversible logic promising alternative traditional circuits applications e.g low power design quantum computation result design reversible circuits attracted attention circuit lines thereby major criterion e.g affects limited resource qubits nevertheless approaches introduced synthesis complex reversible circuits significant amount additional circuit lines sometimes magnitude primary inputs paper propose post process optimization method addresses idea merge garbage output lines appropriate constant input lines circuits re synthesized experimental results applying proposed approach circuit lines reduced 17 average 40 time increase gates quantum costs respectively kept

optimal synthesis reversible functions trivial major limiting factors computing circuits sheer reversible functions restricting synthesis 4 bit reversible functions results complexity explosion 16 ap 2 sup 44 sup functions output search counting space required list toffoli gates function require 100 terabytes storage paper algorithm synthesizes optimal circuit 4 bit reversible specification employ techniques tractable report results experiments including synthesis random 4 bit permutations optimal synthesis 4 bit linear reversible circuits synthesis existing benchmark functions distribution optimal circuits results implications design optimization quantum circuits testing circuit synthesis heuristics performing experiments quantum information processing

crosstalk noise intrinsic characteristic photonic devices optical networks chip onocs potential issue time paper analyzed modeled crosstalk noise signal noise ratio snr bit error rate ber optical routers onocs analytical models crosstalk noise minimum snr maximum ber meshbased onocs automated crosstalk analyzer optical routers developed crosstalk noise significantly limits scalability onocs example due crosstalk noise maximum ber 10 sup 3 sup 8x8 mesh based onoc using optimized crossbar based optical router achieve ber 10 sup 9 sup reliable transmissions maximum onoc size 6x6 novel compact snr optical router proposed improve maximum onoc size 8x8

leveraging power nowadays graphics processing units robust power grid simulation remains challenging task existing preconditioned iterative methods require incomplete matrix factorizations effectively accelerated gpu due limited hardware resource data parallel computing efficient gpu based multigrid preconditioning algorithm robust power grid analysis ell sparse matrix data structure adopted implemented specifically power grid analysis assure coalesced gpu device memory access arithmetic intensity combining fast geometrical multigrid solver robust krylov subspace iterative solver power grid dc transient analysis performed efficiently gpu loss accuracy largest errors lt 0.5 mv unlike previous gpu based algorithms rely power grid regularities proposed algorithm applied power grid structures experimental results dc transient analysis gpu achieves 25x speedups available cpu based solvers industrial power grid 10.5 million nodes accurately solved 12

paper efficient algorithm variation aware interconnect extraction addressing formulated mathematically solution linear systems matrix coefficients dependent set random variables algorithm based representing solution vector summation terms term product unknown vector deterministic space unknown direction stochastic space formulate simple nonlinear optimization uncovers sequentially relevant directions combined deterministic stochastic space complexity algorithm scales sum product sizes deterministic stochastic spaces hence magnitude efficient available art techniques finally validate algorithm variety onchip chip capacitance inductance extraction ranging moderate size feasible using available art techniques

modern cmos technologies employ process induced stress improve carrier mobility increase drive current stress shown strongly layout dependent lack physical models relating potential performance variation critical layout parameters paper compact closed form models capture layout dependence mechanical stress induced device channel considering relevant sources stress sti tensile compressive nitride liners embedded sige models calibrated using ring oscillator frequency data obtained experimental test chip verify accuracy results indicate models accurately capture layout dependence stress carrier mobility variety layout permutations root mean square error predicted ring oscillator frequency 1 layout experiments models help drive layout optimization timing power analysis technology computer aided design tcad tools slow limited capacity

paper approach generating parametric systems frequency response measurements performed respect frequency respect design parameters geometry material properties allow fast construction models parameter values suited optimizing performance measure design variables validate proposed approach example parameters

numerous algorithms macromodel linear time invariant lti system frequency domain sampling data proposed recent 1 2 3 4 5 6 7 8 loewner matrix based tangential interpolation proves especially suitable modeling massive port systems 6 7 8 existing loewner matrix based method follows vector format tangential interpolation vfti fails explore information contained frequency samples paper novel matrix format tangential interpolation mfti proposed requires fewer samples recover system yields accuracy handling sampled noisy ill conditioned data recursive version mfti proposed reduce computational complexity numerical examples confirm superiority mfti vfti

charge soc measures energy left battery critical modeling managing batteries developing efficient accurate soc algorithms remains challenging task existing regression based time variant circuit model hard converge apply types batteries knowing circuit voltage ocv leads soc due mapping ocv soc paper propose efficient accurate ocv algorithm applies types batteries using linear system analysis circuit model calculate ocv based sampled terminal voltage discharge current battery experiments algorithm numerically stable robust history dependent error obtains soc 4 error compared detailed battery simulation variety batteries ocv algorithm efficient real time electro analytical tool revealing inside battery

wireless sensor networks wsn challenging research field embedded system design automation design enforce stringent constraints terms power cost wsn node devices designed using shelf low power microcontroller units mcus power dissipation issue hinders wide spreading technology paper propose architectural model wsn nodes complete design flow downto synthesizable vhdl based notion micro tasks approach combines hardware specialization power gating provide ultra low power solution wsn node design estimates power savings magnitude w.r.t mcu based implementations

chip sram caches dominate total chip leakage power consumed art microprocessor designs memories attain performance critical minimize idle currents drawn sram banks inactive proposes novel voltage reduction technique reduce sram leakage power standby mode design employs implicit voltage reduction method stacks sram banks series blocks inactive explicit dc dc converters required achieve reduced voltages leads reductions techniques requiring chip regulation circuits stacking technique reduces voltage block close absolute data retention voltage drv cell achieves maximum leakage power reduction 93 active power mode simulation results stability scheme corners process variations chip noise

system optimization techniques based dynamic voltage scaling dvs widely aim reducing processor energy consumption inter task dvs assigns voltage level instances task intra task counterpart exploits energy savings assigning multiple voltage levels task paper propose voltage scaling technique named predvs assigns voltage levels based task set's preemptive scheduling hard real time systems approach based approximation scheme hence guarantee generate solutions specified quality bound e.g 1 optimal existing inter intratask dvs techniques predvs exploits static time slack finer granularity achieves energy saving inter task scaling introducing extra voltage switching overhead moreover efficiently employed existing intra task scaling techniques experimental results demonstrate predvs significantly reduce energy consumption outperform optimal inter task voltage scaling techniques 24

measurement extraction fabricated sram cell variability essential process improvement robust design challenging practice due complexity test procedure requisite numerical analysis proposes singleended test procedure sram cell write margin measurement moreover efficient decomposition method developed extract transistor threshold voltage vth variations measurements allowing accurate determination sram cell stability entire approach demonstrated 90nm test chip 32k cells advantages proposed method include 1 single sram test structure disturbance sram operations 2 convenient test procedure requires quasistatic control external voltages 3 iterative method extracts vth variation transistor eight measurements procedure enables accurate predictions sram performance variability validated 90nm data write margin data retention voltage prediction error extracted vth variations lt 4 corners

method implementation enables design phase assessment statistical performance metrics semiconductor memories random local global process variations engineers tool reduce design margins maximize parametric yield results industry grade 45nm sram designs holistic approach significantly accurate alternatives based global corners critical path netlist lead unexpected yield loss

paper proposes comprehensive solutions clock tree synthesis provides pre bond testability 3d ic designs 3d ics essential stack dies testing individual dies stacking clock signaling pre bond testing requires complete 2d clock tree die previous enables prebond testability allocating specially designed resources called tsv buffers redundant trees transmission gates proposes viable solutions fundamental previous 1 using buffer resources preventing potentially bad tsv buffers tree topology generation algorithm 2 completely removing transmission gate control lines using specially designed component called self controlled clock transmission gate scctg compared existing 3d tree topology generation algorithms solution 1 56 88 tsvs 53 67 buffers 22 65 total wirelength 26 43 clock power benchmark circuits dense sink placements moreover solution 2 reduces total wirelength benchmark circuits 17 23 average 2 die 4 die stacked 3d ics respectively

clock skew optimization continues concern circuit designs overcome influence caused pvt variations automatic skew synchronization scheme dynamically adjust reduce clock skew chip manufactured key components skew synchronization scheme adjustable delay buffer adb phase detector pd previous researchers emphasized adb placement issues paper connection ffs pds greatly influence final clock skew due insertion pds analyze influence pd connection structures propose algorithm generate pd connection structure achieves minimum influence clock skew experimental results encouraging

top designers design engineering managers wish list current design design experience focus pie sky research topics describe earth challenges designers getting designs door panelists data experiences substantiate wish lists address main question change design flows design tools improve time market ttm design quality

cyber physical systems cps physical engineered systems operations monitored coordinated controlled integrated computing communication core internet transformed humans interact cyber physical systems transform interact physical world grand challenges await economically vital domains transportation health care manufacturing agriculture energy defense aerospace buildings design construction verification cyber physical systems pose multitude technical challenges addressed cross disciplinary community researchers educators

paper argues cyber physical systems sub stantial intellectual challenge requires changes theories computation dynamical systems theory cps union cyber physical intersection demands models embrace complementary approaches identified cyberizing physical ctp means endow physical subsystems cyber abstractions interfaces physicalizing cyber ptc means endow software network components abstractions interfaces represent dynamics time

discuss current trends development confidence medical cyber physical systems mcps trends including increased reliance software deliver functionality wider network connectivity mcps demand continuous patient monitoring bring challenges process mcps development time create opportunities research development

operating intersection multiple sensing control systems designed occupant comfort performability operational efficiency modern buildings represent prototypical cyber physical system deeply coupled embedded sensing networked information processing increasingly daily lives paper look modern buildings entirely cyber physical energy system examine opportunities joint optimization energy occupants information processing equipment paper makes contributions careful examination types buildings energy opportunities available improve energy efficient operation various strategies lighting computing using modern 150,000 sq feet office building closed system detail strategies reduce energy leed certification zero net energy

effective system verification requires specifications lack sufficient specifications lead misses critical bugs design re spins time market slips paper technique mining temporal specifications simulation execution traces digital hardware design execution trace mine recurring temporal behaviors trace match set pattern templates subsequently synthesize complex patterns merging events time chaining patterns using inference rules specifically designed algorithm highly efficient meaningful digital circuits addition propose pattern mining diagnosis framework specifications mined correct erroneous traces automatically localize error demonstrate effectiveness approach industrial size examples mining specifications traces million cycles minutes successfully localize errors types module boundaries

logical simulation primary method verify correctness ic designs today's complex vlsi designs pose demand throughput logic simulators parallel logic simulator developed leveraging computing power modern graphics processing units gpus expose parallelism implemented conservative parallel simulation approach cmb algorithm nvidia gpus simulation processing mapped gpu hardware finest granularity carefully designed data structures data flow organizations gpu based simulator overcome hindered efficient implementations cmb algorithm traditional parallel computers efficiently relatively limited capacity gpu memory novel memory management mechanism proposed dynamically allocate recycle gpu memory simulation introduced cpu gpu co processing strategy usage computing resources experimental results gpu based simulator outperform cpu baseline event driven simulator factor 29.2

paper approach generate test vectors characterize analog mixed signal circuits application check correspondence circuit hdl functional model interestingly abstract behavior analog circuits linear system sometimes viewed transformation variables linearity holds validation consistency circuit model efficiently performed set test vectors grows linearly analog inputs linear abstraction analog circuits helps distinguish types analog digital ports verify consistency effectively demonstrate implemented tool comparing simple serial link receiver functional model

recent research indicated using upf specifications extracting valid low level control sequences express transitions power individual domains disconnect level architectural power management strategy relates multiple power domains low level assertions controlling individual power domains paper attempt bridge disconnect leveraging low level domain assertions translating architectural power intent properties global assertions low level signals inter domain properties created manner formally verified global power management logic

paper efficient algorithm post synthesis logic simulation digital circuits oscillatory combinational loops oscillatory combinational loops significantly degrade performance cycle accurate logic simulators provide algorithm dynamically detects oscillatory loops introduce novel approach compute multiple oscillation period optimize efficiency simulation reducing time evaluated finally provide experimental results optimized algorithm measured cycle accurate simulator conjunction hardware emulator

transistor sizing classic computer aided design received attention literature due increasing importance process variations deep sub micron circuits nominal circuit tuning sufficient sizing warrants revisiting paper addresses sizing statistically transistor sizes automatically adjusted maximize parametric yield timing performance maximize performance required parametric yield specifically describe implementation statistical tuner using interior nonlinear optimization objective function directly dependent statistical process variation results process variation sensitive circuits consisting thousands independently tunable devices statistically aware tuner robust yield solutions compared deterministic circuit tuning attractive alternative monte carlo methods typically size devices circuits knowledge publication system optimize device sizes custom circuits using process variation aware tuner

existing industry practice statistical static timing analysis ssta engines black box gate level models standard cells accuracy require massive amounts cpu time monte carlo mc simulation paper transistor level monte carlo statistical analysis method based solving random differential equations rde computed modified nodal analysis mna maintain accuracy efficiency introduce simplified statistical transistor model 45nm technology below model combined simulation engine implicit mc statistical simulation deterministic simulation fast accurately statistics delay slew calculated means proposed analysis method experiments proposed method run time efficient accurate

exploit benefits throughput optimized processors gpus applications redesigned achieve performance efficiency techniques speed statistical timing analysis throughput processors draw advancements improving efficiency monte carlo based statistical static timing analysis mc ssta using techniques reduce sample size smart sampling techniques efficient smart sampling technique stratification hybrid quasi monte carlo sh qmc implemented gpu based nvidia cuda architecture application based mc analysis straightforward parallelism available achieving performance efficiency gpu requires exposing parallelism finding locality computations contrast random sampling based algorithms inefficient terms sample size resources utilized gpu sh qmc implemented multi gpu twice fast single sta cpu benchmark circuits considered terms efficiency metric measures ability convert reduction sample size corresponding reduction runtime w.r.t random sampling approach achieve 73.9 efficiency proposed approaches compared 4.3 implementation involving performing computations smart samples parallel contribution paper critical graph analysis technique improve efficiency monte carlo based ssta leading 2 9x speedup

paper static timing analyzer flexible tft circuits staf gate delay models characterized spice simulation function load capacitance mobility block based sta algorithm applied identify path delay shortest path delay change regions bending staf plots maps bending hot spots bended significantly change circuit timing experimental results iscas 89 benchmark circuits path delay increase 32 single region bended worse shortest path change 9 simply fixed reduced clock speed staf provides timing information flexible tft circuit designers

geometry shrinking severe limitations 3d wafer stacking silicon via tsv gained future soc integration tsv fill material silicon coefficients thermal expansion cte tsv causes silicon deformation due temperatures chip manufacturing operating widely tsv fill material copper causes tensile stress silicon near tsv paper propose systematic tsv stress aware timing analysis optimize layout performance generate stress contour map analytical radial stress model tensile stress converted hole electron mobility variations depending geometric relation tsvs transistors mobility variation aware cell library netlist generated incorporated industrial timing engine 3d ic timing analysis observe rise fall time react stress relative locations respect tsvs overall tsv stress induced timing variations plusmn 10 individual cell application layout optimization exploit stress induced mobility enhancement improve timing critical cells stress aware perturbation reduce cell delay 14.0 critical path delay 6.5 test

paper system online power prediction virtualized environments based gaussian mixture models architectural metrics physical virtual machines vm collected dynamically system predict physical machine vm level power consumption real implementation system achieve average prediction error 10 outperforming art regression based approaches negligible runtime overhead

paper describes fast automated technique accurate line estimation performance power consumption interacting processes multi programmed multi core environment proposed technique require modifying hardware applications performance model reuse distance histograms cache access frequencies relationship throughput cache miss rate process predict throughput system level power model derived using multi variable linear regression accounting cache contention models validated multiple real multi core systems using spec cpu2000 benchmarks performance power estimates 3.5 measured values average explain integrate models power estimation process assignment helpful power aware assignment

primary backup pb model widely model reliability dual processor real time systems recent literature focussing minimizing energy consumption periodic task sets executing systems major drawbacks ignore effects frequency scaling fault arrival rates paper modified primary backup model dual processor systems aims maintain reliability employing power management techniques minimize overall energy consumption furthermore proposed approach exploits uncertainties execution time real time tasks predict available slack energy management proposed modified pb based reliability aware power management rapm approach tested synthetic task sets homogeneous heterogeneous dual processor systems simulation results achieve 67 savings expected energy consumption low utilization task sets 32 savings utilization task sets loss reliability heterogeneous dual processor systems

conventional cad methodologies optimize processor module correct operation prohibit timing violations nominal operation paper propose recovery driven design design approach optimizes processor module target timing error rate instead correct operation significant power benefits recovery driven design flow deliberately allows errors caused voltage overscaling 10 3 occur nominal operation relying error recovery technique tolerate errors detailed evaluation analysis cad methodology minimizes power processor module target error rate demonstrate power benefits 25 19 22 24 20 28 20 versus traditional error rates 0.125 0.25 0.5 1 2 4 8 respectively coupling recovery driven design error recovery technique enables increased efficiency additional power savings

integrating chip voltage regulators holds promise solving power delivery challenges strong local load regulation facilitates system level power management quantitative understanding complex power delivery networks pdns hampered network complexity interactions passive die package level circuits multitude nonlinear active regulators develop fast combined gpu cpu analysis engine encompassing simulation strategies optimized various subcomponents network using accurate quantitative analysis demonstrate significant performance improvement brought onchip low dropout regulators ldos terms suppressing frequency local voltage droops avoiding mid frequency resonance caused chip inductive parasitics perform comprehensive analysis tradeoffs overhead chip ldos maximum voltage droop overall power efficiency conduct systematic design optimization developing simulation based nonlinear optimization strategy determines optimal chip ldos required board input voltage corresponding voltage droop power efficiency pdns multiple power domains

vectorless power grid verification makes evaluate worst voltage drops enumerating current waveforms linear current constraints vectorless power grid verification formulated solved linear programming lp previous approaches suffer runtime due size paper design dualvd algorithm efficiently computes worst voltage drops rc power grid algorithm combines novel dual approach solve lp preconditioned conjugate gradient power grid analyzer dual approach exploits structure simplify dual convex solved cutting plane method experimental results algorithm extremely efficient takes hour complete verification power grid 50k nodes takes 1 verify node power grid 500k nodes

decoupling capacitor decap placement widely adopted effective suppress dynamic power supply noise traditional decap budgeting algorithms usually explore sensitivity based nonlinear optimizations conjugate gradient methods prohibitively expensive scale decap budgeting hierarchical cross entropy ce optimization technique solving decap budgeting ce advanced optimization framework explores power rare event probability theory importance sampling achieve efficiency sensitivity guided cross entropy sce algorithm proposed integrates ce partitioning based sampling strategy effectively reduce dimensionality solving scale decap budgeting extensive experiments industrial power grid benchmarks proposed sce method converges 2x faster prior methods 10x faster standard ce method gaining 25 improvement power grid supply noise importantly proposed sce algorithm parallel friendly simulation samples sce iteration independently obtained parallel obtain 1.9x speedup running sce decap budgeting algorithm dual core dual gpu system

nbti major aging mechanism advanced cmos technology pbti looming concern proposes compact chip sensor design tracks nbti pbti logic sram circuits embedded sram array sensor takes form 6t sram cell 30x previous designs extensively reusing sram peripheral circuitry minimizes control logic overhead sensing overhead amortized sensors reconfigured recycled functional sram cells potentially increasing sram yield bit cells fail due initial process variation time aging effects paper proposes variation aware sensor system design methodology quantifying leveraging tradeoff size sensors system sensing precision design examples system 500 sensors achieve 4mv precision 98.8 confidence system 1k sensors designed 1m sram bit cells achieves 2000x overhead reduction compared worst based approach

reliability analysis sram core cells requires statistical methods accuracy cope low failure probabilities statistical methods recently proposed knowledge method able evaluate joint failure probability probability failure mechanism occurs sram core cell accuracy reasonable time propose statistical simulation method based analytical integration multivariate gaussian distribution function

2010 30 world's top semiconductor systems companies adopted hls 2009 socs tape outs containing ips developed using hls exceeded 50 time practicality value hls established engineers question input language answer critical drives key decisions regarding tool methodology infrastructure companies create flow ansi advocates cite ease learning simulation speed systemc advocates similar claims systemc's hardware oriented features proponents bsv bluespec systemverilog claim language enhances architectural transparency control maximize benefits hls companies consider factors tradeoffs

stochastic computation paper exploits statistical nature application level performance metrics matches statistical attributes underlying device circuit fabrics nanoscale circuit fabrics viewed noisy communication channels networks communications inspired design techniques based estimation detection theory proposed stochastic computation advocates explicit characterization exploitation error statistics architectural system levels paper traces roots stochastic computing von neumann era current form design cad challenges described

advent mainstream parallel computing applications obtain performance scaling platforms larger cores widely considered challenging due difficulty parallel programming bottlenecks efficient parallel execution inspired networking storage systems scaled handle volumes packet traffic persistent data propose approach design scalable parallel computing platforms decades computing platforms gone lengths ensure computation specified applications faithfully executed design philosophy remained unchanged applications basic characteristics workloads changed considerably wide range existing emerging computing workloads inherent forgiving nature argue adopting effort service model various software hardware components computing platform stack lead drastic improvements scalability applications cognizant effort model separate computations executed effort basis require traditional execution guarantees effort computations exploited simply reduce computing workload shape suitable parallel execution execute unreliable hardware components guaranteed computations realized overlay software layer top effort substrate application specific strategies describe system architecture effort computing platform provide examples parallel software hardware embody effort model improvements performance energy efficiency adoption approach

technological achievements fabricate cmos circuits billion transistors implement boolean operations using quantum devices spin electron implement transformations using bio molecular based cells technologies due factors process variations defects impurities materials solutions noise consequently systems built technologies operate imperfectly luckily complex market systems applications tolerate acceptable correct results addition emerging body mathematical analysis related imperfect computation paper introduce concepts acceptable error tolerance acceptable performance degradation demonstrate attributes concepts quantified interlace discussion examples systems effectively employ concepts mention immerging technologies motivate study concepts related mathematical paradigms finally list cad issues support form technological revolution

memristor fourth basic terminal circuit element attracted research real device developed hp labs 2008 nano scale memristive device potential construct novel computing systems distinctive characters volatility linearity low power scalability electrical characteristics memristors mainly determined material characteristic fabrication process example process variations cause deviation actual electrical behavior memristors original design result malfunction device understand characterize impact process variations electrical behaviors memristor implication circuit design paper analyze impact geometry variations electrical characteristics memristor parameters nard normalized accumulative resistance deviation naard normalized accumulative absolute resistance deviation introduced measure fluctuation overall internal resistance memristor impact process variations based analysis monte carlo simulations conducted evaluate device mismatch effects memristor based memory

paper introduce novel reconfigurable graphene logic based graphene junctions logic device switching accomplished using co planar split gates modulate properties unique graphene including ambipolar conduction electrostatic doping angular dependent carrier reflection addition control gates dynamically change operation device leading reconfigurable multi functional logic device model derived carrier transmission probability junction allowing quantitative comparison cmos logic based model proposed graphene logic significant advantages cmos gate terms delay power product signal restoration maintaining similar footprint furthermore device utilizes graphene sheet minimal patterning allowing feasible integration cmos circuits potential cmos graphene hybrid circuits

carbon nanotubes cnts grown using chemical synthesis exact positioning chirality cnts difficult control result width carbon nanotube field effect transistors cnfets probability containing semiconducting cnts resulting cnfet failures upsizing vulnerable width cnfets expensive design choice result substantial power penalties paper introduces processing design co optimization approach reduce probability cnfet failures chip level degree spatial correlation observed directional cnt growth unique opportunity optimization maximum benefits correlation realized enforcing active regions cnfets aligned approach relaxes device level failure probability requirement 350x 45nm technology node leading significantly reduced costs associated upsizing width cnfets

nano electro mechanical switches nems promising emerging devices due near zero subthreshold leakage currents paper reports device fabrication modeling novel logic gate design using laterally actuated double electrode nems structures device structure advantages existing nems architectures immune impact bouncing release vibrations unlike vertically actuated nems offer flexibility implement compact logic gates unlike single electrode nems comprehensive analytical framework developed model properties devices solving euler bernoulli's beam equation proposed model validated using measurement data fabricated devices shown ignoring uniformity electrostatic force distribution existing models underestimate actual value vpull vpull furthermore novel energy efficient nems based circuit topologies introduced implement compact inverter nand nor xor gates instance proposed xor gate implemented using nems devices compared static cmos based xor gate requires 10 transistors

paper propose novel multi mode multi corner sparse regression msr algorithm build scale performance models integrated circuits multiple modes environmental corners goal efficiently extract multiple performance models cover modes corners simulation samples efficient bayesian inference shared prior distribution i.e model template developed explore strong performance correlation modes corners achieve modeling accuracy low computational cost industrial circuit examples demonstrate proposed msr achieves 185x speedup squares regression 14 6.7x speedup angle regression 7 surrendering accuracy

traditional yield enhancement approaches lot computation efforts paid feasible regions pareto fronts heavy cost analog circuits reduce computation efforts tries finish iteration steps yield enhancement flow behavior level novel force directed nominal moving npm algorithm proposed nominal building feasible regions equation based behavior level sizing approach proposed map npm results performance level behavior level parameters fast behavior level monte carlo simulation proposed shorten iterative yield enhancement flow finally using obtained behavioral parameters sizing targets sub block device sizing time significantly reduced instead sizing system level specifications directly demonstrated complex cppll design behavior level approach efficient methodology help designers improve analog circuits yield

variations shrunk processes increasing rapid rate performances analog mixed signal chips remarkably fluctuate yield design objective design optimization paper novel method generate yield embedded pareto front simultaneously optimize yield performances unlike traditional approaches generate yield aware pareto front optimize performances fixed yield embeds yield objective optimization evolutionarily optimizes yield performances called yield embedded nsga experiments demonstrate gradual evolutions global searching performances yields pvt variations generation accelerated parallel computations gains 4.8x speedup 80 efficiency

convex weighted sum method multi objective optimization desirable property worsening difficulty optimization lead nonuniform sampling paper explains relationship weights partial derivatives tradeoff surface choose weights uniformly sample convex tradeoff surfaces proposes novel method derivative pursuit dp iteratively refines simplicial approximation tradeoff surface using partial derivative information guide weights generation demonstrate improvements offered dp synthetic circuit test including 22 nm sram bitcell design strict read write yield constraints power performance objectives

dimensional 3d cmos imager constructed stacking pixel array backside illuminated sensors analog digital converter adc array image signal processor isp array using micro bumps mu bumps silicon vias tsvs promising throughput applications due direct mapping pixels isps overall yield relies heavily correctness mu bumps adcs tsvs single defect leads information loss tile pixels paper error tolerance scheme 3d cmos imager deliver quality images presence mu bump adc tsv failures error tolerance achieved properly interleaving connections pixels adcs corrupted data recovered isps key design parameter interleaving stride decided analyzing employed error correction algorithm architectural simulation results demonstrate error tolerance scheme enhances effective yield exemplar 3d imager 46 99

magnetic random access memory mram volatile memory widely studied speed density cell size unlimited endurance deep submicron process technologies significant variation mram cells operating regions results write failures cells reduces production yield currently memory designers characterize failed mram chips suitable current level reconfiguring operating current time consuming paper propose efficient operating current search method built circuit toggle mram rapidly customized operating current mram chip built circuit mram chip dynamically reconfigure operating current automatically production yield product life time increased

exploit reconfigurability recent digital pll designs provide novel situ output jitter test diagnosis abilities multiple parametric variations key analog building blocks digital signatures collected processed specifically designed loop filter configurations facilitate low cost accuracy performance prediction diagnosis

considerable industry smart phones economy sales smart phones rising promising shake future mobile communication players involved seeking differentiate themselves market space improved energy management key focus paper focuses smart phone power

paper explores meaning smart grid concluding term closely linked enhanced sensing actuation control power systems suggested cyber physical systems meaningfully described responsive grids paper provides brief historical perspective decision underlies existing seemingly inflexible grid structures emphasizes future responsive grids consequence inevitable growth renewable generation types loads plug electric vehicles paper considers cyber infrastructure requirements supporting controllability highly distributed generation load resources

power grids die scale dimensions operate transient manner difficult predict compared larger power grids single excitation detailed model understand dynamic effects occurring inside die terms localized voltage droop scenarios major portion understanding die power grids modeling current stimulus pre silicon design purposes generating set activities via instructions post silicon excite worst voltage droop chip especially microprocessor contains potential transitions simulate enumerate spectral based learning optimization method alleviate pre silicon micro architectural based test generation scheme help alleviate post silicon

fulfill continuously rising communication demands vehicles usage ethernet vehicle network planned offering bandwidth robustness market penetration automotive industry strong requirements respect safety reliability hence introduction technologies usually evolutionary approach implies introduction ethernet gateway currently existing automotive networking technologies required achieving smooth migration paper concept gateway maintaining quality service qos offered existing automotive networks proposed support level qos usage ethernet audio video bridging avb suggested implementation qos gateway investigated specifically automotive networks flexray evaluation proposed concepts validation system built promising results feasibility qos gateway achieved furthermore implies avb capability replace automotive network technologies midterm

current vehicles control units connected automotive specific communication buses facilitating innovative distributed applications time computers entertainment devices ip commodity communications technology ethernet connect internet allowing innovative solutions maintaining fast innovation cycles applications ethernet vehicle communication contemporary cars generation vehicles innovative applications benefit increased bandwidth ethernet offer examination ethernet usage additional vehicle communication paper simulation results promising car ethernet looking realistic topologies types traffic configurations

development vehicle software controlling safety critical functions related braking steering transmission systems requires rigorous techniques ensure integrity reliability requirements formal models requirements design artifacts based transition systems formalisms serve means apply rigorous analysis verification techniques stage development process formal analysis verification flow developed motors provide overview methods automatic test generation based mathematical modeling discuss future directions research

write constraints multi level cell mlc nand flash memory existing flash translation layer ftl schemes inefficient inapplicable paper solve fundamental design mlc flash translation layer objective reduce garbage collection overhead reduce average system response time key observation valid page copy essential garbage collection overhead based observation propose approaches namely concentrated mapping postponed reclamation effective reduce valid page copies conduct experiments set benchmarks real world synthetic traces experimental results scheme achieve significant reduction average system response time compared previous

using device write buffers promising technique improve write performance solid disks write buffer reduces write traffic flash produces sequential write bursts underlying flash translation layer study proposes buffer design consisting replacement policy write policy buffer monitors host workload stresses flash translation layer garbage collection dynamically adjusts replacement write strategies balance write sequentiality traffic reduction experimental results proposed buffer design outperformed existing approaches 20 various workloads flash translation algorithms

recent reliability critical issue designs flash file systems due growing unreliability advanced flash memory chips paper version based strategy optimal space utilization proposed maintain consistency page versions file potential recovery considerations write constraints multi level cell flash memory series experiments conducted proposed strategy improve reliability flash file systems limited management space overheads

flash memory quickly becoming common component computer systems ranging music players mission critical server systems flash plays role data integrity flash memories critical question paper examines aspect data integrity measuring types errors occur power fails flash memory operation findings demonstrate power failure lead intuitive behaviors increasing time power failure reduce error rates power failure program operation corrupt data previous successful program operation wrote device data interrupted program operations leave data susceptible read disturb increase probability programmed data decay time finally incomplete erase operations future program operations block unreliable

cope variations uncertainties emanate hardware application characteristics dynamic power management dpm frameworks able learn system inputs environment adjust power management policy fly paper online adaptive dpm technique based model free reinforcement learning rl commonly control stochastic dynamical systems particular employ temporal difference learning semi markov decision process smdp model free rl addition novel workload predictor based online bayes classifier provide effective estimates workload rl algorithm dpm framework power latency tradeoffs precisely controlled based user defined parameter experiments amount average power saving increase latency 16.7 compared reference expert based approach alternatively request latency reduction power consumption increase 28.6 compared expert based approach

paper introduce integrated power methodology multi core soc designs features bottom ip based power modeling kinds ip components ranging hardware accelerators processors memory blocks top system wide esl power estimation formulation linking methods levels abstraction thereby easily profile power consumption multi core soc running complete application retaining accuracy estimation realized proposed methodology software tools 1 powermixer sup ip sup ip based power model builder strategies build versatile power models ips processor ips 2 powerdepot esl power estimation tool interact users simple generate power monitors embedded esl design systemc super fast power estimation facilitate stage system wide power profiling application tools dual core real life designs executing 264 average error esl power estimation 2 speedup 2400x comparing gate level simulation

unlike liquid crystal display lcd panels require intensity backlight organic led oled display panels naturally consume low power provide image quality thanks self illuminating characteristic spite oled display panel dominant power consumer battery operated devices result attempts reduce oled power consumption power consumption pixel oled display depends color displays previous power saving methods change pixel color subject tolerance level color distortion specified users practice oled power saving techniques common user applications photo viewers movie players paper introduces oled power saving technique result significant degradation color luminance values displayed image proposed technique based dynamic driving voltage scaling dvs oled panel proposed dvs technique degrade luminance panel panel luminance restored appropriate image compensation consequently power saved oled display panel minor changes color luminance image technique similar dynamic backlight scaling lcds based unique characteristics oled drivers proposed method saves wasted power driver transistor internal resistance amplitude modulation driver internal resistance pulse width modulation driver respectively experimental results proposed oled dvs image compensation technique saves 52.5 oled power keeping human perceived image quality lena image

hybrid main memory consisting dram volatile memory attractive volatile memory advantage low standby power dram provides performance active power address power management hybrid main memory consisting dram phase change ram pram reduce dram refresh energy occupies significant portion total memory energy runtime adaptive method dram decay addition methods dram bypass dirty data keeping reduction refresh energy memory access latency respectively experiments reducing dram refreshes obtain 23.5 94.7 reduction energy consumption negligible performance overhead compared conventional dram main memory

design manufacturability dfm inevitable formidable challenges encountered nano scale integrated circuit ic manufacturing unfortunately difficult designers understand cost benefit tradeoff tuning design dfm achieve manufacturability attempts assist designer aspect providing methodology called radar rule assessment defect affected regions failing ic diagnosis results systematically evaluate effectiveness dfm rules radar applied fail data 90nm nvidia graphics processing unit gpu demonstrate viability specifically evaluation via enclosure rules revealed metal layers 3 6 remaining layers

self aligned double patterning sadp lithography promising technology reduce overlay print 2d features sub 32nm process decompose layout minimize overlay perform hot spot detection paper algorithm optimally solve sadp decomposition decomposable layout algorithm guarantees decomposition solution minimizes overlay decomposable layout algorithm guarantees hot spots experimental results validate method decomposition results nangate cell library larger testcases provided competitive runtimes

paper approach statistical characterization standard cells based combination statistical design experiments doe response surface modeling unlike art sensitivity analysis sa techniques currently offered eda vendors doe preserves underlying correlation process variation parameters results magnitude statistical accuracy improvement features electrical simulation effort linear cell complexity technique validated using representative subset standard cells using 32nm statistical physical design kit

propose regular layout fabric practical industrial random logic design cell synthesis algorithms specialized fabric results industrial test physical synthesis onto library extremely regular cells results 7 increase leakage comparison traditional standard cells using fabric based cell synthesis system allows overall allowing upper layer routing achieve 4 routable die size reduction simultaneous cell synthesis custom m1 routing

processor level dynamic thermal management techniques targeted worst thermal margins examine thermal performance trade offs average preventive thermal management actively degrading application performance achieve term thermal control propose dimetrodon idle cycle injection flexible thread technique preventive thermal management mechanism demonstrate efficiency compared hardware techniques commodity operating system real hardware throughput latency sensitive real world workloads compared inflexible hardware techniques dimet rodon achieves favorable trade offs temperature reductions 30 due rapid heat dissipation short idle intervals

multimedia applications expected form largest portion workload purpose pc portable devices increasing computation intensity multimedia applications elevates processor temperature consequently impairs reliability performance system paper propose perform dynamic thermal management using reinforcement learning algorithm multimedia applications proposed learning model prior knowledge workload information system thermal power characteristics learns temperature change workload switching patterns observing temperature sensor event counters processor management policy provides performance thermal tradeoff runtime validated model dell personal computer intel core 2 processor experimental results approach provides considerable performance improvements marginal increase percentage thermal hotspot comparing existing workload phase detection approach

objective power modeling estimate power consumption integrated circuits workloads variabilities post silicon power modeling essential step design validation building trustable pre silicon power models analyses popular approach devising post silicon power estimates translate thermal emissions backside die power estimates approach major physical challenge arising spatial heat diffusion blurs resultant thermal images objective paper improve post silicon power mapping utilizing lock thermography techniques ac signals dc signals excite circuit blocks prove demonstrate using ac excitation sources reduces extent spatial heat diffusion devise lock based thermal power inversion methodology maps spatial power consumption real chip using custom test chip able scientifically quantify validate improvements power mapping attained proposed techniques technique reduces power mapping errors half

floorplanning potential reduce chip temperature due conductive nature heat floorplan optimization usually based simulated annealing employed reduce temperature evaluation extremely fast accuracy thermal index named thermal signature proposed approximates temperature calculation taking product green's function power density integrated space correlation coefficient thermal signature temperature shown 0.7 examples floorplanner thermal signature constructed assessed using real design examples 32 nm technology produces floorplan maximum temperature 11.4 deg standard floorplan average reasonable amount runtime

growing complexity synthetic biological circuits robust systematic methods design test leveraging lessons learned semiconductor design automation industries synthetic biologists starting adopt computer aided design verification software success due challenges associated designing synthetic biological circuits nascent approach address electronic circuits session leading synthetic biologists share developed software tools help design verify synthetic circuits unique challenges insights generation tools synthetic biology

kahn process network kpn model widely model computation specify map streaming applications onto multiprocessor systems chips kpns difficult analyze design time special kpn model called polyhedral process networks ppn proposed address analyzability issue ppn model able capture adaptive dynamic behavior behavior usually expressed using parameters values reconfigured run time model adaptive dynamic applications paper introduce extension ppn model called parameterized polyhedral process networks sup 3 sup provides design time analyzability extent formally define sup 3 sup model operational semantics addition devise design time analysis extract relations parameters based analysis propose approach ensure consistent execution sup 3 sup model preserved run time using fpga based mpsoc platform performance evaluation overhead caused run time reconfiguration

prevalence stream applications signal processing multi media network processing domains resulted trend programming architecture design languages multicore architectures developed support streaming applications multicore architectures scratchpad memories spm substituted caches due lower power consumption performance optimization spm based architectures requires programmer compiler efficiently manage limited local memory paper addresses compilation stream programs onto multicore architectures incorporate spms propose retiming technique maximizes throughput memory constraint user specified software pipeline stages trade offs double buffering code overlay explored intensively technique achieve performance efficiency technique evaluated compiling stream applications ibm cell comparing results existing approaches

cuda programming model provides simple interface program gpus tuning gpgpu applications performance challenging programmers consider architectural details changes source code especially memory access pattern affect performance significantly paper cumapz tool compare memory performance cuda program cumapz help programmers explore using shared global memories optimize program memory behavior cumapz models memory effects e.g data reuse global memory access coalescing shared memory bank conflict channel skew branch divergence using cumapz explore memory access design space improve performance benchmarks 62 naive 32 previous approach 8

processor's performance power consumption tied increased performance demands power vice versa optimal tradeoff achieved improved prediction task execution times prior efficient scheduling moreover processor's soft error rate function operating voltage linked performance power trade situation complicated multicore architectures tasks mapped separate cores processing elements paper proposes joint space model achieve improved task execution time estimation leading scheduling optimizing trade particularly context multicore soft real time systems assume priori knowledge task graph properties independent underlying architecture learns system dynamics time space solution formulated using recursive implementation online monte carlo method obtained estimates execution times compensated soft error according soft error rate beginning scheduling interval low power edf scheduling decision carried execute tasks proposed method seal achieves 29 energy savings compared art deadline misses 7 loss system failure probability results obtained advantage terms energy savings

metal eco prevalent design houses perform incremental design changes resolve found functional timing failures hard perform mixed functional timing changes manually prior endeavors focus functional timing eco observe separating fail fix timing violations consequently paper perform simultaneous functional timing eco augmented bipartite graph model types eco addition comprehensive constant insertion bridging functional capability spare cell enhanced facilitating spare cell selection experimental results simultaneous functional timing eco engine successfully resolve mixed functional timing eco unsolvable sequential scheme moreover engine outperforms art timing eco 117x speedup functional eco 6 15 wirelength reductions

cope minute design bugs specification changes engineering change eco usually performed design process paper proposes automatic eco synthesis algorithm interpolation particular tackle series partial rectifications step partial rectification reduce functional difference implementation specification algorithm especially effective multiple error circuits experimental results proposed method superior recent scales set circuits

clock skew scheduling effective technique improve performance sequential circuits process variations difficult implement clock delays precise manner multi domain clock skew scheduling overcome limitation paper prove np completeness multi domain clock scheduling design practical optimal algorithm solve domain bound skew assignments develop optimal algorithm efficient pruning techniques experiment results iscas89 sequential benchmarks optimality efficiency method compared existing approaches

transistor feature size continuously scaled integrated circuits vulnerable process voltage temperature pvt variations causing infrequent timing errors various techniques proposed tackle circuit level timing speculation promising solutions directly applying technique costly terms overhead energy consumption paper propose cost efficient re synthesis solutions tackle try reduce suspicious flip flops ffs timing errors retiming techniques relocate suspicious ffs increasing critical path delay efficient effective algorithm utilized pad short paths linking remaining suspicious ffs ensure functional correctness timing speculators experimental results proposed solution achieve significant reduction timing speculation

paper exact algorithm construction obstacle avoiding rectilinear steiner minimum trees oarsmts complex rectilinear obstacles propose geometric approach optimally solve oarsmt complex obstacles optimal solution constructed concatenation steiner trees fsts complex obstacles proven simple structures paper algorithm able handle complex obstacles including convex concave ones benchmarks hundreds terminals obstacles solved optimally reasonable amount time

physical design vlsi circuits routing tasks usually towards design process especially detailed routing phase obey virtually design rules feature size shifts towards gridless design paradigms formerly trivial task namely pin access difficult discusses gridless pin access particular create feasible efficient gridless routing approach fit existing gridded routing flows creating practical overall routing solution key ingredient approach explicitly addresses design rule conform shortest paths geometric obstacles taking violations paths themselves consideration furthermore redundancy exploiting structures called circuitclasses introduced based improvements described evaluated approach current gridless designs respective results routing performance improved greatly respect runtime quality results

bus escape routing critical modern pcb design due huge pin count density pin array usually requires multiple layers route buses conflict assign escape routing buses layers issue addition buses required assigned consecutive layers adds difficulties layer assignment paper propose branch bound based algorithm optimally solves layer assignment bus escape routing algorithm guarantees produce feasible layer assignment buses minimum layers applied algorithm industrial data experimental results validate approach

paper introduces novel distributed algorithm performing layout geometry operations usually found design rule checking layout verification mask synthesis typically mask synthesis flow machines available user multiple machines cores ubiquitous designers using layout verification tools access set machines efficient scalable distributed algorithm performing sequences layout geometry operations value designer mask synthesis engineer paper seeks algorithm layout sequence layout geometry operations layout divided partitions sequence layout geometry operations executed parallel partitions partitions merged systematic manner sequence operations repeated suitable set polygons newly derived partitions partition covers entire layout obtained key feature proposed algorithm correct construction i.e partition guaranteed generate subset correct results complete correct results generated layout geometry operation entire layout operation completes execution partitions results industrial layouts promising performance scalability

propose efficient accurate chip thermo mechanical stress reliability analysis tool design optimization methodology alleviate mechanical reliability issues 3d ics analyze detailed thermo mechanical stress induced tsvs conjunction various associated structures landing pad dielectric liner explore validate linear superposition principle stress tensors demonstrate accuracy method detailed finite element analysis fea simulations apply linear superposition method chip stress simulation reliability metric named von mises yield criterion finally propose design optimization methodology mitigate mechanical reliability 3d ics experimental results demonstrate effectiveness methodology

accurate characterization spatial variation essential statistical performance analysis modeling post silicon tuning yield analysis existing approaches spatial modeling assume stationarities arise due smoothly varying trend component ii process stationary regions associated predefined grid assumptions hold profiling classes variations recent modeling studies suggest stationarities arise shifts process mean fluctuations variance process provide compact model stationary process variations introduce hybrid spatial modeling framework models spatially varying random field union overlapping rectangular regions process assumed locally stationary region estimate parameters hybrid spatial model develop host techniques estimate change random field appropriate partitioning chip disjoint regions field locally stationary verify models results measurements collected 65nm fpgas

statistical analysis sram emerged challenging issue failure rate sram cells extremely paper develop efficient importance sampling algorithm capture rare failure event sram cells particular adapt gibbs sampling technique statistics community optimal probability distribution importance sampling minimum computational cost i.e transistor level simulations proposed gibbs sampling method applies integrated optimization engine adaptively explore failure region sampling sequence dimensional probability distributions implementation issues dimensional random sampling starting selection carefully studied gibbs sampling method efficient accurate sram failure rate prediction experimental results commercial 65nm sram cell demonstrate proposed gibbs sampling method achieves 3 10x runtime speed art techniques surrendering accuracy

linear complexity direct matrix solution developed surface integral based impedance extraction arbitrarily shaped 3 ideal conductors embedded dielectric materials outperforms art impedance solvers fast cpu time modest memory consumption sacrificing accuracy inverse 2.6 million unknown matrix arising extraction scale 3 interconnects obtained 1.5 gb memory 1.3 hours 3 ghz cpu

technology scaling provided semiconductor industry recipe successfully meet application demands performance decades computational capacity fueled success circuit architecture level innovation provided performance improvement processor generation future processor designs key challenges sustaining growth trends dawn 22nm node beyond marks era trends challenges cost complexity associated technology node increasing faster rate device performance gains novel tools design methodologies compensate challenges leverage emerging technologies achieve desired performance future processor architectures technology alternatives 3d integration attracted significant additional sustaining density scaling performance growth 3d integration provides unique benefits processor design packaging density interconnect bandwidth latency modularity heterogeneity packaging density improvement provided 3d continue improvements processing storage capacity enabling gradual shift towards integrating system stack silicon vias tsvs provide lower latency bandwidth improves interconnect limited performance 3d enables modular design variety systems shared set sub components functional separation device layers result layers independently manufactured cost effective stacked compose wide range customized systems optimizing layer interfaces infrastructure components power delivery clocking enhance inherent modularity advantages 3d provides opportunities composing future systems integrating disparate technologies technology generations stack incorporate wide range device layers including volatile memory layers mems fpgas dram photonics stack easing io chip bandwidth limitations provides opportunity enable processor architectures computation storage communication capabilities system level benefits 3d determined significant degree effectiveness novel design methodologies explore design space introduced vertical dimension design flow optimization essential achieving performance gains tackling prominent interdependencies performance power dissipation temperatures interconnectivity reliability 3d presentation highlight challenges opportunities

dimensional integration complements semiconductor scaling enables integration density heterogeneous technology integration using 3d chip stacking extend functions 3d chip beyond near term capabilities traditional scaling 3d strata realized using advanced cmos technology nodes exploit wide variety device technologies optimize system performance 3d electronic circuits field microelectronics community wide variety approaches proposed equally wide variety applications approaches categorized based intersection interconnect hierarchy chip package local global interconnect bond pad level package board level paper focus 3d interconnects using si vias allow interconnectivity chip global interconnect level physical dimensions tsvs 5 mu diameter 50 mu deep placed minimum pitch 10 mu study development 3d system integration requires concurrent exploration technology design particularly considering heterogeneous systems exploiting technologies integrated single ic process 3d technology density tsv's allow seamless integration circuit blocks ip blocks technologies manner traditional soc architecture resulting 3d soc implementation concurrently designed ic's heterogeneous technologies 3d integration approach cost effective consider potential compound yield risks adopting appropriate testing die strategies path finding design flow 3d implemented enables study system level trade offs phase system design path finding design flow physical characteristics 3d stacked circuit implementation accounted includes detailed electrical models tsv mu bump interconnections compact mechanical models account impact mechanical stresses inducted buy tsv neighboring components mechanical stresses imposed package compact thermal models allow fast estimation chip temperatures die 3d stack

technology scaling continue doubling transistor integration capacity providing billions transistors enable novel systems 3d integration technology doors changing landscape allowing heterogeneous integration diverse technologies abundance energy efficient interconnects realize affordable complex systems continue deliver performance paper exploit technology energy efficient system designs

dimensional 3d semiconductor circuit integration active research recently driving force applications paper identify applications drive 3d integration challenges bring particular focus silicon via based tsv based 3d integration tsv based 3d integration genre opportunities semiconductor integrated circuits brief overview tsv based 3d technology overview identify driver applications dominant transition challenges manufacturing i.e thermal reliability eda cost test

mutation testing suffers computational cost automated test vector generation due mutants derived programs cost generating test white box manner propose novel algorithm mutation based test generation simulink models combines white box testing formal concept analysis exploiting similarity measures mutants able effectively generate sets short test achieve coverage collection simulink models automotive domain experiments algorithm performs significantly random testing simpler mutation testing approaches

cryptography channel attacks power analysis attempt uncover secret information physical implementation cryptosystems exploiting weaknesses cryptographic algorithms themselves design implementation physically secure cryptosystems challenge hardware software designers measuring evaluating security system manual empirical costly time consuming demonstrates automate processes introduce systematic methodology automatic application software countermeasures demonstrate effectiveness aes software implementation running 8 bit avr microcontroller framework identifies vulnerable instructions implementation power analysis attacks transforms software using chosen countermeasure protect vulnerable instructions lastly evaluates security system using information theoretic metric direct attack

paper simulation toolset estimating impact trusted platform modules tpms performance applications tpm services especially multi core environments proposed toolset consisting integrated cpu tpm simulator set micro benchmarks exercise major tpm services analyze optimize performance tpm based systems tpm paper consider optimizations 1 exploiting multiple tpms 2 reordering requests software stack minimize queueing delays studies indicate techniques result significant performance improvement especially concurrent applications using tpm increases

developed ultra low power below 1 nano joule transaction ultra speed 1 nanosecond low cost hundred gates public physically unclonable function ppuf developed ppuf based smart card sc analyze demonstrate security sc families potential security attacks

paper addresses integrated circuit ic security issues using supply voltage based gate level characterization glc glc scheme capable characterizing manifestation physical level properties ic accurately using variable supply voltage demonstrate proposed scheme detect types ic attacks low false positives false negatives

flight control banking medical assurance systems strict requirement correct operation fundamental enforcement interference particular subsystems affect effort help guarantee policy recent emerged tracking information flows hardware level article specific method gate level information flow tracking glift provide methodology testing information flows common bus protocols sup 2 sup usb protocols elicit unintended information flows provide solution based time division multiple access tdma provably isolates devices bus flows paper discusses overheads simulation time incurred tdma based solution

system chip soc market segment driven rapid ttm time market os scalability efficiency requires sw stack designed ttm scalability efficiency design constraints paper propose layered modular architecture soc drivers enable aggressive driver code reuse oses platforms cuts sw development validation integration maintenance effort discuss implementation architecture media driver highly reusable socs market segments operating systems

paper describe challenges solutions programming multi processor systems chip based experience programming platform2012 scale multicore fabric development stmicroelectronics cea using multiflex multi core programming environment component based environment basis rich set parallel programming constructs supporting task level data level parallelism multiflex programming tools described supporting platform mapping debug trace analysis discuss applicability parallel programming model variants versions definition vc 1 decoding video application versions mapped onto variants homogeneous multi core platform

nowadays reliability performance modern embedded multi processor systems threaten increasing power densities integrated circuits additional goal software synthesis reduce peak temperature system perform thermal aware mapping optimization timing thermal characteristics candidate mapping analyzed task analyzing timing characteristics design alternatives extensively investigated recent lack methods accurate fast thermal analysis obtain desired evaluation times system simulated abstraction level results loss accuracy mainly due missing knowledge system's characteristics paper addresses challenge methods automatically calibrate level thermal evaluation methods furthermore viability methods automated model calibration illustrated means novel level thermal evaluation method

multiprocessing architectures provide hardware executing multiple tasks simultaneously via techniques simultaneous multithreading symmetric multiprocessing addressed paper tasks executing concurrently communicate interfere affecting timing cyber physical system applications interference nullify advantages offered parallel hardware enormously complicate synthesis software models paper examines changes lower levels abstraction support temporal isolation effective software synthesis discuss techniques microarchitecture level memory hierarchy chip communication instruction set architecture facilitate temporal isolation

scale computations required analysis design social network interactions internet search traditionally flavor distinct eda scale density personalization web picture changing evidence eda based methodologies field simulation techniques search relevance online advertising social network simulation

thanks recent technology advances exploration vertical dimension shown dream designers technologies vertical transistor exploited paper describes novel implementation logic gates benefiting nanowire based vertical transistors embedded metal lines logic design technology explored performance evaluated comparison equivalent technology node cells reduce delay factor 31x 2x respectively reconfigurable logic circuits benchmarked improvement delay 46 48 average

complex systems chip developed design teams integrating various blocks typically single person design team understands details design integrating designers team debugging failures performance time consuming cost generating threat overall project envision tool support critical steps paths information flow automatically extracted explanations behavior derived reasoning engines designer interactively explores design environment

dynamic binary translation extensively porting applications platform runtime time reconfigurable computing commonly employed hardware acceleration compute intensive applications paper attempt understand technical challenges applying dynamic binary translation reconfigurable computing environment translation focus fly acceleration

improve resiliency reverse engineering propose dynamic physically unclonable functions dpufs physical properties subject unpredictable changes demonstrate idea using device aging alter delay characteristics according user instructions

paper propose design paradigm energy efficient variation aware operation generation multicore heterogeneous platforms main idea proposed approach lies observation operations equally shaping output quality various applications overall system based observation suggest levels software design stack including programming model compiler operating system os runtime system identify critical tasks ensure correct operation tasks assigning dynamically adjusted reliable cores units specifically based error rates operating conditions identified sense adapt sea unit os selects sets mode operation overall system run time system identifies critical critical tasks based special directives schedules appropriate units dynamically adjusted highly accurate approximate operation tuning voltage frequency units execute significant operations operate voltages required correct operation consume power required tasks exact opposed critical ones scheme lead energy efficient reliable operation reducing design cost overheads conventional circuit micro architecture level techniques

aggressive technology scaling heightened variability srams drams vulnerable random telegraph noise rtn bias dependent random temporal nature rtn significant challenges understanding effects circuits paper propose mustard technique tool predicting impact rtn srams drams presence variability mustard enables accurate stationary coupled discrete stochastic rtn simulation seamlessly integrated deterministic continuous circuit simulation using mustard able predict experimentally observed rtn induced failures srams generate statistical characterisations bit errors srams drams mustard generated results effect rtn dram retention times

stochastic device noise significant challenge precision analog rf circuits particularly difficult correctly include white noise flicker noise traditional transient verification efficient numerical solution paper monte carlo transient noise analysis developed white noise flicker noise considered ocirc integral based stochastic differential algebraic equation sdae solved time calculation variance using stochastic orthogonal polynomials sops literature provide sop based sdae solution application transient noise analysis experiments analog circuits demonstrate proposed method 488x faster monte carlo method similar accuracy achieves average 6.8x speedup existing monte carlo approaches

stability analysis key challenges design linear analog circuits complex multi loop structures paper efficient loop finder algorithm identify potentially unstable loops circuits heart automated stability checker lie newly developed computationally efficient algorithms detect poles region extract approximations node impedance transfer functions pole locations shown proposed technique outperforms existing stability methods magnitude medium sized circuits enables stability analysis extracted industrial designs previously infeasible

paper propose performance bound analysis analog circuits considering process variations model variations component values intervals measured tested chip manufacture processes method applies graph based symbolic analysis affine interval arithmetic derive variational transfer functions analog circuits linearized variational coefficients forms intervals frequency response bounds maximum minimum obtained performing analysis finite transfer functions kharitonov's polynomial functions symbolic de cancellation critical affine interval analysis response bound kharitonov's functions conservative correlations coefficient intervals transfer functions experimental results demonstrate effectiveness proposed compared monte carlo method

sram design major challenge nanoscale manufacturing technology propose bit cell repair scheme designing maximum information memory system mims unlike traditional memory repair attempts replace failed bit cells redundant columns rows propose repair bits e.g significant bit information density i.e information bits unit maximized towards goal efficient statistical algorithm derived efficiently estimate information density optimize memory system maximum information storage experimental results demonstrate traditional 6 sram cell designed commercial 45nm cmos process proposed mims design successfully operate extremely low power supply voltage i.e 0.6 improve signal noise ratio snr 20 db compared traditional sram design

design development analog mixed signal ams ics becoming increasingly expensive complex lengthy lacking reconfigurable platform analog designers denied benefits rapid prototyping hardware emulation smooth migration advanced technology nodes overcome limitations proposes approach maps ams design transistor level reconfigurable vehicle enabling fast validation reduction post silicon bugs minimizing design risk costs unique features approach include 1 transistor level programmability emulates transistor behavior analog design reproducing system achieving fine granularity reconfiguration 2 programmable switches treated design component analog transistor mapping optimized reconfiguration matrix 3 parasitics reduction leverages aggressive scaling cmos technology based principles digitally controlled panda platform designed 32nm node 90nm analog blocks successfully emulated 32nm platform including folded cascode operational amplifier sample hold module voltage controlled oscillator vco solid basis future efforts architecture hierarchical optimization related design automation tools demonstrated

growing secure cryptographic keys secrets socs asics designers geometries difficult predict precise physical analog properties digital logic blocks addition mask costs difficult tune designs raise consequences failure example channel attacks differential cryptanalysis easily noninvasively extract secrets unprotected socs vulnerabilities difficult anticipate common design verification tools necessarily provide visibility devices fail pushed outside normal operational conditions security challenges facing semiconductor industry educational security training common software developers relatively hardware engineers specialized security knowledge challenges mitigated architectural level example using cryptographic constructions provide inherent channel resistance irrespective device's underlying analog properties

technology scaling enabling integration billions transistors single processor core deploying performance energy efficient encryption decryption engines die reality sub 45nm cmos era enable increased security processor platforms achieves unprecedented improvements power performance adoption specialized hardware accelerator engines various compute intensive cryptography algorithms presentation describe novel arithmetic data path technologies enable highspeed die aes encryption decryption accelerators processor security secure hashing algorithm sha compute engines galois field multipliers public key cryptography acceleration secure die key generation using digital random generators based metastable elements circuit design optimizations enable ultra low voltage operation accelerators discussed achieve 10x energy efficiency wide dynamic operating voltage range enables scalable aes encryption decryption sub 10mw round enabling power efficient security permeate future mobile hand held wearable devices

presentation overview reverse engineering re semiconductor industry techniques obtain information semiconductor products continuous drive moore's law increase integration level silicon chips major challenges reverse engineer obsolescing simple teardowns demanding adoption sophisticated technology analyze chips hardware encryption embedded chips adds level difficulty ic analysis necessarily reverse engineer paper discusses techniques system level analysis hardware software process analysis looking materials processes create chip circuit extraction taking chip transistor level interconnects create schematics

ideally multi core instruction set simulation run parallel improve simulation performance conventional low parallelism centralized scheduler greatly constrains simulation performance resolve issue propose parallelism distributed scheduling mechanism experimental results proposed approach accelerates simulation 6 20 times depending cores

increasing complexity multicore embedded systems makes careful construction virtual prototyping system crucial shorten design turnaround time due growing demand simulation time parallel simulation aims accelerate simulation speed running component simulators concurrently extra overhead communication synchronization simulators overshadow benefits parallel simulation paper propose technique configure simulation environment optimally considering application characteristics particularly focus design axes simulation platform selection mapping component simulators participating host processors period null message transfer time synchronization result proposed technique enables efficient exploitation parallelism 1 balanced distribution simulation workloads host processors 2 minimized overhead null message transfer leading maximal simulation performance experimental results proposed technique robustly found optimal configurations wide variance application characteristics simulation platform

lack eda industry tools automated solutions mu architectural domain paper elaborate attempt advance performance simulation based statistical analysis techniques hand utilize content knowledge mu architectural specification e.g explicit specification major transactions hand statistical compact representation simulation trace name compact statistical modeling transaction level performance simulation traces magenta lt gt lt gt odeling lt gt agen lt gt lt gt lt gt ransactional lt gt lt gt nalysis demonstrated industrial studies magenta effectively capture sample flows represented simulation trace exhibit transaction terms mu architectural events statistical event dependency graph industrial experience magenta effective statistical model mu architectural performance verification power performance trade

novel approach extract dynamically generated module hierarchy behavior systemc model systemc popular modeling language specify systems abstraction level module hierarchy systemc model dynamically constructed execution elaboration phase model means system designer build regular structures using loops conditional statements currently systemc tools cope systemc models module hierarchy depends dynamic parameters approach hierarchical information retrieved controlling monitoring executing elaboration phase model using gdb debugger thereafter behavioral information retrieved using gcc plug plug produces abstract syntax trees static single assignment form behavioral information linked hierarchical information approach completely intrusive systemc model systemc reference implementation modification implemented approach systemc front called shabe systemc hierarchy behavior extractor front facilitates development future systemc visualization debugging static verification synthesis tools

study maximize throughput periodic real time system peak temperature constraint assume tasks system power thermal characteristics algorithms paper built processors active sleep mode judiciously selecting tasks thermal characteristics alternating processor active sleep mode approach improve throughput existing techniques 21 average extend approach processors dynamic voltage frequency scaling dvfs capability experiments improvement 24 achieved compared existing methods

paper approach minimize average program execution time optimizing hardware software implementation error detection leverage advantages partial dynamic reconfiguration fpgas speculatively hardware error detection components provide reduction execution time optimization algorithm frequency information counter based execution profile program starting control flow graph representation build interval structure control dependence graph guide error detection optimization algorithm

flexray emerged de facto generation vehicle communication protocol messages scheduled incrementally flexray according automotive design paradigm applications added iteratively account schedules sustainable i.e messages added iterations preserve deadline guarantees existing messages ii extensible i.e accommodate future messages changes existing schedules unfortunately traditionally metrics sustainability extensibility timing schedulability analysis generic trivially adapted flexray schedules platform specific properties flexray hybrid paradigm time triggered event triggered segments communication paper introduce notions sustainability extensibility flexray capture protocol specific properties novel metrics quantify sustainable extensible schedules demonstrate applicability results industrial size studies proposed metrics visually represented allowing easy interpretation system designers automotive industry

dvfs remains energy management technique embedded systems negative impact transient fault rates recently shown paper propose generalized shared recovery gshr technique optimally dvfs technique achieve reliability goal real time embedded applications technique determines optimal recoveries deploy task level processing frequencies minimize energy consumption achieving reliability goal meeting timing constraints recoveries shared tasks improving prospects dvfs compared existing reliability aware power management frameworks experimental evaluation close optimal energy savings proposed technique

today's multiprocessor system chip mpsoc products typically multiple execution modes mode products utilize task allocation schedule strategy determined design stage products experience usages customers unified solution optimized hypothetical common hence product reliable energy efficient particular customers view tackle propose novel customer aware task allocation scheduling technique wherein generate initial task schedule execution mode design stage perform online adjustment regular intervals lifetime reliability improvement energy reduction according specific usage strategy individual products experimental results hypothetical mpsocs various task graphs demonstrate effectiveness proposed personalized solution

stringent real time constraints lead complex search spaces containing valid implementations hence searching valid implementation substantial amount time spent timing analysis system synthesis paper novel system synthesis approach efficiently prunes search space real time constraints violated purpose reason constraint violation analyzed deduced encoding removes permanently search space approach capable proving presence absence correct implementation key benefit proposed approach stems integral support real time constraint checking efficiency results power deduction techniques art boolean satisfiability sat solvers using study automotive domain experiments proposed system synthesis approach able valid implementations former approaches fail moreover magnitude faster compared art approach

technology scaling allows integration billions transistors die cad tools struggle keeping increasing design complexity design productivity multi core socs increasingly depends creating maintaining reusable components hierarchically combining form larger composite cores characterizing composite cores respect power performance tradeoffs critical design reuse various products relies heavily synthesis tools caps online adaptive algorithm efficiently explores design space core returns accurate characterization implementation tradeoffs terms approximate pareto set supervising time consuming logic synthesis runs core's components algorithm provably achieve desired precision approximation shortest time priori information component practice caps guaranteed theory

paper utilize hybrid main memory composed dram phase change random access memory pram dsp systems leverages low power consumption pram minimizing performance endurance degradation caused write operations pram re consider variable partitioning hybrid main memory objectives example power consumption writes pram considered paper using proposed models algorithms experiments reduce 53 power consumption 79 writes pram average compared pure dram pure pram memory respectively

paper tab backspace novel scheme provide effect unlimited length trace buffer chip overhead beyond existing debug logic theoretical foundation simulation studies reduce possibility computing erroneous trace results bring lab real silicon ibm power7 processor tab backspace computes thousand additional cycles trace buffer information additional chip overhead

scale process variations statistical timing methodology advanced significantly statistical path selection takes advantage speed testing deterministic path selection separation path selection test generation require time consuming iteration processes paper statistical path selection quality results severely degraded iteration deal issue consider testability integrating sat solver necessitates statistical path selection method proposed method based generalized path criticality metric properties allow efficient pruning experimental results proposed method achieves 47 quality results average 361x speedup compared statistical path selection followed test generation

novel methodology diagnosing delay faults scan clock tree proposed proposed scheme characterizes timing impact defective clock buffers extracting change delay distribution clock paths enabling effective pruning unrealistic fault hypotheses result highly deviant timing behavior proposed scheme models statistical delay variation due test mode power ground noise maximally approximating actual failure behavior simulation results confirmed proposed methodology yield highly accurate diagnosis results complex fault manifestations

multiple defects chip defects distributed randomly clustered defects clustered possibility effects interact stronger fewer apart paper demonstrates reduces accuracy fault diagnosis based single faults specifically diagnosis procedure based single faults faults injected circuit random subsets transition faults easier diagnose clusters paper develops fault diagnosis procedure based single faults provides accurate results clusters procedure considers limited double transition faults obtain matches cluster diagnosed

consider optimization sub threshold stand vdd simultaneously considering memory yield redundant row column usage propose fast optimal fault repair analysis framework 200 600 faster previous leakage reduced 10 14 using redundancy sacrificing yield

investigated impact inverse narrow width effect threshold voltage drain current near sub threshold region technology nodes 90 nm 65 nm 40 nm proposed sub threshold device sizing method inverse narrow width effect aware reduce gate power consumption delay applied proposed sizing method designing 40 nm sub threshold standard cell library compared sub threshold standard cell library designed using conventional sizing method proposed library 20 delay 34 power consumption 47 proposed library designing digital base band processor achieved total power consumption 5 mu 6 mhz 0.5 17 counterpart design

line edge roughness ler highly affects device saturation current leakage current leads serious device performance degradation paper propose layout aware ler model ler highly related lithographic aerial image fidelity neighboring geometric proximity ler model perform robust ler aware poly layout optimization minimize degradation device performance particular leakage current results 32nm node standard cells average 91.26 reduction leakage current 4.46 improvement saturation current worst despite 8.86 penalty

scaling cmos technologies leakage power becoming increasingly issue ic design trade subthreshold leakage power consumption clock frequency circuit i.e performance leakage power consumption sacrificed vice versa meanwhile timing analysis synthesis physical design pessimistic means slacks available traded leakage power minimization power minimization sign accurate realistic sign available slack traded leakage power minimization footprint based cell swapping threshold voltage assignment paper introduce post sign leakage power optimization nonlinear mathematical program solve using conjugate gradient cg method set novel transformation technique manipulate constraints optimization solved cg doing optimization reduce leakage power consumption 34 average comparison power optimization sign experiments real industrial designs

gap lithography wavelength critical feature size continued increase semiconductor industry adjust previously scaling moore's law relied improvement lithography equipment occasionally reducing wavelength frequently improving effective numerical aperture wavelength define critical dimensions nineties 248nm industry switching 193nm following decade 157nm technology failed materialize due technological challenges focus generation lithography ngl research shifted euv meanwhile 193nm continued workhorse continuation moore's law equipment advancement immersion steppers increased effective aperture lens thereby capturing diffraction imaging process moore's law requires significant innovation optical lithography wavelength effective lens aperture stretched limits double patterning rescue splitting pattern burden mask somewhat reduced allowing stitched pattern scale changes continued scaling required tighter co optimization process design image quality weaker restrictions placed diversity features robustly patterned leading proverbial increase heft design rule manuals heroic efforts continue moore's law reap resulting benefits electronics industry relatively field called computational lithography providing helping hand computational lithography comprises broad set techniques physics based calculations eke lithographic performance generation steppers fertile field recently introduced advanced features inverse lithography source mask optimization techniques helped extend life optical lithography beyond previously forecast durations time lithography technologies mature computational infrastructure developed extend optical lithography optimize technologies paper provide examples computational lithography creating novel affordable solutions sustain scaling trend

mosfet structures candidates sub 20nm ic technologies according international technology roadmap semiconductors finfet utb soi transistors poised replace mosfets provide relief ics power device variation predicaments

technology scaling idealities apparent transitions previous technology generations pronounced world moves 22nm node 14nm node digital logic designers performance microprocessors similar projects significant challenges basic fet structure changed fundamental squeeze performance scaled devices design constraints sources variability understood methodologies required enable robust speed designs addition metal interconnects devices stressed scaled wire rc increase tools methods ensure reliable designs

increasing power densities managing chip temperatures design challenge propose novel approach shapers dynamically selectively insert idle times execution hard real time jobs single speed processor class leaky bucket shapers lightweight implementation derive shaper job misses real time deadline peak temperature optimally reduced analysis design shapers allows dynamically variable streams jobs instance periodic streams jitter extend results consider zero power timing overhead transitioning idle mode experimental results demonstrate proposed approach provides improvement average 8k peak temperature reduction 40 increase utilization peak temperature

chronos linux effort real time linux kernel chip multiprocessors cmps chronos addresses intersection spaces os support obtaining effort timing assurances real time linux kernel augmented preempt_rt patch os support cmp aware real time scheduling spaces studied past intersection strong motivations previously empty effort timeliness targets real time applications run time uncertainties resource overloads optimizes collective application timeliness specified application chronos directly supports implementation effort real time schedulers cmps addition global partitioned scheduling disciplines chronos extends preempt_rt linux patch provides kernel preemptibility retains stock linux features validate claims reporting implementation suite effort effort cmp schedulers quad core amd phenom platform

static computation worst reaction time wcrt required real time execution synchronous programs existing approaches model checking integer linear programming formulate abstraction based reachability analysis yielding lower worst complexity benchmarking significant overall speed 64 times existing approaches

paper approach accurately estimating execution time parallel software components complex embedded systems timing annotations obtained highly optimized binary code added source code software components integrated systemc transaction level simulation approach allows fast evaluation software execution times accurate conventional instruction set simulators simulating binary level control flow parallel original functionality software compiler optimizations heavily modifying structure generated code modeled accurately experimental results method produces timing estimates level accuracy established commercial tool cycle accurate instruction set simulation 20 times faster

approach formally analyze quality service qos properties network chip noc designs tackle industrial scale designs adopt abstraction based approach nodes network precisely modeled rest network abstracted sources sinks traffic automatic technique infer traffic model comprising formal models sources sinks simulation traces derived software benchmarks experimental results demonstrate inferred models generalize abstraction based approach accurately verify industrial scale noc designs

paper proposes practical approaches address global convergence failures commonly encountered mixed signal systems analog digital components closely interact nominally system fail intermittently depending initial conditions start approach data clustering analysis verifies global convergence randomly selected pilot simulations approach adopts practice representing indeterminate defining equivalent concept analog based entropy oscillator phase locked loop examples demonstrated proposed approaches effectively detect failures guide designers add resets prevent

memory consistency litmus tests parallel programs designed illustrate subtle differences memory consistency models exhibiting outcomes models paper class memory models restricted expressive include store atomic hardware memory models litmus tests bounded size sufficient illustrating differences memory consistency models class establish bound threads six memory access instructions differentiating litmus tests class models prove equivalence specification memory consistency models class exploring bounded litmus tests build tool comparing memory models based result tool explore map space class models

ensuring functional correctness hardware software bottleneck design process embedded systems paper proposes approach formally verify low level software conjunction hardware proposed approach based interval property checking ipc proved successful industrial hardware designs paper ipc extended specific abstraction technique makes tractable hardware software co verification realistic industrial designs proposed methodology sets finite sequences system abstracted interval properties allows handle sequences transitions hardware occur running programs demonstrate feasibility approach using example industrial lin software running public domain microprocessor platform

clock distribution networks consume 35 70 total chip power performance designs 13 resonant clocks potentially reduce power recycling energy using chip inductors propose automated lt gt lt gt esonant cl lt gt ock lt gt ynthesis rocks algorithm experimental results 10 inductor clock power reduced 34 inductor 90 power savings shown feasible

clock buffer polarity assignment effective design schemes mitigate power ground noise caused clock signal propagation overcomes fundamental limitations conventional clock buffer polarity assignment methods 1 unawareness signal delay i.e arrival time differences leaf buffering elements 2 ignorance effect current fluctuation leaf buffering elements total peak current waveform addressing 1 2 polarity assignment cause severe inaccuracy peak current estimation results unnecessarily peak current overcome limitations propose completely fine grained approach clock buffer polarity assignment combined buffer sizing formulating multi objective shortest path solving effectively experimental results proposed method able produce designs 17 lower peak current 20 lower power noise average compared results produced method

issues analog layout phase achieve accurate capacitance ratios systematic random mismatches affect accuracy capacitance ratios common centroid placement helpful reduce systematic mismatch property dispersion reduce random mismatch 10 deal propose simulated annealing 15 based approach construct common centroid placement exhibits degree dispersion facilitate framework propose pair sequence representation represent common centroid placement operations perturb representation increase degree dispersion breaking common centroid constraint resulting placement finally enhance efficiency simulated annealing based approach propose techniques speed program experimental results placements simultaneously achieve oxide gradient induced mismatch larger overall correlation coefficients i.e degree dispersion 10 test besides program run faster 10 larger benchmarks

variations delay caused die die die process variations soi history effect increase timing margins reduce performance develop mitigation techniques reduce detrimental effects delay variations particularly occur die methods measuring delay variations actual products data provided techniques validating models i.e assist model hardware correlation paper propose flush delay technique measuring regional delay variations soi history effect validate method using test structure fabricated 65 nm soi process

modifications stabilize nonlinear reduced models generated discrete empirical interpolation methods combine approach linearization multipoint stabilization technique examples demonstrate method's effectiveness nonlinear transmission line micromachined switch nonlinear thermal model rf amplifier

passivity enforcement issue macro modeling passive systems measured simulated data existing convex programming based methods expensive ruled realistic application methods based iteratively fixing passivity perturbing eigenvalues hamiltonian matrix suffer convergence issue lack optimality sometimes lead unacceptable error paper propose novel framework macro modeling addition traditional stage fixing plus enforcement schemes propose post enforcement optimization takes passive potentially accurate model starting performs local search local optimum passivity constraint build passivity guarantee simple stable passive modeling generator proposed produce starting model optimization algorithms proposed performing constrained unconstrained optimizations experiments accuracy passivity fixed model significantly improved proposed methods main algorithms 1 perturbation process guarantee convergence step perturbation move imaginary eigenvalues axis potentially move eigenvalues imaginary axis introduce passivity violations 2 enforcement procedure stops passive model error step enforcement aiming minimizing perturbation instead minimizing model error steps iterations model error accumulated eventually paper propose perform additional refinement step improve accuracy passive model guarantee passivity input proposed algorithms passive accurate starting model existing passivity enforcement schemes input accurate passive system starting passive model provided existing enforcement techniques simpler stable approaches introduced rest paper organized follows section 2 introduce mathematical background review exiting methods passivity constrained macro modeling section 3 framework proposed stage passive macro modeling section 4 5 schemes postenforcement optimization results conclusions sections 6 7

traditional parallel boundary element methods suffer low parallel efficiency poor scalability due system solving time bottleneck paper demonstrate avoid bottleneck using instantiable basis function approach demonstrated examples achieve 90 parallel efficiency scalability shared memory distributed memory parallel systems

facilitate chip capacitance extraction field solvers typically deployed characterizing capacitance libraries various interconnect structures configurations past decades various algorithms accelerating boundary element methods bem developed improve efficiency field solvers capacitance extraction paper massively parallel capacitance extraction algorithm fmmgpu accelerates fast multipole methods fmm modern graphics processing units gpus propose gpu friendly data structures simd parallel algorithm flows facilitate fmm based 3 capacitance extraction gpu effective gpu performance modeling methods proposed properly balance workload critical kernel fmmgpu implementation taking advantage fermi gpu's concurrent kernel executions streaming multiprocessors sms experimental results fmmgpu brings 22x 30x speedups capacitance extractions various test test utilize gpu's hardware resources proposed cube clustering workload balancing techniques bring 20 60 extra performance improvements

intel's move towards soc paradigm comes compelling requirement shorter time market address pre post silicon validation efficient paper focus post si functional validation consumes increasing share overall product development timeline coherent pre post workflow aims improve productivity post si validation debug proper investment design debug validation dfx test development pre si stages workflow central transactions events definition repository serves backbone pre si post si activities transaction spec guides dfx pre si test suite preparation post si validation productive usage micro architectural events transactions raises level abstraction help getting productivy manageability reusability error prone post si validation

growing importance post silicon validation ensuring functional correctness designs increased synergy pre silicon verification post silicon validation synergy starts common verification plan continues common verification goals shared tools techniques paper describes experience improving synergy pre post silicon verification ibm's power7 processor chip leveraging pre silicon methodologies techniques post silicon validation chip

post silicon testing validation screen defective confirm proper operation target application test robustness presence transient issues induced environmental factors especially crucial safety critical devices activities sometimes leverage information gathered prior fabrication injection testing stuck transient faults traditionally process requires gate level model faulty logic nodes modeled 0 1 statically dynamically operating unfamiliar gate level model laborious task engineering teams requiring significant investment time compute power complicates tasks equipping designs safety critical augmenting production test quality metrics using chosen functional tests paper research techniques speeding process using rtl models rtl simulation

paper low power multiple input multiple output mimo 264 video joint detector decoder design minimizes energy portable wireless embedded systems design combines unequal error protection uep scheme variable fidelity mimo detection performance energy consumption tradeoffs required importance coded video frame using search space reduction truncation strategies mimo detection 264 data partitioning dp method determine decoding configurations yield minimum energy consumption pre specified image qualities receiver synthesis result scalable mimo detector using 45nm technology library yields 52 57 58 energy reductions 24db snr foreman akiyo mobile test streams respectively tradeoff negligible 0.3db degradation peak signal noise ratio psnr typically image quality estimation

gridding method interpolating irregularly sampled data uniform grid critical image reconstruction step applications operate cartesian sampled data paper algorithm architecture co design framework accelerating gridding using fpgas parameterized hardware library accelerating gridding support arbitrary regular trajectories describe kernel automation framework supports kernel functions look table lut based taylor polynomial evaluation framework integrated using house multi fpga development platform provides hardware infrastructure integrating custom accelerators design space exploration enabled automation flow allows system generation algorithm specification provide studies realizing systems nonuniform fast fourier transform nufft parameter sets porting bee3 platform results speedups 16x 2x existing cpu fpga implementations respectively 5.5 times performance watt comparable gpu implementation

key challenge closed loop chronic biomedical systems ability detect complex physiological patient signals constrained power budget data driven machine learning techniques major enablers modeling interpretation computational energy scales complexity required models paper propose low energy biomedical computation platform optimized accelerator data driven classification accelerator retains selective flexibility hardware reconfiguration exploits voltage scaling parallelism operate sub threshold minimum energy using cardiac arrhythmia detection algorithms patient data mit bih database classification achieved 2.96 mu vdd 0.4 magnitude low power purpose processor energy feature extraction 148 mu retaining flexibility range biomarkers

today's premium vehicles equipped multitude advanced driver assistance systems adas additional driving information actively influence vehicle behavior normally highly distributed realtime systems process information distributed sensors cameras radar sensors fulfill data rates real time requirements future systems provide suitable underlying network architecture handle communication requirements ethernet data rates audio video bridging avb mechanisms time synchronization traffic shaping solution interconnect systems essential prerequisite extensive investigation ethernet avb automotive applications paper concentrates evaluation accuracy stability robustness time synchronization mechanism avb varying temperature conditions measurement results obtained test setup climate chambers

recently proposed design techniques leverage inherent error resilience applications improved efficiency energy performance hardware software systems designed viewed scalable effort systems offer capability modulate effort expend towards computation thereby allowing tradeoffs output quality efficiency propose concept dynamic effort scaling des refers dynamic management control knobs exposed scalable effort systems argue des observing degree resilience varies significantly applications datasets dataset propose conceptual framework des formulating feedback control wherein scaling mechanisms regulated goal maintaining output quality specified limit implementation dynamic effort scaling context scalable effort processor support vector machines evaluate various application scenarios data sets results demonstrate benefits proposed approach statically setting scaling mechanisms leads significant error overshoot significant opportunities energy savings left table unexploited contrast des able effectively regulate output quality maximally exploiting time varying resiliency workload

designing soc system chip ensure chip's architecture delivers optimal data throughput speed connectivity blocks practical taking layers software account previous simulation based estimation method analytical method focused estimation low level throughput link layer adequate accurately estimating throughput real silicon soc practical complex connectivity blocks typically require extensive software operation top platform operating systems linux fpga based emulation commonly verify functional correctness complex connectivity blocks realistic usage scenario real connectivity devices usb 2.0 mass storage devices speed fpga emulation scaled significantly inherent limitation fpga emulation speed interface real connectivity devices required speed compliance connectivity specification standards reason scaling factors speed uniform measurement performance accurate paper proposes method compensate errors due uniform scaling factors proposed method measurements various parameters fpga emulation applied accuracy estimation model created method applied usb2.0 experimental result 4.1 estimation error

binary decision diagrams canonical representation boolean functions core formal verification systems silicon compilers canonicity enables efficiency manipulation comes cost fixing variable evaluation predictably bdd sizes sensitive selected art reordering algorithms based transpositions consecutive variables swaps exact algorithms enumerate permutations performing series 1 swaps heuristics typically search optimum location variable independently sifting utilize exact algorithms subroutine window reduce variable obtaining permutation enumeration transposition network proposed network avoids traversing permutations exploiting structural properties bdds requires execution fewer 4 sup sup swaps sequentially instead 1 practically 4,5 algorithm requires 11 resp 59 sequential swaps instead 23 resp 119 propose algorithm moving arbitrary variable orderings executes swaps sequentially improvement sup sup 2 results suggest speedups 162 308 gt 10x window heuristic 4 6,8 near linear speedups moving orderings

dynamic power saving gaining dominance modern low power designs clock gating blocks unnecessary clock switching activities efficient approaches reduce dynamic power paper exploit interpolation technique sat based clock gating algorithm grant flexibility enlarging gating capabilities original gating candidates developed techniques improve runtime memory usage clock gating algorithm including gating capability filter reduce formal sat proofs dynamic backtracking limit controller shorten sat runs shrinking method ease final gate count overhead experimental results proposed algorithm gate 2x clock switches 5 overhead compared art sat based clock gating methodology

introduce concept utilizing cell libraries synthesis physical design physical library consists 9 functions drive beta ratio options total cell count 186 synthesis performs inclusion complex cells power efficient augment synthesis library include numerous combinations basic 9 functions resulting synthesis library consists total 865 cells note compound cells require characterization set drive strengths beta ratio layout design synthesis compound cells decomposed basic 9 cells physical library cell size optimization performed entire flow efficient ability handle multi million gate commercial designs applied art commercial synthesis application discrete cell size selection tool combined dual library approach results typical active reduction 40 current industrial designs delay

systematic investigation robustness logic synthesis tools equivalence preserving transformations input verilog file developed framework 1 parses verilog behavioral models abstract syntax tree 2 generates random equivalence preserving transformations syntax tree 3 writes transformed design verilog format original transformed verilog descriptions checked equivalence synthesized results average peak improvements 2.5 11 length critical path 4 13 achievable indeed figures comparable recent advancements logic synthesis 17 8 achieve 4.9 23 5 24 improvements wise respectively signaling relevant lack robustness synthesis tools lack robustness suggests synthesis algorithms evaluated measuring average improvement transformed files assess real contributions quality results

fine grain 3d integration commonly components appears attractive architectural solution finely partitioned highly regular blocks unique layout level challenges due uneven scaling silicon vias tsvs circuit elements yielding tsvs decreasing transistor sizes mismatch tsv dimension feature size affects outcome 3d design space exploration especially fine grain partitioned highly regular microprocessor blocks sram registers caches 4 layer implementation sram register 45nm technology improving tsv yield 20 90 requires layout modifications worsen register's performance times moreover 4 layer register performs times fast single layer equivalent 20 yield twice slower 70 yield layout effects considered explore conventional physical design schemes 3d architectural blocks performance deterioration slower tsv yields

clock tree synthesis challenging 3d ics clock signals delivered silicon vias tsvs tiers minimum skew latency related literature none considers reliability tsvs accordingly failure tsv clock tree yields bad chip naive solution using double tsv alleviate significant overhead renders practical designs paper propose novel tsv fault tolerant unit tfu provide tolerance tsv failures 3d clock network makes existing 2d redundant trees designed pre bond testing minimum overhead compared double tsv technique 3d clock network constructed tfus achieve 61 reduction 3.9 yield rate improvement industrial authors knowledge practical literature considers fault tolerance 3d clock network

silicon via tsv technology enables vertical integration silicon dies forming single 3d ic stack paper practical model proposed tsv assignment stacked die 3d nets literature prove 3d ic tsv assignment dies np complete efficient heuristic algorithm combines shortest path bipartite matching min cost max flow integer linear programming developed experimental results demonstrate flow achieves quality results 98 optimal solution reasonable run time compared related

micro channel cooling potential removing density heat 3d circuits current micro channel heat sink designs spread entire surface cooled micro channels approach provide sufficient cooling requires pumping power paper investigate uniform allocation micro channels provide sufficient cooling pumping power specifically decide count location pumping pressure drop flow rate micro channels acceptable cooling achieved minimum pumping power thermal wake effect runtime pressure drop flow rate control considered experiments compared conventional design spreads micro channels chip uniform microchannel design achieves 55 60 pumping power saving

silicon vias tsvs required transmitting signals dies dimensional integrated circuit 3d ic technology significant silicon occupied tsvs bring critical challenges 3d ic placement unlike published 3d placement minimize tsvs placement due limitations techniques paper proposes 3d cell placement algorithm additionally consider sizes tsvs physical positions tsv insertion placement algorithm consists stages 1 3d analytical global placement density optimization whitespace reservation tsvs 2 tsv insertion tsv aware legalization 3 layer layer detailed placement particular global placement based novel weighted average wirelength model giving model literature outperform log sum exp wirelength model theoretically empirically 3d routing easily accomplished traditional 2d routers physical positions tsvs determined placement compared art 3d cell placement algorithm achieve routed wirelength tsv counts total silicon shortest running time

existing thermal aware 3d placement methods assume temperature 3d ics optimized properly distributing power dissipations ignoring heat conductivity silicon vias tsvs study indicates exactly correct considering thermal effect tsvs placement appears complicated able prove tsv bin proportional lumped power consumption bin bins tiers directly peak temperature minimized based criterion implement thermal aware 3d placement tool compared methods prefer uniform power distribution results 8 peak temperature reduction method reduces peak temperature 34 average slightly wirelength overhead results suggest considering thermal effects tsvs effective placement stage authors knowledge thermal aware 3d placement tool directly takes consideration thermal impact tsvs

paper sparse approximation technique proposed incremental power grid analysis proposed method motivated observation power grid network locally updated circuit design response changes locally hence incremental change power grid voltage zero internal nodes resulting unique sparse pattern efficient orthogonal matching pursuit omp algorithm adopted solve proposed sparse approximation addition numerical techniques proposed improve numerical stability proposed solver simultaneously maintaining efficiency industrial circuit examples demonstrate applied incremental power grid analysis proposed approach achieves 130 times runtime speed traditional algebraic multi grid amg method surrendering accuracy

verification power grids modern integrated circuits start design process adjustments easily incorporated describes vectorless verification technique deals circuit uncertainty framework current constraints framework grid verification question computing worst voltage drops entails solution linear programs lps nodes extend grid verification check worst branch currents require lps branches propose starkly approach reduce lps verification achieve examining dominance relations node voltage drops branch currents allows replace lps conservative tight lp results dramatic reduction lps vectorless grid verification framework current constraints practical scalable

verifying rc model power grid requires check steady voltage drops nodes grid exceed threshold propose approach correct grid voltage drops violate threshold condition minor changes original design previous 1 dc model grid paper deals transient model directly reducing steady voltage drops below threshold reducing time step voltage drops method current constraints proposed 2 time step voltage drop distance corresponding threshold largest tries estimate function metal widths grid linear optimization formulated required metal line width changes reduce time step voltage drops sufficient amount determined reduction time step voltage drop amount steady voltage drops nodes threshold

single event transients set digital logic pose increasing reliability challenge device dimensions shrink modern technologies projection set sensitivity scaling essential assess logic failure error probability modern technology generations paper discusses effects device scaling 45nm 12nm processes circuit parameter tuning sets failure due particle strikes i.e single event upsets seu behavior process variations reliability mechanisms nbti evaluated critical supply voltage required avoid set propagation circuit parameters investigated proposes probability model examines propagation set node output circuit proposed methodology extended complex digital circuit investigate vulnerability set

paper propose ad hoc scrubbing sequences improve memory reliability key idea exploit locality errors caused multiple cell upset mcu scrubbing efficient starting mcu distributions device procedure information determine ad hoc scrubbing sequence maximizes reliability approach applied study results significant increase mean time failure mttf compared traditional scrubbing

aging transistors major reliability concern especially vlsi circuits nanometer regime paper propose novel methodology address circuit aging field chip aging sensor designed monitor transitions functional paths capturing functional mode workload path delay accurately measured converted digital value diagnosis calibration performed field thereby achieving power performance optimization throughout entire lifetime simulation results demonstrate efficiency proposed structure

traditionally biomolecular systems studied ensemble determined ensemble measurements scientific technological rapidly moving single molecule techniques rely primarily fluorescent markers advanced microscopy techniques paper describe recent using nanoscale transistors based carbon nanotubes charge sensitive detectors carbon nanotubes ensemble studies sidewall adsorption sensitivity greatly enhanced engineered defect nanotube biomolecular interactions characterized random telegraph noise response analyzed study single molecule kinetics thermodynamics

semiconducting nanowires nws potential function highly sensitive selective sensors label free detection minute concentrations target molecules discuss approach nw sensors using cmos complementary metal oxide semiconductor fet field effect transistor compatible technology enables detection biomolecules clinically relevant concentrations real time monitoring response approach eliminates hybrid methods enables system scale integration sensors signal processing information systems ability monitor antibody binding sense real time live cellular immune response readily available technology facilitate widespread diagnostic applications

paper demonstrates paradigm realization functional devices cmos die wafer based nanomaterials carbon nanotubes graphene chemical biological sensing post cmos directed assembly approach based dielectrophoresis dep low cost maskless approach electric field based technique compatible throughput assembly diverse array nanomaterials paradigm utilizes cmos die wafer electroactive functional substrates dep based assembly nanomaterials proposed proposed cmos nanoassembly c4na approach ideal pathway heterogeneous integration multiple nanomaterials platform variety applications nanosensors chip environmental biological sensing preliminary investigations c4na approach single walled carbon nanotubes dna functionalized carbon nanotubes graphene sensing volatile organic compounds environment potential breath based biomedical diagnostics

steep sub threshold characteristics inter band tunneling fets tfets attractive choice low voltage operations propose hybrid tfet cmos chip multiprocessor cmp cmos cores voltages tfets lower voltages exploiting differences application characteristics building device characterization design simulation tfet based circuits culminates workload evaluation various single multi threaded applications evaluation promise dimension heterogeneous cmps achieve significant energy efficiencies upto 50 energy benefit 25 ed benefit single threaded applications 55 ed benefit multi threaded applications

nanophotonic network promises improved communications cores core systems paper discusses novel modeling simulation methodology infrastructure compare performance power consumption reliability nanophotonic network designs phenomenologically determined transfer matrix device models employed characterize network performance realistic multi threaded applications optical power transmission wevelength division multiplexing spectrum network reliability affected fabrication induced process variation run time system thermal effects five recently proposed networks analyzed elucidate advantages limitations

recent emerging marketplace designs pin constrained digital microfluidic biochips pdmfbs received attention due impact packaging product cost major approaches broadcast addressing reduces pin count assigning single control pin multiple electrodes mutually compatible control signals prior utilize addressing scheme minimally electrode sets conflict signal merging merging control signals introduces redundant actuations potentially cause power consumption recent studies pdmfbs indicated power consumption decreases product lifetime degrades system reliability unfortunately power aware design concern readily available current design automations pdmfbs cope issues propose paper power aware broadcast addressing pdmfbs algorithm simultaneously takes pin count reduction power consumption minimization consideration thereby achieving integration design performance experimental results demonstrate effectiveness algorithm

paper investigate plant photosynthesis microbial fuel cells report following 1 introduce validate novel multi objective optimization algorithm pmo2 2 photosynthesis increase yield 135 geobacter sulfurreducens determine tradeoff growth versus redox properties 3 finally discuss pareto front estimator robust metabolic pathways

paper systematic methodology error correction scheme using low density parity check ldpc codes improve reliability endurance multi level cell mlc volatile memories using realistic error model ldpc architecture scheme uniform reference voltages nurv proposed trade error correction capability throughput improve bit error rate significantly

dimensional 3d cmos imager constructed stacking pixel array image sensors analog digital converter adc array image signal processor isp array promising throughput imaging applications design specifications adc array imager jointly concurrently converts pixel data produce final image consider intra adc linearity inter adc uniformity paper investigate relationship image quality linearity individual adcs uniformity neighboring adcs array insights relationship specification requirements adc array derived based desired level image quality

novel built jitter characterization architecture combining quantization noise shaping partial vernier delay structure proposed resolution jitter measurement effective resolution optimized system level circuit level using 90nm cmos technology 0.008mm sup 2 sup occupied power consumption 1.85mw effective resolution 1.5ps achieved

low cost wireless system design serves interface support soc contactless testability feature communication hierarchy includes phy mac data exchange test wrapper functions wireless require external antennae crystal reference minimize setup cost embedded digital timing generation achieves robust performance noisy environment wireless system occupies 0.18 mu device test active wireless front 0.14mm sup 2 sup gate count digital processing 112k maximum energy efficiency uplink 1.1nj bit downlink 2.9nj bit wireless distance set 1cm prototype system includes test equipment soc device test soc integrating logic memory analog plug modules contactlessly tested low cost platform controlled simple hand held computer

increasing sensitivity circuit performance process temperature supply voltage pvt variations led increase process corners required verify circuit timing typically designers attempt reduce computational load choosing based experience subset available corners running static timing analysis sta corners running corners chosen beforehand lead acceptable results results setup timing analysis indeed bound circuit slacks corners running corners hand hold analysis instead alternative method performing fast accurate hold timing analysis covers corners method timing run performed corners partial timing runs cover clock network performed combine results partial runs worst hold slacks corners results method accurate achieve improved runtimes

paper studies tsv tsv coupling 3d ics chip si analysis flow proposed based proposed coupling model analysis results tsvs cause significant coupling noise timing despite tsv count compared gate count approaches proposed alleviate tsv tsv coupling namely tsv shielding buffer insertion analysis results approaches effective reducing tsv caused coupling improving timing

spacer type self aligned double pattering sadp pitch splitting sidewall image method major option sub 30nm device node manufacturing due lower overlay sensitivity process window compared double patterning processes litho etch litho etch lele sadp production 1d patterns nand flash memory applications applying sadp 2d random logic patterns challenging paper describe layout decomposition methods sadp lithography complex 2d layouts favored type sadp complex logic interconnects mask approach using core mandrel mask trim mask paper describes methods automatically choosing optimizing manufacturability base core mask patterns generating assist core patterns optimizing trim mask patterns accomplish quality layout decomposition sadp process evaluate technique 22nm node industrial standard cells logic designs experimental results proposed layout decomposition sadp effectively decomposes challenging 2d layouts

era deep sub wavelength lithography nanometer vlsi designs manufacturability yield issues critical addressed key physical design implementation stage particular detailed routing existing studies lithography friendly routing suffer huge run time due intensive lithographic computations involved severe loss quality results inaccurate predictive models paper propose aeneid fast generic performance lithography friendly detailed router enhanced manufacturability aeneid combines novel hotspot detection routing path prediction techniques modern data learning methods applies detailed routing stage drive fidelity lithography friendly routing compared existing litho friendly routing aeneid demonstrates 26 66 avg 50 lithography hotspot reduction cost 18 38 avg 30 run time overhead

biological molecules perform functions surrounded water mobile ions strongly influence molecular structure behavior electrostatic interactions molecule solvent particularly difficult model theoretically due forces range collective response thousands solvent molecules dominant modeling approaches represent extremes trade molecular realism computational efficiency atom molecular dynamics explicit solvent macroscopic continuum theory poisson poisson boltzmann equation fast solver implementation advanced nonlocal continuum theory combines key advantages approaches particular molecular realism included limiting solvent dielectric response short length scales using model nonlocal dielectric response allows resulting linear integro differential poisson equation reformulated system coupled boundary integral equations using double reciprocity whereas previous studies using nonlocal theory limited model owing computational cost door studying larger including rational drug design protein engineering nanofluidics

computing parametric sensitivities oscillators understood subtlety associated indeterminacy phase universal vexing subtlety arises oscillator described system differential equations hidden conservation constraints hcc's defined weighted sums variables time invariant hcc's commonly models biochemical oscillators rarely practical circuit oscillators standard approach computing parametric sensitivities yield incorrect results addition monodromy matrix matrix sensitivities oscillation period defective interferes usual approach computing oscillator phase noise paper analyze hcc augmenting standard sensitivity approach explicit hcc's recover correct parametric sensitivities addition prove typically satisfied condition guarantees system hccs defective monodromy matrix deliberately flawed ring oscillator circuit cyanobacterial circadian clock biochemical oscillator demonstrate parametric sensitivity resolution issue defective monodromy matrix

cellular populations typically heterogenous collections cells respective cell cycles cell cycle time varies individual individual result true single cell behavior particularly cell cycle dependent obscured population level averaged measurements developed simple deconvolution method remove effects asynchronous variability population level time series data paper summarize recent progress development application approach provide technical updates result increased biological fidelity explore preliminary validation results discuss ongoing applications highlight method's usefulness estimating parameters differential equation models single cell gene regulation

applications targeting fpga integrated systems impose strict energy channel width delay constraints introduce objective clustering mo pack targets performance metrics concurrently detailed performance comparisons art clustering strategies targeting energy vpack delay vpack channel width irac timing routability rpack mo pack achieves goals increasing logic

level synthesis technique takes input orthogonal descriptions behavioral architectural contract implementation user microarchitecture architectural contract implemented describe prototype compiler generates control required enforce contract synthesizes pair descriptions hardware

processor customization form application specific instructions provide significant power performance boost embedded application maintaining flexibility emergence multi core architectures possibility creating application specific heterogeneous computing platform customizing set homogeneous cores propose multi core architecture cores share reconfigurable fabric accommodates custom instructions develop efficient algorithm exploits shared fabric customization runtime reconfiguration minimize execution time multi threaded applications experimental results reveal shared reconfigurable fabric helps applications achieve substantial speedup compared core private fabrics

electronic systems implement computation terms voltage energy unit charge molecular systems compute terms chemical concentrations molecules unit volume prior established mechanisms implementing logical arithmetic functions including addition multiplication exponentiation logarithms molecular reactions paper methodology implementing synchronous sequential computation generate phase clock signal robust sustained chemical oscillations implement memory elements transferring concentrations molecular types alternating phases clock illustrate design methodology examples binary counter parallel fft validate designs ode simulations mass action chemical kinetics exploring dna based computation via strand displacement experimental chassis

verifying hardware systems daunting task reduce amount effort involved verification teams attempt reuse verification ip introduce novel approach test generation enables reuse verification ip verify functionality method applies significant category features variations functionality existing design method successfully verification ibm servers system system compared technique alternative approaches achieves quality reducing manual effort

microarchitectural information regarding various aspects instruction execution help processor level stimuli generators easily reach verification goals aspects based common microarchitectural concepts specific manifestations highly design specific propose using automatic method acquiring microarchitectural knowledge integrating stimuli generator start extracting microarchitectural data simulation traces data fed decision tree learning algorithm produces rules microarchitectural behavior instructions rules integrated testing knowledge stimuli generator testing knowledge provide users ability control microarchitectural behavior generated instructions leading quality test experimental results power7 processor proposed method improve microarchitectural coverage design

introduce method partitioning massively parallel hardware accelerated functional verification approach augments classical hypergraph partitioning model temporal dependencies maximize parallelization instruction memories machine simulation depth reduced optimizing path criticality cut directionality techniques demonstrated industrial accelerator containing 262,144 parallel processors benchmarked designs containing 200 million gates

post silicon validation poses unique challenges bring tools lack observability design typical instability silicon bring platforms absence supporting software os debuggers challenges reach optimal utilization expensive fast silicon platforms lead unique design considerations tool simple perform operation platform interaction environment paper describe variety novel techniques optimized unique characteristics silicon platform techniques implemented threadmill bare metal exerciser targeting multi threaded processors threadmill verification power7 processor encouraging results

cacti finfet integrated framework simulation power delay temperature process variations finfet based caches developed finfet design library process variation models characterize delay leakage spreads caches results various finfet design styles mixing design styles promising strategy optimizing cache delay leakage

paper using nano electro mechanical system switches power gating idle functional units embedded microprocessor achieve average 26 total energy savings worst 5 increase cycles includes detailed comparison transistor switches actuation circuitry design identification desired switch parameters device lifetime analysis

reducing power consumption primary challenges chip design significant efforts devoted holistic solutions power reduction device level system level plethora low power devices explored single electron transistors sets temperature particularly attractive prior proposed binary decision diagram based reconfigurable logic architecture using sets lacks automated synthesis tool device consequently develop product term based approach synthesizes logic circuit mapping product terms set architecture experimental results effectiveness efficiency proposed approach set mcnc benchmarks

double gate carbon nanotube field effect transistors dg cnt fets controlled field type type extra polarity gate results embedded xor behavior inspired novel circuit designs architectures makes following contributions propose accurate efficient semi classical modeling approach realize spice compatible model circuit design optimization dg cntfets design optimize universal logic modules ulms circuit styles based dg cntfets proposed ulms leverage potential embedded xor fpga centric lookup table optimization flow demonstrate dg cntfet ulms double pass transistor logic style inherently produces dual rail outputs balanced delay faster dg cntfet circuits conventional single rail static logic style relies explicit input inversion average 12 benchmarks proposed dual rail ulms outperform dg cntfet fabrics based tiling patterns 37 12 33 delay total power respectively

lime java compatible object oriented language designed programming reconflgurable hardware significantly accessible skilled software developers lime programs run software via java bytecodes hardware via behavioral logic synthesis paper illustrates salient synthesis oriented features language using photo mosaic algorithm inherent bit pipeline data parallelism result virtual machine abstraction extends heterogeneous architecture comprising cpu fpga computational structures

modern processor architectures call software highly tuned unpredictable operating environment process level virtualization systems allow existing software adapt operating environment including resource contention dynamic events modifying application instructions runtime systems becoming widespread purpose computing communities various challenges prevented widespread adoption resource constrained devices memory performance overheads forefront paper discuss advantages opportunities runtime adaptation embedded software describe existing dynamic binary modification tools perform runtime adaptation discuss challenges balancing memory overheads performance developing tools embedded platforms

platform virtualization supports co existence multiple operating system environments single physical platform commonplace server computing provide similar isolation separate physical servers improved resource utilisation embedded space virtualization development widespread unlike server world virtualized systems typically run multiple copies similar operating systems virtualization embedded space heterogenous combining classes operating systems rtos traditional embedded real time programming featured rich operating system support complex applications user interfaces provide examples virtualization embedded systems explain motivation benefits differences server style virtualization

real time embedded systems shapes sizes vastly capabilities operate stringent resource constraints ranging space time power programming usually low level system's programming languages close hardware resulting software costly particularly portable java programming language successful providing virtualized level development environment desktop server applications programming java leads memory safe code ported straightforwardly architecture operating system paper surveys art java virtualization real time embedded systems technological advances virtual machines real time extensions language brought java closer widely usable wide range embedded

transistor dimensions continue scale deep nanometer regime silicon reliability becoming chief concern time transistor counts scaling enabling design highly integrated chips cores complex interconnect fabric network chip noc particularly problematic accumulation permanent hardware faults leads disconnected cores system maintain correct system operation salvage data isolated nodes introduce recovery mechanism targeting precisely issue drain distributed recovery architecture inaccessible nodes provides system level recovery permanent failures error disconnects node network drain emergency links transfer architectural cached data disconnected nodes nearby connected caches drain incurs zero performance penalty normal operation compatible cache coherence protocol interconnect topology routing protocol experimental results drain able provide complete recovery milliseconds average 1ghz 64 node cmp overhead thousand gates

novel bidirectional fault tolerant noc bft noc architecture capable mitigating static dynamic channel failures proposed traditional noc platform faulty data channel force blocked packets costly detours resulting significant performance hits novel fault tolerance measures bidirectional noc platform proposed dynamically reconfigurable bidirectional channels bft noc offer flexibility contain data link permanent transient faults incurring negligible performance loss potential performance advantages terms failure rate reduction reliability enhancement bft noc architecture carefully analyzed extensive experimental results validate fault tolerance performance bft noc synthetic real world network traffic patterns

propose variation aware source routing algorithm heterogenous noc router operating latency result process variations proposed scheme computes path communication based inherent speed routers dictated process variations current traffic pattern results indicate employing proposed routing scheme reduces average packet latencies performance metric applications 28 compared deterministic adaptive routing algorithms

process variation pv increasingly threatening reliability networks chips various resilient router designs recently proposed evaluated evaluations assume random fault distributions result 52 81 inaccuracy propose accurate circuit level fault modeling tool plugged system level noc simulator quantify system level impact pv induced faults runtime pinpoint fault prone router components protected accurately evaluate alternative resilient multi core designs

increasing integrated components single chip increased importance chip networks significant chip network routers buffer occupies consumes significant amount power propose flexibuffer microarchitecture minimize buffer leakage power using fine grained power gating adjusting size active buffers adaptively propose microarchitecture techniques support fine grained power gating credit credit based flow control buffer organizations overcome limitation circular buffers results minimal loss performance reduce leakage power chip network router buffers 61 overall router power consumption 39

network chip noc evolving interconnection architecture addressing rising complexity system chips socs model cost noc multiple soc i.e system distinct modes operation unique traffic pattern specifically formulate optimization capturing share capacity evaluate proposed scheme using synthetic real life traffic substantial reduction 27 required noc resources using algorithm using somewhat heavier simulated annealing procedure

multicore architectures especially chip multi processors widely acknowledged successful design paradigm existing approaches primarily target application driven partitioning shared cache alleviate inter core cache interference performance energy efficiency improved dynamic cache reconfiguration promising technique reducing energy consumption cache subsystem uniprocessor systems paper novel energy optimization technique employs dynamic reconfiguration private caches partitioning shared cache multicore systems real time tasks static profiling based algorithm designed judiciously beneficial cache configurations private caches task partition factors shared cache core energy consumption minimized task deadline satisfied experimental results using real benchmarks demonstrate approach achieve 29.29 energy saving average compared systems employing cache partitioning

focusing partition cache space multithreaded application threads threads multithreaded application cache space requirements propose automated dynamic intra application cache partitioning scheme targeting emerging multicores multilayer cache hierarchies comprehensive experimental analysis proposed scheme average improvements 17.1 18.6 specomp parsec suites

scratchpad memory spm utilized prefetch buffer embedded systems parallel architectures hide memory access latency impact reuse pattern spm prefetching investigated paper quantify impact reuse spm prefetching efficiency propose reuse aware spm prefetching rasp scheme average performance energy improvements 15.9 22.0 cache prefetching 12.9 31.2 prefetch spm management 18.5 10 drdu 1 spm prefetching support

soc building local storage accelerator inefficient due low average utilization paper design implementation buffer integrated caching bic allows buffers instantiated simultaneously caches bic enables cores view portions sram cache accelerators access portions sram private buffers demonstrate cost effectiveness bic based recognition mpsoc includes pentium sup tm sup cores augmented reality accelerator speech recognition accelerator 3 extra added baseline l2 cache bic eliminates build 215kb dedicated sram accelerators increasing total cache misses 0.3

limited write endurance phase change random access memory pram major obstacles pram based main memory wear leveling techniques proposed extend lifetime balancing writes traffic concern considered endurance variation pram chips pram cells distinct endurance balanced writes result lifetime degradation due weakest cells instead balancing writes traffic paper propose wear rate leveling wrl variant wear leveling balance wear rates i.e writes traffic edudrance cells pram chip investigating writing behavior applications endurance variation propose architecture level wrl mechanism moreover tradeoff endurance improvement swapping data volume co optimize endurance swapping novel algorithm max hyper weight rematching proposed maximize pram lifetime minimize performance degradation experimental results 19x endurance improvement prior wear leveling

cache roadblock towards low supply voltage vcc mainly low vcc incurs process variation induced bit errors sram cache existing approaches low vcc cache suffer low performance due reduced effective capacity latency correct errors increased misses due accesses faulty words propose word level sub block disable based method increases utilization available cache capacity key idea minimize accesses faulty words propose utilizing access behavior history allocating cache resource faulty words addition propose remapping cache words inside cache line match access error patterns experimental results proposed method average 21.8 34.0 performance improvement overhead l1 l2 caches

paper closed form expression estimating minimum operating voltage vddmin cmos logic gates proposed vddmin defined minimum supply voltage circuits operate correctly vddmin combinational circuits written linear function square root logarithm logic gates slope proportional standard deviation die variation threshold voltage difference pmos nmos transistors proposed expression verified monte carlo simulations using various gate chains verification reveals vddmin inverter chains estimated 11 error expression verified silicon measurements 65nm cmos process

paper investigates pipelining methodologies ultra low voltage regime based analytical model simulations propose pipelining technique provides energy efficiency performance conventional approaches ultra low voltage design phase latch based design sequential circuit optimizations proposed improve energy efficiency performance silicon results demonstrate 16b multiplier using approaches 65nm cmos improve energy efficiency 30 performance 60

closed form expressions related algorithms fast power grid analysis proposed paper ir voltage drop arbitrary power distribution network determined algorithms described uniform voltage supplies uniform current loads distributed throughout power grid principle spatial locality exploited accelerate proposed power grid analysis method analysis uniform power grids utilizes principle spatial locality iterations required proposed ir drop analysis proposed algorithms 70 times faster power grids composed five million nodes 180 times faster larger power grids composed 25 million nodes compared existing methods proposed method exhibits 0.5 error

power gating essential controlling leakage power dissipation modern chip designs power gating introduces unique power delivery integrity issues tradeoffs switching rush current wake supply noises addition power gated power delivery networks pdns amount power saving intrinsically trades power integrity paper propose systemic decoupling capacitance optimization strategies optimally balance switching rush current noises tradeoff power integrity wake time hence power saving furthermore propose novel re routable decoupling capacitance concept break tight interaction power integrity power saving providing improved tradeoffs design strategies implemented simulation based optimization flow conducted experimental results demonstrated significant improvement leakage power saving techniques

paper novel circuit level timing error mitigation technique aims increase energy efficiency applying situ error detection correction technique called razor dsp datapaths timing errors detected using razor flip flops critical path endpoints error rate feedback control dynamic voltage scaling dvs control loop propose approach bound magnitude intermittent timing errors circuit level introducing guard band timing errors safely mitigated guard band achieved shaping path delay distribution critical paths correspond lsb result registers ensured critical modifying topology final stage carry merge adder using tool based device sizing hence timing violations lead weakly correlated logical errors magnitude mean squared error sense applied approach digital filter 32nm cmos power saving compared conventional design 23 worst process temperature corners

mos current mode logic mcml promising logic style counteract power analysis attacks unfortunately static power consumption mcml standard cells significantly compared equivalent functions implemented using static cmos logic result logic style limited portable devices paradoxically devices sensitive physical attacks ones benefit adoption mcml propose overcome limitation reducing drastically static power consumption mcml based cryptographic circuits designed power gated mcml pg mcml standard cell library featuring sleep transistor cell effects sleep transistor performance negligible moreover proposed differential library supported conventional eda tools evaluated standard cell library using advanced encryption standard aes benchmark compared power consumption dpa resistance figures ones static cmos conventional mcml results pg mcml library achieve power consumption comparable static cmos proving pg mcml cells suit strict power budget battery operated devices

deployment computer vision algorithms mobile applications growing rapid pace primary component computer vision software pipeline feature extraction identifies encodes relevant image features embedded heterogeneous multicore design named effex incorporates novel functional units memory architecture support capable increasing mobile vision performance balancing power demonstrate architecture running common feature extraction algorithms capable providing significant speedups low cost simulations speedup 14x feature extraction decrease energy 40x memory accesses

paper novel run time adaptive energy aware motion disparity estimation de architecture multiview video coding mvc incorporates efficient memory access data prefetching techniques jointly reducing chip memory energy consumption dynamically expanding search window constructed run time reduce chip memory accesses considering multi stage processing nature advanced fast de schemes reduced sized multi bank chip memory employed power gated depending video properties result tested various video sequence approach provides dynamic energy reduction 82 96 chip memory leakage energy reduction 57 75 chip memory compared level level 7 prefetching techniques prominent data reuse prefetching techniques video coding proposed de architecture synthesized using 65nm ibm low power technology compared art mvc de hardware 14 architecture provides 66 72 reduction power consumption respectively moreover scheme achieves 30fps de 4 view hd1080p encoding power consumption 74mw

pipelined mpsocs provide throughput implementation platform multimedia applications reduced design time improved flexibility typically pipelined mpsoc balanced design time using worst parameters widely varying workload designs consume exorbitant amount power paper propose novel adaptive pipelined mpsoc architecture adapts varying workloads architecture consists main processors auxiliary processors distributed run time balancing approach main processor independent main processors decides required auxiliary processors run time depending varying workload proposed run time balancing approach based line statistical information workload prediction run time monitoring current previous workloads execution times exploited adaptability architecture study 264 video encoder supporting hd720p 30 fps clock power gating deactivate idle auxiliary processors low workload periods results adaptive pipelined mpsoc provides energy savings 34 40 clock power gating based deactivation auxiliary processors respectively minimum throughput 29 fps compared design time balanced pipelined mpsoc

paper novel performance low cost execution architecture system level gals programming language systemj extends java synchronous reactive features esterel asynchronous constructs csp communicating sequential processes architecture based jop java optimized processor hardware implementation java virtual machine jvm jop inherently suited data driven transformational operations extended efficiently execute control constructs control flow systemj core called rjop reactive jop supports efficient execution data dominated control dominated embedded applications maintains time predictable execution applications intended real time embedded systems calculation worst reaction time wcrt provided original core initial results indicate significant performance improvement lower resource requirements existing architectures systemj execution

constantly increasing internet traffic fast changing network protocols future routers simultaneously satisfy requirements throughput qos flexibility scalability propose novel integrated cpu gpu microarchitecture hermes qos aware speed routing develop thread scheduling mechanism significantly improves qos metrics

marss source fast system simulation tool built qemu support cycle accurate simulation superscalar homogeneous heterogeneous multicore x86 processors marss includes detailed models coherent caches interconnections chipsets memory io devices marss simulates execution software components system including unmodified binaries applications os libraries

